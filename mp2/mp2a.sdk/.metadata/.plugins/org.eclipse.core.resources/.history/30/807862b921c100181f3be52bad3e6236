/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "test_vector.h"

#define NUM_CHARS     64
#define OLED_BLANK    0x20
#define UPDATE_ADDR   0x10

#define GPIO_0_DEVICE_ID XPAR_GPIO_0_DEVICE_ID
#define GPIO_1_DEVICE_ID XPAR_GPIO_1_DEVICE_ID

#define ADDRESS_CH 1
#define DATA_CH    2

#define SEND_DATA_CH 1
#define WRITE_CH     2

XGpio addr_data;    // Address and Data
XGpio misc_sig;    // Write and Send_data

void print_to_oled(char* str) {
	uint32_t reg;
	uint32_t eos = 0;
    for(int i = 0; i < 64; i+=4) {
    	reg = 0;
        if(eos == 1 || str[i] == '\0') {
        	reg = reg | (OLED_BLANK << 0);
        	eos = 1;
        }
        else {
        	reg = reg | (str[i] << 0);
        }
        if(eos == 1 || str[i+1] == '\0') {
           	reg = reg | (OLED_BLANK << 8);
           	eos = 1;
        }
        else {
          	reg = reg | (str[i+1] << 8);
        }
        if(eos == 1 || str[i+2] == '\0') {
           	reg = reg | (OLED_BLANK << 16);
           	eos = 1;
        }
        else {
           	reg = reg | (str[i+2] << 16);
        }
        if(eos == 1 || str[i+3] == '\0') {
           	reg = reg | (OLED_BLANK << 24);
           	eos = 1;
        }
        else {
           	reg = reg | (str[i+3] << 24);
        }
        // Send Data
        // Set Address and Data;
        XGpio_DiscreteWrite(&addr_data, ADDRESS_CH, 0xFF&(i>>2));
        XGpio_DiscreteWrite(&addr_data, DATA_CH, reg);

        // Send Write Bit
        XGpio_DiscreteWrite(&misc_sig, WRITE_CH, 1);
        XGpio_DiscreteWrite(&misc_sig, WRITE_CH, 0);



    }
    // Update Oled by writing to 0x10:
    XGpio_DiscreteWrite(&addr_data, ADDRESS_CH, UPDATE_ADDR);
    XGpio_DiscreteWrite(&misc_sig, WRITE_CH, 1);
    XGpio_DiscreteWrite(&misc_sig, WRITE_CH, 0);
}

int main()
{
	int test_vector_index = 0;
    init_platform();

	xil_printf("Hardware Initialized!\n\r");

    // Init GPIOs
    XGpio_Initialize(&addr_data, XPAR_GPIO_0_DEVICE_ID);
    XGpio_Initialize(&misc_sig, XPAR_GPIO_1_DEVICE_ID);

    XGpio_DiscreteWrite(&addr_data, ADDRESS_CH, 0);
    XGpio_DiscreteWrite(&addr_data, DATA_CH, 0);
    XGpio_DiscreteWrite(&misc_sig, WRITE_CH, 0);



    print_to_oled(" ");



    while(1) {
        XGpio_DiscreteWrite(&addr_data, ADDRESS_CH, 0);
        XGpio_DiscreteWrite(&misc_sig, WRITE_CH, 0);
    	while(XGpio_DiscreteRead(&misc_sig, SEND_DATA_CH) == 0) {
    		// Wait
    	}
    	 for(int i = 0; i < 5000000; i++) {
    	    	// Delay
    	    }


        if(test_vector_index < num_test_vectors) {
        	print_to_oled(testvector[test_vector_index]);
        	test_vector_index++;
        	xil_printf("Printing Test Vector %i\n\r", test_vector_index);
        }
        for(int i = 0; i < 5000000; i++) {
           	// Delay
           }
        while(XGpio_DiscreteRead(&misc_sig, SEND_DATA_CH) == 1) {
        	// Wait
        }
    }
    cleanup_platform();
    return 0;
}
