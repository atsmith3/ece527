// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "copy_out.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic copy_out::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic copy_out::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> copy_out::ap_ST_fsm_state1 = "1";
const sc_lv<8> copy_out::ap_ST_fsm_state2 = "10";
const sc_lv<8> copy_out::ap_ST_fsm_state3 = "100";
const sc_lv<8> copy_out::ap_ST_fsm_state4 = "1000";
const sc_lv<8> copy_out::ap_ST_fsm_state5 = "10000";
const sc_lv<8> copy_out::ap_ST_fsm_state6 = "100000";
const sc_lv<8> copy_out::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> copy_out::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> copy_out::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> copy_out::ap_const_lv1_0 = "0";
const sc_lv<3> copy_out::ap_const_lv3_0 = "000";
const sc_lv<2> copy_out::ap_const_lv2_0 = "00";
const sc_lv<4> copy_out::ap_const_lv4_0 = "0000";
const sc_lv<32> copy_out::ap_const_lv32_3 = "11";
const sc_lv<32> copy_out::ap_const_lv32_7 = "111";
const sc_lv<32> copy_out::ap_const_lv32_1 = "1";
const sc_lv<32> copy_out::ap_const_lv32_2 = "10";
const sc_lv<32> copy_out::ap_const_lv32_A = "1010";
const sc_lv<4> copy_out::ap_const_lv4_F = "1111";
const sc_lv<4> copy_out::ap_const_lv4_A = "1010";
const sc_lv<4> copy_out::ap_const_lv4_1 = "1";
const sc_lv<1> copy_out::ap_const_lv1_1 = "1";
const bool copy_out::ap_const_boolean_1 = true;

copy_out::copy_out(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_out_r_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_out_r_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_out_r_AWREADY);
    sensitive << ( m_axi_out_r_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_out_r_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_out_r_WREADY);
    sensitive << ( m_axi_out_r_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_out_r_WREADY );

    SC_METHOD(thread_exitcond_fu_98_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_71 );

    SC_METHOD(thread_fc6_o_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast1_fu_93_p1 );

    SC_METHOD(thread_fc6_o_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_fc6_o_o15_cast1_fu_82_p1);
    sensitive << ( fc6_o_o15 );

    SC_METHOD(thread_i_12_fu_104_p2);
    sensitive << ( i_reg_71 );

    SC_METHOD(thread_i_cast1_fu_93_p1);
    sensitive << ( i_reg_71 );

    SC_METHOD(thread_m_axi_out_r_ARADDR);

    SC_METHOD(thread_m_axi_out_r_ARBURST);

    SC_METHOD(thread_m_axi_out_r_ARCACHE);

    SC_METHOD(thread_m_axi_out_r_ARID);

    SC_METHOD(thread_m_axi_out_r_ARLEN);

    SC_METHOD(thread_m_axi_out_r_ARLOCK);

    SC_METHOD(thread_m_axi_out_r_ARPROT);

    SC_METHOD(thread_m_axi_out_r_ARQOS);

    SC_METHOD(thread_m_axi_out_r_ARREGION);

    SC_METHOD(thread_m_axi_out_r_ARSIZE);

    SC_METHOD(thread_m_axi_out_r_ARUSER);

    SC_METHOD(thread_m_axi_out_r_ARVALID);

    SC_METHOD(thread_m_axi_out_r_AWADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fc6_o_o15_cast1_fu_82_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_out_r_AWREADY );

    SC_METHOD(thread_m_axi_out_r_AWBURST);

    SC_METHOD(thread_m_axi_out_r_AWCACHE);

    SC_METHOD(thread_m_axi_out_r_AWID);

    SC_METHOD(thread_m_axi_out_r_AWLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_out_r_AWREADY );

    SC_METHOD(thread_m_axi_out_r_AWLOCK);

    SC_METHOD(thread_m_axi_out_r_AWPROT);

    SC_METHOD(thread_m_axi_out_r_AWQOS);

    SC_METHOD(thread_m_axi_out_r_AWREGION);

    SC_METHOD(thread_m_axi_out_r_AWSIZE);

    SC_METHOD(thread_m_axi_out_r_AWUSER);

    SC_METHOD(thread_m_axi_out_r_AWVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_out_r_AWREADY );

    SC_METHOD(thread_m_axi_out_r_BREADY);
    sensitive << ( m_axi_out_r_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_m_axi_out_r_RREADY);

    SC_METHOD(thread_m_axi_out_r_WDATA);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( fc6_o_load_reg_128 );
    sensitive << ( ap_reg_ioackin_m_axi_out_r_WREADY );

    SC_METHOD(thread_m_axi_out_r_WID);

    SC_METHOD(thread_m_axi_out_r_WLAST);

    SC_METHOD(thread_m_axi_out_r_WSTRB);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_out_r_WREADY );

    SC_METHOD(thread_m_axi_out_r_WUSER);

    SC_METHOD(thread_m_axi_out_r_WVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_out_r_WREADY );

    SC_METHOD(thread_out_r_blk_n_AW);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_out_r_AWREADY );

    SC_METHOD(thread_out_r_blk_n_B);
    sensitive << ( m_axi_out_r_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_out_r_blk_n_W);
    sensitive << ( m_axi_out_r_WREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_out_r_BVALID );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_sig_ioackin_m_axi_out_r_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_98_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_out_r_WREADY );

    ap_CS_fsm = "00000001";
    ap_reg_ioackin_m_axi_out_r_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_out_r_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "copy_out_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_out_r_AWVALID, "(port)m_axi_out_r_AWVALID");
    sc_trace(mVcdFile, m_axi_out_r_AWREADY, "(port)m_axi_out_r_AWREADY");
    sc_trace(mVcdFile, m_axi_out_r_AWADDR, "(port)m_axi_out_r_AWADDR");
    sc_trace(mVcdFile, m_axi_out_r_AWID, "(port)m_axi_out_r_AWID");
    sc_trace(mVcdFile, m_axi_out_r_AWLEN, "(port)m_axi_out_r_AWLEN");
    sc_trace(mVcdFile, m_axi_out_r_AWSIZE, "(port)m_axi_out_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_out_r_AWBURST, "(port)m_axi_out_r_AWBURST");
    sc_trace(mVcdFile, m_axi_out_r_AWLOCK, "(port)m_axi_out_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_out_r_AWCACHE, "(port)m_axi_out_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_out_r_AWPROT, "(port)m_axi_out_r_AWPROT");
    sc_trace(mVcdFile, m_axi_out_r_AWQOS, "(port)m_axi_out_r_AWQOS");
    sc_trace(mVcdFile, m_axi_out_r_AWREGION, "(port)m_axi_out_r_AWREGION");
    sc_trace(mVcdFile, m_axi_out_r_AWUSER, "(port)m_axi_out_r_AWUSER");
    sc_trace(mVcdFile, m_axi_out_r_WVALID, "(port)m_axi_out_r_WVALID");
    sc_trace(mVcdFile, m_axi_out_r_WREADY, "(port)m_axi_out_r_WREADY");
    sc_trace(mVcdFile, m_axi_out_r_WDATA, "(port)m_axi_out_r_WDATA");
    sc_trace(mVcdFile, m_axi_out_r_WSTRB, "(port)m_axi_out_r_WSTRB");
    sc_trace(mVcdFile, m_axi_out_r_WLAST, "(port)m_axi_out_r_WLAST");
    sc_trace(mVcdFile, m_axi_out_r_WID, "(port)m_axi_out_r_WID");
    sc_trace(mVcdFile, m_axi_out_r_WUSER, "(port)m_axi_out_r_WUSER");
    sc_trace(mVcdFile, m_axi_out_r_ARVALID, "(port)m_axi_out_r_ARVALID");
    sc_trace(mVcdFile, m_axi_out_r_ARREADY, "(port)m_axi_out_r_ARREADY");
    sc_trace(mVcdFile, m_axi_out_r_ARADDR, "(port)m_axi_out_r_ARADDR");
    sc_trace(mVcdFile, m_axi_out_r_ARID, "(port)m_axi_out_r_ARID");
    sc_trace(mVcdFile, m_axi_out_r_ARLEN, "(port)m_axi_out_r_ARLEN");
    sc_trace(mVcdFile, m_axi_out_r_ARSIZE, "(port)m_axi_out_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_out_r_ARBURST, "(port)m_axi_out_r_ARBURST");
    sc_trace(mVcdFile, m_axi_out_r_ARLOCK, "(port)m_axi_out_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_out_r_ARCACHE, "(port)m_axi_out_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_out_r_ARPROT, "(port)m_axi_out_r_ARPROT");
    sc_trace(mVcdFile, m_axi_out_r_ARQOS, "(port)m_axi_out_r_ARQOS");
    sc_trace(mVcdFile, m_axi_out_r_ARREGION, "(port)m_axi_out_r_ARREGION");
    sc_trace(mVcdFile, m_axi_out_r_ARUSER, "(port)m_axi_out_r_ARUSER");
    sc_trace(mVcdFile, m_axi_out_r_RVALID, "(port)m_axi_out_r_RVALID");
    sc_trace(mVcdFile, m_axi_out_r_RREADY, "(port)m_axi_out_r_RREADY");
    sc_trace(mVcdFile, m_axi_out_r_RDATA, "(port)m_axi_out_r_RDATA");
    sc_trace(mVcdFile, m_axi_out_r_RLAST, "(port)m_axi_out_r_RLAST");
    sc_trace(mVcdFile, m_axi_out_r_RID, "(port)m_axi_out_r_RID");
    sc_trace(mVcdFile, m_axi_out_r_RUSER, "(port)m_axi_out_r_RUSER");
    sc_trace(mVcdFile, m_axi_out_r_RRESP, "(port)m_axi_out_r_RRESP");
    sc_trace(mVcdFile, m_axi_out_r_BVALID, "(port)m_axi_out_r_BVALID");
    sc_trace(mVcdFile, m_axi_out_r_BREADY, "(port)m_axi_out_r_BREADY");
    sc_trace(mVcdFile, m_axi_out_r_BRESP, "(port)m_axi_out_r_BRESP");
    sc_trace(mVcdFile, m_axi_out_r_BID, "(port)m_axi_out_r_BID");
    sc_trace(mVcdFile, m_axi_out_r_BUSER, "(port)m_axi_out_r_BUSER");
    sc_trace(mVcdFile, fc6_o_o15, "(port)fc6_o_o15");
    sc_trace(mVcdFile, fc6_o_address0, "(port)fc6_o_address0");
    sc_trace(mVcdFile, fc6_o_ce0, "(port)fc6_o_ce0");
    sc_trace(mVcdFile, fc6_o_q0, "(port)fc6_o_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_r_blk_n_AW, "out_r_blk_n_AW");
    sc_trace(mVcdFile, out_r_blk_n_W, "out_r_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, out_r_blk_n_B, "out_r_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_out_r_AWREADY, "ap_sig_ioackin_m_axi_out_r_AWREADY");
    sc_trace(mVcdFile, i_12_fu_104_p2, "i_12_fu_104_p2");
    sc_trace(mVcdFile, i_12_reg_118, "i_12_reg_118");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_98_p2, "exitcond_fu_98_p2");
    sc_trace(mVcdFile, fc6_o_load_reg_128, "fc6_o_load_reg_128");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_reg_71, "i_reg_71");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_out_r_WREADY, "ap_sig_ioackin_m_axi_out_r_WREADY");
    sc_trace(mVcdFile, i_cast1_fu_93_p1, "i_cast1_fu_93_p1");
    sc_trace(mVcdFile, fc6_o_o15_cast1_fu_82_p1, "fc6_o_o15_cast1_fu_82_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_out_r_AWREADY, "ap_reg_ioackin_m_axi_out_r_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_out_r_WREADY, "ap_reg_ioackin_m_axi_out_r_WREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

copy_out::~copy_out() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void copy_out::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_out_r_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_out_r_AWREADY.read()))) {
                ap_reg_ioackin_m_axi_out_r_AWREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_out_r_AWREADY.read()))) {
                ap_reg_ioackin_m_axi_out_r_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_out_r_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_out_r_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_out_r_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_out_r_WREADY.read())) {
                ap_reg_ioackin_m_axi_out_r_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_out_r_WREADY.read(), ap_const_logic_1))) {
        i_reg_71 = i_12_reg_118.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_out_r_AWREADY.read())))) {
        i_reg_71 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        fc6_o_load_reg_128 = fc6_o_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_12_reg_118 = i_12_fu_104_p2.read();
    }
}

void copy_out::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void copy_out::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void copy_out::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void copy_out::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void copy_out::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void copy_out::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(m_axi_out_r_BVALID.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void copy_out::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void copy_out::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(m_axi_out_r_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void copy_out::thread_ap_sig_ioackin_m_axi_out_r_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_out_r_AWREADY.read())) {
        ap_sig_ioackin_m_axi_out_r_AWREADY = m_axi_out_r_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_out_r_AWREADY = ap_const_logic_1;
    }
}

void copy_out::thread_ap_sig_ioackin_m_axi_out_r_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_out_r_WREADY.read())) {
        ap_sig_ioackin_m_axi_out_r_WREADY = m_axi_out_r_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_out_r_WREADY = ap_const_logic_1;
    }
}

void copy_out::thread_exitcond_fu_98_p2() {
    exitcond_fu_98_p2 = (!i_reg_71.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_71.read() == ap_const_lv4_A);
}

void copy_out::thread_fc6_o_address0() {
    fc6_o_address0 =  (sc_lv<4>) (i_cast1_fu_93_p1.read());
}

void copy_out::thread_fc6_o_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        fc6_o_ce0 = ap_const_logic_1;
    } else {
        fc6_o_ce0 = ap_const_logic_0;
    }
}

void copy_out::thread_fc6_o_o15_cast1_fu_82_p1() {
    fc6_o_o15_cast1_fu_82_p1 = esl_zext<32,30>(fc6_o_o15.read());
}

void copy_out::thread_i_12_fu_104_p2() {
    i_12_fu_104_p2 = (!i_reg_71.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_71.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void copy_out::thread_i_cast1_fu_93_p1() {
    i_cast1_fu_93_p1 = esl_zext<32,4>(i_reg_71.read());
}

void copy_out::thread_m_axi_out_r_ARADDR() {
    m_axi_out_r_ARADDR = ap_const_lv32_0;
}

void copy_out::thread_m_axi_out_r_ARBURST() {
    m_axi_out_r_ARBURST = ap_const_lv2_0;
}

void copy_out::thread_m_axi_out_r_ARCACHE() {
    m_axi_out_r_ARCACHE = ap_const_lv4_0;
}

void copy_out::thread_m_axi_out_r_ARID() {
    m_axi_out_r_ARID = ap_const_lv1_0;
}

void copy_out::thread_m_axi_out_r_ARLEN() {
    m_axi_out_r_ARLEN = ap_const_lv32_0;
}

void copy_out::thread_m_axi_out_r_ARLOCK() {
    m_axi_out_r_ARLOCK = ap_const_lv2_0;
}

void copy_out::thread_m_axi_out_r_ARPROT() {
    m_axi_out_r_ARPROT = ap_const_lv3_0;
}

void copy_out::thread_m_axi_out_r_ARQOS() {
    m_axi_out_r_ARQOS = ap_const_lv4_0;
}

void copy_out::thread_m_axi_out_r_ARREGION() {
    m_axi_out_r_ARREGION = ap_const_lv4_0;
}

void copy_out::thread_m_axi_out_r_ARSIZE() {
    m_axi_out_r_ARSIZE = ap_const_lv3_0;
}

void copy_out::thread_m_axi_out_r_ARUSER() {
    m_axi_out_r_ARUSER = ap_const_lv1_0;
}

void copy_out::thread_m_axi_out_r_ARVALID() {
    m_axi_out_r_ARVALID = ap_const_logic_0;
}

void copy_out::thread_m_axi_out_r_AWADDR() {
    m_axi_out_r_AWADDR = fc6_o_o15_cast1_fu_82_p1.read();
}

void copy_out::thread_m_axi_out_r_AWBURST() {
    m_axi_out_r_AWBURST = ap_const_lv2_0;
}

void copy_out::thread_m_axi_out_r_AWCACHE() {
    m_axi_out_r_AWCACHE = ap_const_lv4_0;
}

void copy_out::thread_m_axi_out_r_AWID() {
    m_axi_out_r_AWID = ap_const_lv1_0;
}

void copy_out::thread_m_axi_out_r_AWLEN() {
    m_axi_out_r_AWLEN = ap_const_lv32_A;
}

void copy_out::thread_m_axi_out_r_AWLOCK() {
    m_axi_out_r_AWLOCK = ap_const_lv2_0;
}

void copy_out::thread_m_axi_out_r_AWPROT() {
    m_axi_out_r_AWPROT = ap_const_lv3_0;
}

void copy_out::thread_m_axi_out_r_AWQOS() {
    m_axi_out_r_AWQOS = ap_const_lv4_0;
}

void copy_out::thread_m_axi_out_r_AWREGION() {
    m_axi_out_r_AWREGION = ap_const_lv4_0;
}

void copy_out::thread_m_axi_out_r_AWSIZE() {
    m_axi_out_r_AWSIZE = ap_const_lv3_0;
}

void copy_out::thread_m_axi_out_r_AWUSER() {
    m_axi_out_r_AWUSER = ap_const_lv1_0;
}

void copy_out::thread_m_axi_out_r_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_out_r_AWREADY.read()))) {
        m_axi_out_r_AWVALID = ap_const_logic_1;
    } else {
        m_axi_out_r_AWVALID = ap_const_logic_0;
    }
}

void copy_out::thread_m_axi_out_r_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(m_axi_out_r_BVALID.read(), ap_const_logic_1))) {
        m_axi_out_r_BREADY = ap_const_logic_1;
    } else {
        m_axi_out_r_BREADY = ap_const_logic_0;
    }
}

void copy_out::thread_m_axi_out_r_RREADY() {
    m_axi_out_r_RREADY = ap_const_logic_0;
}

void copy_out::thread_m_axi_out_r_WDATA() {
    m_axi_out_r_WDATA = fc6_o_load_reg_128.read();
}

void copy_out::thread_m_axi_out_r_WID() {
    m_axi_out_r_WID = ap_const_lv1_0;
}

void copy_out::thread_m_axi_out_r_WLAST() {
    m_axi_out_r_WLAST = ap_const_logic_0;
}

void copy_out::thread_m_axi_out_r_WSTRB() {
    m_axi_out_r_WSTRB = ap_const_lv4_F;
}

void copy_out::thread_m_axi_out_r_WUSER() {
    m_axi_out_r_WUSER = ap_const_lv1_0;
}

void copy_out::thread_m_axi_out_r_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_out_r_WREADY.read()))) {
        m_axi_out_r_WVALID = ap_const_logic_1;
    } else {
        m_axi_out_r_WVALID = ap_const_logic_0;
    }
}

void copy_out::thread_out_r_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        out_r_blk_n_AW = m_axi_out_r_AWREADY.read();
    } else {
        out_r_blk_n_AW = ap_const_logic_1;
    }
}

void copy_out::thread_out_r_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        out_r_blk_n_B = m_axi_out_r_BVALID.read();
    } else {
        out_r_blk_n_B = ap_const_logic_1;
    }
}

void copy_out::thread_out_r_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_r_blk_n_W = m_axi_out_r_WREADY.read();
    } else {
        out_r_blk_n_W = ap_const_logic_1;
    }
}

void copy_out::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_out_r_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_98_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_out_r_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(m_axi_out_r_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

