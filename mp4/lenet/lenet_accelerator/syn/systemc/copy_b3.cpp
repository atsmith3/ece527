// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "copy_b3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic copy_b3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic copy_b3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> copy_b3::ap_ST_fsm_state1 = "1";
const sc_lv<9> copy_b3::ap_ST_fsm_state2 = "10";
const sc_lv<9> copy_b3::ap_ST_fsm_state3 = "100";
const sc_lv<9> copy_b3::ap_ST_fsm_state4 = "1000";
const sc_lv<9> copy_b3::ap_ST_fsm_state5 = "10000";
const sc_lv<9> copy_b3::ap_ST_fsm_state6 = "100000";
const sc_lv<9> copy_b3::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> copy_b3::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> copy_b3::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> copy_b3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> copy_b3::ap_const_lv1_0 = "0";
const sc_lv<3> copy_b3::ap_const_lv3_0 = "000";
const sc_lv<2> copy_b3::ap_const_lv2_0 = "00";
const sc_lv<4> copy_b3::ap_const_lv4_0 = "0000";
const sc_lv<32> copy_b3::ap_const_lv32_7 = "111";
const sc_lv<5> copy_b3::ap_const_lv5_0 = "00000";
const sc_lv<32> copy_b3::ap_const_lv32_6 = "110";
const sc_lv<32> copy_b3::ap_const_lv32_8 = "1000";
const sc_lv<32> copy_b3::ap_const_lv32_10 = "10000";
const sc_lv<5> copy_b3::ap_const_lv5_10 = "10000";
const sc_lv<5> copy_b3::ap_const_lv5_1 = "1";
const sc_lv<1> copy_b3::ap_const_lv1_1 = "1";
const bool copy_b3::ap_const_boolean_1 = true;

copy_b3::copy_b3(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state8);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( exitcond_fu_92_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_92_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_92_p2 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_in_r_ARREADY);
    sensitive << ( m_axi_in_r_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_in_r_ARREADY );

    SC_METHOD(thread_c3_b_i9_cast1_fu_77_p1);
    sensitive << ( c3_b_i9 );

    SC_METHOD(thread_exitcond_fu_92_p2);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_92_p2 );
    sensitive << ( i_reg_66 );

    SC_METHOD(thread_i_14_fu_98_p2);
    sensitive << ( i_reg_66 );

    SC_METHOD(thread_i_cast1_fu_88_p1);
    sensitive << ( i_reg_66 );

    SC_METHOD(thread_in_r_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_in_r_ARREADY );

    SC_METHOD(thread_in_r_blk_n_R);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_92_p2 );

    SC_METHOD(thread_m_axi_in_r_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c3_b_i9_cast1_fu_77_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_in_r_ARREADY );

    SC_METHOD(thread_m_axi_in_r_ARBURST);

    SC_METHOD(thread_m_axi_in_r_ARCACHE);

    SC_METHOD(thread_m_axi_in_r_ARID);

    SC_METHOD(thread_m_axi_in_r_ARLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_in_r_ARREADY );

    SC_METHOD(thread_m_axi_in_r_ARLOCK);

    SC_METHOD(thread_m_axi_in_r_ARPROT);

    SC_METHOD(thread_m_axi_in_r_ARQOS);

    SC_METHOD(thread_m_axi_in_r_ARREGION);

    SC_METHOD(thread_m_axi_in_r_ARSIZE);

    SC_METHOD(thread_m_axi_in_r_ARUSER);

    SC_METHOD(thread_m_axi_in_r_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_in_r_ARREADY );

    SC_METHOD(thread_m_axi_in_r_AWADDR);

    SC_METHOD(thread_m_axi_in_r_AWBURST);

    SC_METHOD(thread_m_axi_in_r_AWCACHE);

    SC_METHOD(thread_m_axi_in_r_AWID);

    SC_METHOD(thread_m_axi_in_r_AWLEN);

    SC_METHOD(thread_m_axi_in_r_AWLOCK);

    SC_METHOD(thread_m_axi_in_r_AWPROT);

    SC_METHOD(thread_m_axi_in_r_AWQOS);

    SC_METHOD(thread_m_axi_in_r_AWREGION);

    SC_METHOD(thread_m_axi_in_r_AWSIZE);

    SC_METHOD(thread_m_axi_in_r_AWUSER);

    SC_METHOD(thread_m_axi_in_r_AWVALID);

    SC_METHOD(thread_m_axi_in_r_BREADY);

    SC_METHOD(thread_m_axi_in_r_RREADY);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_92_p2 );

    SC_METHOD(thread_m_axi_in_r_WDATA);

    SC_METHOD(thread_m_axi_in_r_WID);

    SC_METHOD(thread_m_axi_in_r_WLAST);

    SC_METHOD(thread_m_axi_in_r_WSTRB);

    SC_METHOD(thread_m_axi_in_r_WUSER);

    SC_METHOD(thread_m_axi_in_r_WVALID);

    SC_METHOD(thread_out_r_address0);
    sensitive << ( i_cast1_reg_110 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( in_addr_read_reg_123 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_fu_92_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_in_r_ARREADY );

    ap_CS_fsm = "000000001";
    ap_reg_ioackin_m_axi_in_r_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "copy_b3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_in_r_AWVALID, "(port)m_axi_in_r_AWVALID");
    sc_trace(mVcdFile, m_axi_in_r_AWREADY, "(port)m_axi_in_r_AWREADY");
    sc_trace(mVcdFile, m_axi_in_r_AWADDR, "(port)m_axi_in_r_AWADDR");
    sc_trace(mVcdFile, m_axi_in_r_AWID, "(port)m_axi_in_r_AWID");
    sc_trace(mVcdFile, m_axi_in_r_AWLEN, "(port)m_axi_in_r_AWLEN");
    sc_trace(mVcdFile, m_axi_in_r_AWSIZE, "(port)m_axi_in_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_in_r_AWBURST, "(port)m_axi_in_r_AWBURST");
    sc_trace(mVcdFile, m_axi_in_r_AWLOCK, "(port)m_axi_in_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_in_r_AWCACHE, "(port)m_axi_in_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_in_r_AWPROT, "(port)m_axi_in_r_AWPROT");
    sc_trace(mVcdFile, m_axi_in_r_AWQOS, "(port)m_axi_in_r_AWQOS");
    sc_trace(mVcdFile, m_axi_in_r_AWREGION, "(port)m_axi_in_r_AWREGION");
    sc_trace(mVcdFile, m_axi_in_r_AWUSER, "(port)m_axi_in_r_AWUSER");
    sc_trace(mVcdFile, m_axi_in_r_WVALID, "(port)m_axi_in_r_WVALID");
    sc_trace(mVcdFile, m_axi_in_r_WREADY, "(port)m_axi_in_r_WREADY");
    sc_trace(mVcdFile, m_axi_in_r_WDATA, "(port)m_axi_in_r_WDATA");
    sc_trace(mVcdFile, m_axi_in_r_WSTRB, "(port)m_axi_in_r_WSTRB");
    sc_trace(mVcdFile, m_axi_in_r_WLAST, "(port)m_axi_in_r_WLAST");
    sc_trace(mVcdFile, m_axi_in_r_WID, "(port)m_axi_in_r_WID");
    sc_trace(mVcdFile, m_axi_in_r_WUSER, "(port)m_axi_in_r_WUSER");
    sc_trace(mVcdFile, m_axi_in_r_ARVALID, "(port)m_axi_in_r_ARVALID");
    sc_trace(mVcdFile, m_axi_in_r_ARREADY, "(port)m_axi_in_r_ARREADY");
    sc_trace(mVcdFile, m_axi_in_r_ARADDR, "(port)m_axi_in_r_ARADDR");
    sc_trace(mVcdFile, m_axi_in_r_ARID, "(port)m_axi_in_r_ARID");
    sc_trace(mVcdFile, m_axi_in_r_ARLEN, "(port)m_axi_in_r_ARLEN");
    sc_trace(mVcdFile, m_axi_in_r_ARSIZE, "(port)m_axi_in_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_in_r_ARBURST, "(port)m_axi_in_r_ARBURST");
    sc_trace(mVcdFile, m_axi_in_r_ARLOCK, "(port)m_axi_in_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_in_r_ARCACHE, "(port)m_axi_in_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_in_r_ARPROT, "(port)m_axi_in_r_ARPROT");
    sc_trace(mVcdFile, m_axi_in_r_ARQOS, "(port)m_axi_in_r_ARQOS");
    sc_trace(mVcdFile, m_axi_in_r_ARREGION, "(port)m_axi_in_r_ARREGION");
    sc_trace(mVcdFile, m_axi_in_r_ARUSER, "(port)m_axi_in_r_ARUSER");
    sc_trace(mVcdFile, m_axi_in_r_RVALID, "(port)m_axi_in_r_RVALID");
    sc_trace(mVcdFile, m_axi_in_r_RREADY, "(port)m_axi_in_r_RREADY");
    sc_trace(mVcdFile, m_axi_in_r_RDATA, "(port)m_axi_in_r_RDATA");
    sc_trace(mVcdFile, m_axi_in_r_RLAST, "(port)m_axi_in_r_RLAST");
    sc_trace(mVcdFile, m_axi_in_r_RID, "(port)m_axi_in_r_RID");
    sc_trace(mVcdFile, m_axi_in_r_RUSER, "(port)m_axi_in_r_RUSER");
    sc_trace(mVcdFile, m_axi_in_r_RRESP, "(port)m_axi_in_r_RRESP");
    sc_trace(mVcdFile, m_axi_in_r_BVALID, "(port)m_axi_in_r_BVALID");
    sc_trace(mVcdFile, m_axi_in_r_BREADY, "(port)m_axi_in_r_BREADY");
    sc_trace(mVcdFile, m_axi_in_r_BRESP, "(port)m_axi_in_r_BRESP");
    sc_trace(mVcdFile, m_axi_in_r_BID, "(port)m_axi_in_r_BID");
    sc_trace(mVcdFile, m_axi_in_r_BUSER, "(port)m_axi_in_r_BUSER");
    sc_trace(mVcdFile, c3_b_i9, "(port)c3_b_i9");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_r_blk_n_AR, "in_r_blk_n_AR");
    sc_trace(mVcdFile, in_r_blk_n_R, "in_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, exitcond_fu_92_p2, "exitcond_fu_92_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_in_r_ARREADY, "ap_sig_ioackin_m_axi_in_r_ARREADY");
    sc_trace(mVcdFile, i_cast1_fu_88_p1, "i_cast1_fu_88_p1");
    sc_trace(mVcdFile, i_cast1_reg_110, "i_cast1_reg_110");
    sc_trace(mVcdFile, ap_block_state8, "ap_block_state8");
    sc_trace(mVcdFile, i_14_fu_98_p2, "i_14_fu_98_p2");
    sc_trace(mVcdFile, i_14_reg_118, "i_14_reg_118");
    sc_trace(mVcdFile, in_addr_read_reg_123, "in_addr_read_reg_123");
    sc_trace(mVcdFile, i_reg_66, "i_reg_66");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, c3_b_i9_cast1_fu_77_p1, "c3_b_i9_cast1_fu_77_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_in_r_ARREADY, "ap_reg_ioackin_m_axi_in_r_ARREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

copy_b3::~copy_b3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void copy_b3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_in_r_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_in_r_ARREADY.read()))) {
                ap_reg_ioackin_m_axi_in_r_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_in_r_ARREADY.read()))) {
                ap_reg_ioackin_m_axi_in_r_ARREADY = ap_const_logic_1;
            }
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_reg_66 = i_14_reg_118.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_reg_66 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())))) {
        i_14_reg_118 = i_14_fu_98_p2.read();
        i_cast1_reg_110 = i_cast1_fu_88_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())))) {
        in_addr_read_reg_123 = m_axi_in_r_RDATA.read();
    }
}

void copy_b3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void copy_b3::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void copy_b3::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void copy_b3::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void copy_b3::thread_ap_block_state8() {
    ap_block_state8 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read()));
}

void copy_b3::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())) && 
          esl_seteq<1,1,1>(exitcond_fu_92_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void copy_b3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void copy_b3::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())) && 
         esl_seteq<1,1,1>(exitcond_fu_92_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void copy_b3::thread_ap_sig_ioackin_m_axi_in_r_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_in_r_ARREADY.read())) {
        ap_sig_ioackin_m_axi_in_r_ARREADY = m_axi_in_r_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_in_r_ARREADY = ap_const_logic_1;
    }
}

void copy_b3::thread_c3_b_i9_cast1_fu_77_p1() {
    c3_b_i9_cast1_fu_77_p1 = esl_zext<32,30>(c3_b_i9.read());
}

void copy_b3::thread_exitcond_fu_92_p2() {
    exitcond_fu_92_p2 = (!i_reg_66.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_66.read() == ap_const_lv5_10);
}

void copy_b3::thread_i_14_fu_98_p2() {
    i_14_fu_98_p2 = (!i_reg_66.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_66.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void copy_b3::thread_i_cast1_fu_88_p1() {
    i_cast1_fu_88_p1 = esl_zext<32,5>(i_reg_66.read());
}

void copy_b3::thread_in_r_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        in_r_blk_n_AR = m_axi_in_r_ARREADY.read();
    } else {
        in_r_blk_n_AR = ap_const_logic_1;
    }
}

void copy_b3::thread_in_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()))) {
        in_r_blk_n_R = m_axi_in_r_RVALID.read();
    } else {
        in_r_blk_n_R = ap_const_logic_1;
    }
}

void copy_b3::thread_m_axi_in_r_ARADDR() {
    m_axi_in_r_ARADDR = c3_b_i9_cast1_fu_77_p1.read();
}

void copy_b3::thread_m_axi_in_r_ARBURST() {
    m_axi_in_r_ARBURST = ap_const_lv2_0;
}

void copy_b3::thread_m_axi_in_r_ARCACHE() {
    m_axi_in_r_ARCACHE = ap_const_lv4_0;
}

void copy_b3::thread_m_axi_in_r_ARID() {
    m_axi_in_r_ARID = ap_const_lv1_0;
}

void copy_b3::thread_m_axi_in_r_ARLEN() {
    m_axi_in_r_ARLEN = ap_const_lv32_10;
}

void copy_b3::thread_m_axi_in_r_ARLOCK() {
    m_axi_in_r_ARLOCK = ap_const_lv2_0;
}

void copy_b3::thread_m_axi_in_r_ARPROT() {
    m_axi_in_r_ARPROT = ap_const_lv3_0;
}

void copy_b3::thread_m_axi_in_r_ARQOS() {
    m_axi_in_r_ARQOS = ap_const_lv4_0;
}

void copy_b3::thread_m_axi_in_r_ARREGION() {
    m_axi_in_r_ARREGION = ap_const_lv4_0;
}

void copy_b3::thread_m_axi_in_r_ARSIZE() {
    m_axi_in_r_ARSIZE = ap_const_lv3_0;
}

void copy_b3::thread_m_axi_in_r_ARUSER() {
    m_axi_in_r_ARUSER = ap_const_lv1_0;
}

void copy_b3::thread_m_axi_in_r_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_in_r_ARREADY.read()))) {
        m_axi_in_r_ARVALID = ap_const_logic_1;
    } else {
        m_axi_in_r_ARVALID = ap_const_logic_0;
    }
}

void copy_b3::thread_m_axi_in_r_AWADDR() {
    m_axi_in_r_AWADDR = ap_const_lv32_0;
}

void copy_b3::thread_m_axi_in_r_AWBURST() {
    m_axi_in_r_AWBURST = ap_const_lv2_0;
}

void copy_b3::thread_m_axi_in_r_AWCACHE() {
    m_axi_in_r_AWCACHE = ap_const_lv4_0;
}

void copy_b3::thread_m_axi_in_r_AWID() {
    m_axi_in_r_AWID = ap_const_lv1_0;
}

void copy_b3::thread_m_axi_in_r_AWLEN() {
    m_axi_in_r_AWLEN = ap_const_lv32_0;
}

void copy_b3::thread_m_axi_in_r_AWLOCK() {
    m_axi_in_r_AWLOCK = ap_const_lv2_0;
}

void copy_b3::thread_m_axi_in_r_AWPROT() {
    m_axi_in_r_AWPROT = ap_const_lv3_0;
}

void copy_b3::thread_m_axi_in_r_AWQOS() {
    m_axi_in_r_AWQOS = ap_const_lv4_0;
}

void copy_b3::thread_m_axi_in_r_AWREGION() {
    m_axi_in_r_AWREGION = ap_const_lv4_0;
}

void copy_b3::thread_m_axi_in_r_AWSIZE() {
    m_axi_in_r_AWSIZE = ap_const_lv3_0;
}

void copy_b3::thread_m_axi_in_r_AWUSER() {
    m_axi_in_r_AWUSER = ap_const_lv1_0;
}

void copy_b3::thread_m_axi_in_r_AWVALID() {
    m_axi_in_r_AWVALID = ap_const_logic_0;
}

void copy_b3::thread_m_axi_in_r_BREADY() {
    m_axi_in_r_BREADY = ap_const_logic_0;
}

void copy_b3::thread_m_axi_in_r_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())))) {
        m_axi_in_r_RREADY = ap_const_logic_1;
    } else {
        m_axi_in_r_RREADY = ap_const_logic_0;
    }
}

void copy_b3::thread_m_axi_in_r_WDATA() {
    m_axi_in_r_WDATA = ap_const_lv32_0;
}

void copy_b3::thread_m_axi_in_r_WID() {
    m_axi_in_r_WID = ap_const_lv1_0;
}

void copy_b3::thread_m_axi_in_r_WLAST() {
    m_axi_in_r_WLAST = ap_const_logic_0;
}

void copy_b3::thread_m_axi_in_r_WSTRB() {
    m_axi_in_r_WSTRB = ap_const_lv4_0;
}

void copy_b3::thread_m_axi_in_r_WUSER() {
    m_axi_in_r_WUSER = ap_const_lv1_0;
}

void copy_b3::thread_m_axi_in_r_WVALID() {
    m_axi_in_r_WVALID = ap_const_logic_0;
}

void copy_b3::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<4>) (i_cast1_reg_110.read());
}

void copy_b3::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void copy_b3::thread_out_r_d0() {
    out_r_d0 = in_addr_read_reg_123.read();
}

void copy_b3::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void copy_b3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_in_r_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())) && esl_seteq<1,1,1>(exitcond_fu_92_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_92_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

}

