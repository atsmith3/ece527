// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "copy_w1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic copy_w1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic copy_w1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> copy_w1::ap_ST_fsm_state1 = "1";
const sc_lv<12> copy_w1::ap_ST_fsm_state2 = "10";
const sc_lv<12> copy_w1::ap_ST_fsm_state3 = "100";
const sc_lv<12> copy_w1::ap_ST_fsm_state4 = "1000";
const sc_lv<12> copy_w1::ap_ST_fsm_state5 = "10000";
const sc_lv<12> copy_w1::ap_ST_fsm_state6 = "100000";
const sc_lv<12> copy_w1::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> copy_w1::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> copy_w1::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> copy_w1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> copy_w1::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> copy_w1::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> copy_w1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> copy_w1::ap_const_lv1_0 = "0";
const sc_lv<3> copy_w1::ap_const_lv3_0 = "000";
const sc_lv<2> copy_w1::ap_const_lv2_0 = "00";
const sc_lv<4> copy_w1::ap_const_lv4_0 = "0000";
const sc_lv<32> copy_w1::ap_const_lv32_3 = "11";
const sc_lv<32> copy_w1::ap_const_lv32_A = "1010";
const sc_lv<32> copy_w1::ap_const_lv32_1 = "1";
const sc_lv<32> copy_w1::ap_const_lv32_2 = "10";
const sc_lv<1> copy_w1::ap_const_lv1_1 = "1";
const sc_lv<32> copy_w1::ap_const_lv32_B = "1011";
const sc_lv<32> copy_w1::ap_const_lv32_9 = "1001";
const sc_lv<32> copy_w1::ap_const_lv32_5 = "101";
const sc_lv<3> copy_w1::ap_const_lv3_6 = "110";
const sc_lv<3> copy_w1::ap_const_lv3_1 = "1";
const sc_lv<3> copy_w1::ap_const_lv3_5 = "101";
const bool copy_w1::ap_const_boolean_1 = true;

copy_w1::copy_w1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state11);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( exitcond_fu_214_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_138_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_138_p2 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_in_r_ARREADY);
    sensitive << ( m_axi_in_r_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_in_r_ARREADY );

    SC_METHOD(thread_c1_w_i3_cast_fu_112_p1);
    sensitive << ( c1_w_i3 );

    SC_METHOD(thread_exitcond1_fu_181_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_exitcond2_fu_138_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_exitcond_fu_214_p2);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_fu_214_p2 );
    sensitive << ( k_reg_101 );

    SC_METHOD(thread_i_11_fu_144_p2);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_i_cast3_cast_fu_116_p1);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_in_r_blk_n_AR);
    sensitive << ( m_axi_in_r_ARREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_r_blk_n_R);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_fu_214_p2 );

    SC_METHOD(thread_j_9_fu_187_p2);
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_j_cast2_cast_fu_150_p1);
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_k_6_fu_220_p2);
    sensitive << ( k_reg_101 );

    SC_METHOD(thread_k_cast1_fu_204_p1);
    sensitive << ( k_reg_101 );

    SC_METHOD(thread_m_axi_in_r_ARADDR);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_140_reg_257 );
    sensitive << ( ap_reg_ioackin_m_axi_in_r_ARREADY );

    SC_METHOD(thread_m_axi_in_r_ARBURST);

    SC_METHOD(thread_m_axi_in_r_ARCACHE);

    SC_METHOD(thread_m_axi_in_r_ARID);

    SC_METHOD(thread_m_axi_in_r_ARLEN);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_in_r_ARREADY );

    SC_METHOD(thread_m_axi_in_r_ARLOCK);

    SC_METHOD(thread_m_axi_in_r_ARPROT);

    SC_METHOD(thread_m_axi_in_r_ARQOS);

    SC_METHOD(thread_m_axi_in_r_ARREGION);

    SC_METHOD(thread_m_axi_in_r_ARSIZE);

    SC_METHOD(thread_m_axi_in_r_ARUSER);

    SC_METHOD(thread_m_axi_in_r_ARVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_in_r_ARREADY );

    SC_METHOD(thread_m_axi_in_r_AWADDR);

    SC_METHOD(thread_m_axi_in_r_AWBURST);

    SC_METHOD(thread_m_axi_in_r_AWCACHE);

    SC_METHOD(thread_m_axi_in_r_AWID);

    SC_METHOD(thread_m_axi_in_r_AWLEN);

    SC_METHOD(thread_m_axi_in_r_AWLOCK);

    SC_METHOD(thread_m_axi_in_r_AWPROT);

    SC_METHOD(thread_m_axi_in_r_AWQOS);

    SC_METHOD(thread_m_axi_in_r_AWREGION);

    SC_METHOD(thread_m_axi_in_r_AWSIZE);

    SC_METHOD(thread_m_axi_in_r_AWUSER);

    SC_METHOD(thread_m_axi_in_r_AWVALID);

    SC_METHOD(thread_m_axi_in_r_BREADY);

    SC_METHOD(thread_m_axi_in_r_RREADY);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_fu_214_p2 );

    SC_METHOD(thread_m_axi_in_r_WDATA);

    SC_METHOD(thread_m_axi_in_r_WID);

    SC_METHOD(thread_m_axi_in_r_WLAST);

    SC_METHOD(thread_m_axi_in_r_WSTRB);

    SC_METHOD(thread_m_axi_in_r_WUSER);

    SC_METHOD(thread_m_axi_in_r_WVALID);

    SC_METHOD(thread_out_0_address0);
    sensitive << ( out_0_addr_reg_268 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_out_0_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_out_0_d0);
    sensitive << ( in_addr_read_reg_281 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_out_0_we0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_p_shl1_fu_171_p1);
    sensitive << ( tmp_137_fu_163_p3 );

    SC_METHOD(thread_p_shl_cast_fu_128_p1);
    sensitive << ( tmp_fu_120_p3 );

    SC_METHOD(thread_tmp_137_fu_163_p3);
    sensitive << ( tmp_138_fu_154_p2 );

    SC_METHOD(thread_tmp_138_fu_154_p2);
    sensitive << ( tmp_s_reg_231 );
    sensitive << ( j_cast2_cast_fu_150_p1 );

    SC_METHOD(thread_tmp_139_fu_175_p2);
    sensitive << ( tmp_143_cast_fu_159_p1 );
    sensitive << ( p_shl1_fu_171_p1 );

    SC_METHOD(thread_tmp_140_fu_193_p2);
    sensitive << ( c1_w_i3_cast_reg_226 );
    sensitive << ( tmp_139_fu_175_p2 );

    SC_METHOD(thread_tmp_141_fu_208_p2);
    sensitive << ( tmp_139_reg_244 );
    sensitive << ( k_cast1_fu_204_p1 );

    SC_METHOD(thread_tmp_143_cast_fu_159_p1);
    sensitive << ( tmp_138_fu_154_p2 );

    SC_METHOD(thread_tmp_fu_120_p3);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_tmp_s_fu_132_p2);
    sensitive << ( i_cast3_cast_fu_116_p1 );
    sensitive << ( p_shl_cast_fu_128_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond_fu_214_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_181_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_in_r_ARREADY );
    sensitive << ( exitcond2_fu_138_p2 );

    ap_CS_fsm = "000000000001";
    ap_reg_ioackin_m_axi_in_r_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "copy_w1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_in_r_AWVALID, "(port)m_axi_in_r_AWVALID");
    sc_trace(mVcdFile, m_axi_in_r_AWREADY, "(port)m_axi_in_r_AWREADY");
    sc_trace(mVcdFile, m_axi_in_r_AWADDR, "(port)m_axi_in_r_AWADDR");
    sc_trace(mVcdFile, m_axi_in_r_AWID, "(port)m_axi_in_r_AWID");
    sc_trace(mVcdFile, m_axi_in_r_AWLEN, "(port)m_axi_in_r_AWLEN");
    sc_trace(mVcdFile, m_axi_in_r_AWSIZE, "(port)m_axi_in_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_in_r_AWBURST, "(port)m_axi_in_r_AWBURST");
    sc_trace(mVcdFile, m_axi_in_r_AWLOCK, "(port)m_axi_in_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_in_r_AWCACHE, "(port)m_axi_in_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_in_r_AWPROT, "(port)m_axi_in_r_AWPROT");
    sc_trace(mVcdFile, m_axi_in_r_AWQOS, "(port)m_axi_in_r_AWQOS");
    sc_trace(mVcdFile, m_axi_in_r_AWREGION, "(port)m_axi_in_r_AWREGION");
    sc_trace(mVcdFile, m_axi_in_r_AWUSER, "(port)m_axi_in_r_AWUSER");
    sc_trace(mVcdFile, m_axi_in_r_WVALID, "(port)m_axi_in_r_WVALID");
    sc_trace(mVcdFile, m_axi_in_r_WREADY, "(port)m_axi_in_r_WREADY");
    sc_trace(mVcdFile, m_axi_in_r_WDATA, "(port)m_axi_in_r_WDATA");
    sc_trace(mVcdFile, m_axi_in_r_WSTRB, "(port)m_axi_in_r_WSTRB");
    sc_trace(mVcdFile, m_axi_in_r_WLAST, "(port)m_axi_in_r_WLAST");
    sc_trace(mVcdFile, m_axi_in_r_WID, "(port)m_axi_in_r_WID");
    sc_trace(mVcdFile, m_axi_in_r_WUSER, "(port)m_axi_in_r_WUSER");
    sc_trace(mVcdFile, m_axi_in_r_ARVALID, "(port)m_axi_in_r_ARVALID");
    sc_trace(mVcdFile, m_axi_in_r_ARREADY, "(port)m_axi_in_r_ARREADY");
    sc_trace(mVcdFile, m_axi_in_r_ARADDR, "(port)m_axi_in_r_ARADDR");
    sc_trace(mVcdFile, m_axi_in_r_ARID, "(port)m_axi_in_r_ARID");
    sc_trace(mVcdFile, m_axi_in_r_ARLEN, "(port)m_axi_in_r_ARLEN");
    sc_trace(mVcdFile, m_axi_in_r_ARSIZE, "(port)m_axi_in_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_in_r_ARBURST, "(port)m_axi_in_r_ARBURST");
    sc_trace(mVcdFile, m_axi_in_r_ARLOCK, "(port)m_axi_in_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_in_r_ARCACHE, "(port)m_axi_in_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_in_r_ARPROT, "(port)m_axi_in_r_ARPROT");
    sc_trace(mVcdFile, m_axi_in_r_ARQOS, "(port)m_axi_in_r_ARQOS");
    sc_trace(mVcdFile, m_axi_in_r_ARREGION, "(port)m_axi_in_r_ARREGION");
    sc_trace(mVcdFile, m_axi_in_r_ARUSER, "(port)m_axi_in_r_ARUSER");
    sc_trace(mVcdFile, m_axi_in_r_RVALID, "(port)m_axi_in_r_RVALID");
    sc_trace(mVcdFile, m_axi_in_r_RREADY, "(port)m_axi_in_r_RREADY");
    sc_trace(mVcdFile, m_axi_in_r_RDATA, "(port)m_axi_in_r_RDATA");
    sc_trace(mVcdFile, m_axi_in_r_RLAST, "(port)m_axi_in_r_RLAST");
    sc_trace(mVcdFile, m_axi_in_r_RID, "(port)m_axi_in_r_RID");
    sc_trace(mVcdFile, m_axi_in_r_RUSER, "(port)m_axi_in_r_RUSER");
    sc_trace(mVcdFile, m_axi_in_r_RRESP, "(port)m_axi_in_r_RRESP");
    sc_trace(mVcdFile, m_axi_in_r_BVALID, "(port)m_axi_in_r_BVALID");
    sc_trace(mVcdFile, m_axi_in_r_BREADY, "(port)m_axi_in_r_BREADY");
    sc_trace(mVcdFile, m_axi_in_r_BRESP, "(port)m_axi_in_r_BRESP");
    sc_trace(mVcdFile, m_axi_in_r_BID, "(port)m_axi_in_r_BID");
    sc_trace(mVcdFile, m_axi_in_r_BUSER, "(port)m_axi_in_r_BUSER");
    sc_trace(mVcdFile, c1_w_i3, "(port)c1_w_i3");
    sc_trace(mVcdFile, out_0_address0, "(port)out_0_address0");
    sc_trace(mVcdFile, out_0_ce0, "(port)out_0_ce0");
    sc_trace(mVcdFile, out_0_we0, "(port)out_0_we0");
    sc_trace(mVcdFile, out_0_d0, "(port)out_0_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_r_blk_n_AR, "in_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, in_r_blk_n_R, "in_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, exitcond_fu_214_p2, "exitcond_fu_214_p2");
    sc_trace(mVcdFile, c1_w_i3_cast_fu_112_p1, "c1_w_i3_cast_fu_112_p1");
    sc_trace(mVcdFile, c1_w_i3_cast_reg_226, "c1_w_i3_cast_reg_226");
    sc_trace(mVcdFile, tmp_s_fu_132_p2, "tmp_s_fu_132_p2");
    sc_trace(mVcdFile, tmp_s_reg_231, "tmp_s_reg_231");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_11_fu_144_p2, "i_11_fu_144_p2");
    sc_trace(mVcdFile, i_11_reg_239, "i_11_reg_239");
    sc_trace(mVcdFile, tmp_139_fu_175_p2, "tmp_139_fu_175_p2");
    sc_trace(mVcdFile, tmp_139_reg_244, "tmp_139_reg_244");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_9_fu_187_p2, "j_9_fu_187_p2");
    sc_trace(mVcdFile, j_9_reg_252, "j_9_reg_252");
    sc_trace(mVcdFile, tmp_140_fu_193_p2, "tmp_140_fu_193_p2");
    sc_trace(mVcdFile, tmp_140_reg_257, "tmp_140_reg_257");
    sc_trace(mVcdFile, exitcond1_fu_181_p2, "exitcond1_fu_181_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_in_r_ARREADY, "ap_sig_ioackin_m_axi_in_r_ARREADY");
    sc_trace(mVcdFile, out_0_addr_reg_268, "out_0_addr_reg_268");
    sc_trace(mVcdFile, ap_block_state11, "ap_block_state11");
    sc_trace(mVcdFile, k_6_fu_220_p2, "k_6_fu_220_p2");
    sc_trace(mVcdFile, k_6_reg_276, "k_6_reg_276");
    sc_trace(mVcdFile, in_addr_read_reg_281, "in_addr_read_reg_281");
    sc_trace(mVcdFile, i_reg_79, "i_reg_79");
    sc_trace(mVcdFile, j_reg_90, "j_reg_90");
    sc_trace(mVcdFile, exitcond2_fu_138_p2, "exitcond2_fu_138_p2");
    sc_trace(mVcdFile, k_reg_101, "k_reg_101");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_141_fu_208_p2, "tmp_141_fu_208_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_in_r_ARREADY, "ap_reg_ioackin_m_axi_in_r_ARREADY");
    sc_trace(mVcdFile, tmp_fu_120_p3, "tmp_fu_120_p3");
    sc_trace(mVcdFile, i_cast3_cast_fu_116_p1, "i_cast3_cast_fu_116_p1");
    sc_trace(mVcdFile, p_shl_cast_fu_128_p1, "p_shl_cast_fu_128_p1");
    sc_trace(mVcdFile, j_cast2_cast_fu_150_p1, "j_cast2_cast_fu_150_p1");
    sc_trace(mVcdFile, tmp_138_fu_154_p2, "tmp_138_fu_154_p2");
    sc_trace(mVcdFile, tmp_137_fu_163_p3, "tmp_137_fu_163_p3");
    sc_trace(mVcdFile, tmp_143_cast_fu_159_p1, "tmp_143_cast_fu_159_p1");
    sc_trace(mVcdFile, p_shl1_fu_171_p1, "p_shl1_fu_171_p1");
    sc_trace(mVcdFile, k_cast1_fu_204_p1, "k_cast1_fu_204_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

copy_w1::~copy_w1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void copy_w1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_in_r_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_in_r_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_in_r_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_in_r_ARREADY.read())) {
                ap_reg_ioackin_m_axi_in_r_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_181_p2.read(), ap_const_lv1_1))) {
        i_reg_79 = i_11_reg_239.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_79 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_138_p2.read()))) {
        j_reg_90 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())) && 
                esl_seteq<1,1,1>(exitcond_fu_214_p2.read(), ap_const_lv1_1))) {
        j_reg_90 = j_9_reg_252.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        k_reg_101 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        k_reg_101 = k_6_reg_276.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c1_w_i3_cast_reg_226 = c1_w_i3_cast_fu_112_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_11_reg_239 = i_11_fu_144_p2.read();
        tmp_s_reg_231 = tmp_s_fu_132_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())))) {
        in_addr_read_reg_281 = m_axi_in_r_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_9_reg_252 = j_9_fu_187_p2.read();
        tmp_139_reg_244 = tmp_139_fu_175_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())))) {
        k_6_reg_276 = k_6_fu_220_p2.read();
        out_0_addr_reg_268 =  (sc_lv<8>) (tmp_141_fu_208_p2.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_181_p2.read()))) {
        tmp_140_reg_257 = tmp_140_fu_193_p2.read();
    }
}

void copy_w1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void copy_w1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void copy_w1::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void copy_w1::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void copy_w1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void copy_w1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void copy_w1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void copy_w1::thread_ap_block_state11() {
    ap_block_state11 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read()));
}

void copy_w1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_138_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void copy_w1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void copy_w1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_138_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void copy_w1::thread_ap_sig_ioackin_m_axi_in_r_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_in_r_ARREADY.read())) {
        ap_sig_ioackin_m_axi_in_r_ARREADY = m_axi_in_r_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_in_r_ARREADY = ap_const_logic_1;
    }
}

void copy_w1::thread_c1_w_i3_cast_fu_112_p1() {
    c1_w_i3_cast_fu_112_p1 = esl_zext<32,30>(c1_w_i3.read());
}

void copy_w1::thread_exitcond1_fu_181_p2() {
    exitcond1_fu_181_p2 = (!j_reg_90.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_90.read() == ap_const_lv3_5);
}

void copy_w1::thread_exitcond2_fu_138_p2() {
    exitcond2_fu_138_p2 = (!i_reg_79.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_79.read() == ap_const_lv3_6);
}

void copy_w1::thread_exitcond_fu_214_p2() {
    exitcond_fu_214_p2 = (!k_reg_101.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_101.read() == ap_const_lv3_5);
}

void copy_w1::thread_i_11_fu_144_p2() {
    i_11_fu_144_p2 = (!i_reg_79.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_79.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void copy_w1::thread_i_cast3_cast_fu_116_p1() {
    i_cast3_cast_fu_116_p1 = esl_zext<6,3>(i_reg_79.read());
}

void copy_w1::thread_in_r_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_r_blk_n_AR = m_axi_in_r_ARREADY.read();
    } else {
        in_r_blk_n_AR = ap_const_logic_1;
    }
}

void copy_w1::thread_in_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()))) {
        in_r_blk_n_R = m_axi_in_r_RVALID.read();
    } else {
        in_r_blk_n_R = ap_const_logic_1;
    }
}

void copy_w1::thread_j_9_fu_187_p2() {
    j_9_fu_187_p2 = (!j_reg_90.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_90.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void copy_w1::thread_j_cast2_cast_fu_150_p1() {
    j_cast2_cast_fu_150_p1 = esl_zext<6,3>(j_reg_90.read());
}

void copy_w1::thread_k_6_fu_220_p2() {
    k_6_fu_220_p2 = (!k_reg_101.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_reg_101.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void copy_w1::thread_k_cast1_fu_204_p1() {
    k_cast1_fu_204_p1 = esl_zext<32,3>(k_reg_101.read());
}

void copy_w1::thread_m_axi_in_r_ARADDR() {
    m_axi_in_r_ARADDR = tmp_140_reg_257.read();
}

void copy_w1::thread_m_axi_in_r_ARBURST() {
    m_axi_in_r_ARBURST = ap_const_lv2_0;
}

void copy_w1::thread_m_axi_in_r_ARCACHE() {
    m_axi_in_r_ARCACHE = ap_const_lv4_0;
}

void copy_w1::thread_m_axi_in_r_ARID() {
    m_axi_in_r_ARID = ap_const_lv1_0;
}

void copy_w1::thread_m_axi_in_r_ARLEN() {
    m_axi_in_r_ARLEN = ap_const_lv32_5;
}

void copy_w1::thread_m_axi_in_r_ARLOCK() {
    m_axi_in_r_ARLOCK = ap_const_lv2_0;
}

void copy_w1::thread_m_axi_in_r_ARPROT() {
    m_axi_in_r_ARPROT = ap_const_lv3_0;
}

void copy_w1::thread_m_axi_in_r_ARQOS() {
    m_axi_in_r_ARQOS = ap_const_lv4_0;
}

void copy_w1::thread_m_axi_in_r_ARREGION() {
    m_axi_in_r_ARREGION = ap_const_lv4_0;
}

void copy_w1::thread_m_axi_in_r_ARSIZE() {
    m_axi_in_r_ARSIZE = ap_const_lv3_0;
}

void copy_w1::thread_m_axi_in_r_ARUSER() {
    m_axi_in_r_ARUSER = ap_const_lv1_0;
}

void copy_w1::thread_m_axi_in_r_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_in_r_ARREADY.read()))) {
        m_axi_in_r_ARVALID = ap_const_logic_1;
    } else {
        m_axi_in_r_ARVALID = ap_const_logic_0;
    }
}

void copy_w1::thread_m_axi_in_r_AWADDR() {
    m_axi_in_r_AWADDR = ap_const_lv32_0;
}

void copy_w1::thread_m_axi_in_r_AWBURST() {
    m_axi_in_r_AWBURST = ap_const_lv2_0;
}

void copy_w1::thread_m_axi_in_r_AWCACHE() {
    m_axi_in_r_AWCACHE = ap_const_lv4_0;
}

void copy_w1::thread_m_axi_in_r_AWID() {
    m_axi_in_r_AWID = ap_const_lv1_0;
}

void copy_w1::thread_m_axi_in_r_AWLEN() {
    m_axi_in_r_AWLEN = ap_const_lv32_0;
}

void copy_w1::thread_m_axi_in_r_AWLOCK() {
    m_axi_in_r_AWLOCK = ap_const_lv2_0;
}

void copy_w1::thread_m_axi_in_r_AWPROT() {
    m_axi_in_r_AWPROT = ap_const_lv3_0;
}

void copy_w1::thread_m_axi_in_r_AWQOS() {
    m_axi_in_r_AWQOS = ap_const_lv4_0;
}

void copy_w1::thread_m_axi_in_r_AWREGION() {
    m_axi_in_r_AWREGION = ap_const_lv4_0;
}

void copy_w1::thread_m_axi_in_r_AWSIZE() {
    m_axi_in_r_AWSIZE = ap_const_lv3_0;
}

void copy_w1::thread_m_axi_in_r_AWUSER() {
    m_axi_in_r_AWUSER = ap_const_lv1_0;
}

void copy_w1::thread_m_axi_in_r_AWVALID() {
    m_axi_in_r_AWVALID = ap_const_logic_0;
}

void copy_w1::thread_m_axi_in_r_BREADY() {
    m_axi_in_r_BREADY = ap_const_logic_0;
}

void copy_w1::thread_m_axi_in_r_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())))) {
        m_axi_in_r_RREADY = ap_const_logic_1;
    } else {
        m_axi_in_r_RREADY = ap_const_logic_0;
    }
}

void copy_w1::thread_m_axi_in_r_WDATA() {
    m_axi_in_r_WDATA = ap_const_lv32_0;
}

void copy_w1::thread_m_axi_in_r_WID() {
    m_axi_in_r_WID = ap_const_lv1_0;
}

void copy_w1::thread_m_axi_in_r_WLAST() {
    m_axi_in_r_WLAST = ap_const_logic_0;
}

void copy_w1::thread_m_axi_in_r_WSTRB() {
    m_axi_in_r_WSTRB = ap_const_lv4_0;
}

void copy_w1::thread_m_axi_in_r_WUSER() {
    m_axi_in_r_WUSER = ap_const_lv1_0;
}

void copy_w1::thread_m_axi_in_r_WVALID() {
    m_axi_in_r_WVALID = ap_const_logic_0;
}

void copy_w1::thread_out_0_address0() {
    out_0_address0 = out_0_addr_reg_268.read();
}

void copy_w1::thread_out_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        out_0_ce0 = ap_const_logic_1;
    } else {
        out_0_ce0 = ap_const_logic_0;
    }
}

void copy_w1::thread_out_0_d0() {
    out_0_d0 = in_addr_read_reg_281.read();
}

void copy_w1::thread_out_0_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        out_0_we0 = ap_const_logic_1;
    } else {
        out_0_we0 = ap_const_logic_0;
    }
}

void copy_w1::thread_p_shl1_fu_171_p1() {
    p_shl1_fu_171_p1 = esl_zext<32,8>(tmp_137_fu_163_p3.read());
}

void copy_w1::thread_p_shl_cast_fu_128_p1() {
    p_shl_cast_fu_128_p1 = esl_zext<6,5>(tmp_fu_120_p3.read());
}

void copy_w1::thread_tmp_137_fu_163_p3() {
    tmp_137_fu_163_p3 = esl_concat<6,2>(tmp_138_fu_154_p2.read(), ap_const_lv2_0);
}

void copy_w1::thread_tmp_138_fu_154_p2() {
    tmp_138_fu_154_p2 = (!tmp_s_reg_231.read().is_01() || !j_cast2_cast_fu_150_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_s_reg_231.read()) + sc_biguint<6>(j_cast2_cast_fu_150_p1.read()));
}

void copy_w1::thread_tmp_139_fu_175_p2() {
    tmp_139_fu_175_p2 = (!tmp_143_cast_fu_159_p1.read().is_01() || !p_shl1_fu_171_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_143_cast_fu_159_p1.read()) + sc_biguint<32>(p_shl1_fu_171_p1.read()));
}

void copy_w1::thread_tmp_140_fu_193_p2() {
    tmp_140_fu_193_p2 = (!tmp_139_fu_175_p2.read().is_01() || !c1_w_i3_cast_reg_226.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_139_fu_175_p2.read()) + sc_biguint<32>(c1_w_i3_cast_reg_226.read()));
}

void copy_w1::thread_tmp_141_fu_208_p2() {
    tmp_141_fu_208_p2 = (!k_cast1_fu_204_p1.read().is_01() || !tmp_139_reg_244.read().is_01())? sc_lv<32>(): (sc_biguint<32>(k_cast1_fu_204_p1.read()) + sc_biguint<32>(tmp_139_reg_244.read()));
}

void copy_w1::thread_tmp_143_cast_fu_159_p1() {
    tmp_143_cast_fu_159_p1 = esl_zext<32,6>(tmp_138_fu_154_p2.read());
}

void copy_w1::thread_tmp_fu_120_p3() {
    tmp_fu_120_p3 = esl_concat<3,2>(i_reg_79.read(), ap_const_lv2_0);
}

void copy_w1::thread_tmp_s_fu_132_p2() {
    tmp_s_fu_132_p2 = (!i_cast3_cast_fu_116_p1.read().is_01() || !p_shl_cast_fu_128_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(i_cast3_cast_fu_116_p1.read()) + sc_biguint<6>(p_shl_cast_fu_128_p1.read()));
}

void copy_w1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_138_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_181_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_in_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())) && esl_seteq<1,1,1>(exitcond_fu_214_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_214_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_in_r_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

}

