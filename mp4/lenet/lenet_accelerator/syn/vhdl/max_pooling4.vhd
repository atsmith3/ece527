-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c3_o_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    c3_o_2_ce0 : OUT STD_LOGIC;
    c3_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pooling4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_4_fu_179_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_500 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_16_cast_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_cast_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_1_reg_513 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_252_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_reg_518 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal h_1_fu_264_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_1_reg_526 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_cast_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_addr_reg_541 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal w_1_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_549 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_cast_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_369_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_reg_564 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_1_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_o_2_load_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_10_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal max_value_2_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal c_reg_81 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_92 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_103 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i6_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal j5_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_1_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_167_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_cast3_cast_fu_163_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_185_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_197_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_205_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_193_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_209_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_cast2_cast_fu_231_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_cast_fu_240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_244_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_270_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_282_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_cast1_cast_fu_292_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_296_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_318_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_330_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_345_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_fu_357_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_361_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_349_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_380_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_384_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_value_1_to_int_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_o_2_load_to_int_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_415_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_425_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_442_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component lenet_wrapper_fcmdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_wrapper_fcmdEe_x_U36 : component lenet_wrapper_fcmdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => max_value_1_reg_146,
        din1 => c3_o_2_load_reg_590,
        opcode => ap_const_lv5_2,
        dout => tmp_10_fu_158_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_258_p2 = ap_const_lv1_1))) then 
                c_reg_81 <= c_1_reg_513;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_81 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_219_p2))) then 
                h_reg_92 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_306_p2 = ap_const_lv1_1))) then 
                h_reg_92 <= h_1_reg_526;
            end if; 
        end if;
    end process;

    i6_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_s_fu_394_p2))) then 
                i6_reg_114 <= i_1_fu_405_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_306_p2))) then 
                i6_reg_114 <= i_cast_reg_531;
            end if; 
        end if;
    end process;

    j5_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_9_fu_375_p2))) then 
                j5_reg_137 <= j_cast_reg_554;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j5_reg_137 <= j_1_reg_580;
            end if; 
        end if;
    end process;

    max_value_1_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_9_fu_375_p2))) then 
                max_value_1_reg_146 <= max_value_reg_124;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                max_value_1_reg_146 <= max_value_2_fu_493_p3;
            end if; 
        end if;
    end process;

    max_value_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_s_fu_394_p2))) then 
                max_value_reg_124 <= max_value_1_reg_146;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_306_p2))) then 
                max_value_reg_124 <= ap_const_lv32_D368D4A5;
            end if; 
        end if;
    end process;

    w_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_258_p2 = ap_const_lv1_0))) then 
                w_reg_103 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_9_fu_375_p2))) then 
                w_reg_103 <= w_1_reg_549;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c3_o_2_load_reg_590 <= c3_o_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_1_reg_513 <= c_1_fu_225_p2;
                    tmp_16_cast_reg_505(8 downto 1) <= tmp_16_cast_fu_215_p1(8 downto 1);
                tmp_4_reg_500 <= tmp_4_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_1_reg_526 <= h_1_fu_264_p2;
                tmp_16_reg_518 <= tmp_16_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_258_p2 = ap_const_lv1_0))) then
                    i_cast_reg_531(3 downto 1) <= i_cast_fu_278_p1(3 downto 1);
                    tmp_7_cast_reg_536(3 downto 1) <= tmp_7_cast_fu_288_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_s_fu_394_p2 = ap_const_lv1_1))) then
                j_1_reg_580 <= j_1_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_306_p2))) then
                    j_cast_reg_554(3 downto 1) <= j_cast_fu_326_p1(3 downto 1);
                    tmp_cast_reg_559(3 downto 1) <= tmp_cast_fu_336_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_addr_reg_541 <= tmp_20_cast_fu_301_p1(9 - 1 downto 0);
                w_1_reg_549 <= w_1_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_10_reg_597 <= tmp_10_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    tmp_21_reg_564(11 downto 1) <= tmp_21_fu_369_p2(11 downto 1);
            end if;
        end if;
    end process;
    tmp_16_cast_reg_505(0) <= '0';
    tmp_16_cast_reg_505(31 downto 9) <= "00000000000000000000000";
    i_cast_reg_531(0) <= '0';
    i_cast_reg_531(31 downto 4) <= "0000000000000000000000000000";
    tmp_7_cast_reg_536(0) <= '0';
    tmp_7_cast_reg_536(31 downto 4) <= "0000000000000000000000000000";
    j_cast_reg_554(0) <= '0';
    j_cast_reg_554(31 downto 4) <= "0000000000000000000000000000";
    tmp_cast_reg_559(0) <= '0';
    tmp_cast_reg_559(31 downto 4) <= "0000000000000000000000000000";
    tmp_21_reg_564(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond1_fu_258_p2, ap_CS_fsm_state4, exitcond_fu_306_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_s_fu_394_p2, exitcond2_fu_219_p2, tmp_9_fu_375_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_219_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_258_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_9_fu_375_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_s_fu_394_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_219_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_219_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_219_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_219_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c3_o_2_address0 <= tmp_25_cast_fu_389_p1(11 - 1 downto 0);

    c3_o_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c3_o_2_ce0 <= ap_const_logic_1;
        else 
            c3_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c3_o_2_load_to_int_fu_429_p1 <= c3_o_2_load_reg_590;
    c_1_fu_225_p2 <= std_logic_vector(unsigned(c_reg_81) + unsigned(ap_const_lv5_1));
    c_cast3_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_81),8));
    exitcond1_fu_258_p2 <= "1" when (h_reg_92 = ap_const_lv3_5) else "0";
    exitcond2_fu_219_p2 <= "1" when (c_reg_81 = ap_const_lv5_10) else "0";
    exitcond_fu_306_p2 <= "1" when (w_reg_103 = ap_const_lv3_5) else "0";
    h_1_fu_264_p2 <= std_logic_vector(unsigned(h_reg_92) + unsigned(ap_const_lv3_1));
    h_cast2_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_92),8));
    i_1_fu_405_p2 <= std_logic_vector(unsigned(i6_reg_114) + unsigned(ap_const_lv32_1));
    i_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_270_p3),32));
    i_fu_270_p3 <= (h_reg_92 & ap_const_lv1_0);
    j_1_fu_399_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j5_reg_137));
    j_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_318_p3),32));
    j_fu_318_p3 <= (w_reg_103 & ap_const_lv1_0);
    max_value_1_to_int_fu_411_p1 <= max_value_1_reg_146;
    max_value_2_fu_493_p3 <= 
        max_value_1_reg_146 when (tmp_11_fu_488_p2(0) = '1') else 
        c3_o_2_load_reg_590;
    notlhs4_fu_464_p2 <= "0" when (tmp_3_fu_432_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_446_p2 <= "0" when (tmp_1_fu_415_p4 = ap_const_lv8_FF) else "1";
    notrhs5_fu_470_p2 <= "1" when (tmp_25_fu_442_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_452_p2 <= "1" when (tmp_24_fu_425_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= output_addr_reg_541;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= max_value_reg_124;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, tmp_9_fu_375_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_9_fu_375_p2))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_197_p3),9));
    p_shl2_cast_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_167_p3),8));
    p_shl3_cast_fu_244_p3 <= (tmp_15_fu_235_p2 & ap_const_lv2_0);
    p_shl4_cast_fu_349_p3 <= (tmp_19_fu_345_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_361_p3 <= (tmp_20_fu_357_p1 & ap_const_lv1_0);
    p_shl_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_185_p3),9));
    tmp_11_fu_488_p2 <= (tmp_8_fu_482_p2 and tmp_10_reg_597);
    tmp_12_fu_185_p3 <= (c_reg_81 & ap_const_lv3_0);
    tmp_13_fu_197_p3 <= (c_reg_81 & ap_const_lv1_0);
    tmp_14_fu_209_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_205_p1) + unsigned(p_shl_cast_fu_193_p1));
    tmp_15_fu_235_p2 <= std_logic_vector(unsigned(tmp_4_reg_500) + unsigned(h_cast2_cast_fu_231_p1));
    tmp_16_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_209_p2),32));
    tmp_16_fu_252_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_240_p1) + unsigned(p_shl3_cast_fu_244_p3));
    tmp_17_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_235_p2),10));
    tmp_17_fu_296_p2 <= std_logic_vector(unsigned(tmp_16_reg_518) + unsigned(w_cast1_cast_fu_292_p1));
    tmp_18_fu_340_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_505) + unsigned(i6_reg_114));
    tmp_19_fu_345_p1 <= tmp_18_fu_340_p2(9 - 1 downto 0);
    tmp_1_fu_415_p4 <= max_value_1_to_int_fu_411_p1(30 downto 23);
    tmp_20_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_296_p2),32));
    tmp_20_fu_357_p1 <= tmp_18_fu_340_p2(11 - 1 downto 0);
    tmp_21_fu_369_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_361_p3) + unsigned(p_shl4_cast_fu_349_p3));
    tmp_22_fu_380_p1 <= j5_reg_137(12 - 1 downto 0);
    tmp_23_fu_384_p2 <= std_logic_vector(unsigned(tmp_22_fu_380_p1) + unsigned(tmp_21_reg_564));
    tmp_24_fu_425_p1 <= max_value_1_to_int_fu_411_p1(23 - 1 downto 0);
    tmp_25_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_384_p2),32));
    tmp_25_fu_442_p1 <= c3_o_2_load_to_int_fu_429_p1(23 - 1 downto 0);
    tmp_2_fu_167_p3 <= (c_reg_81 & ap_const_lv2_0);
    tmp_3_fu_432_p4 <= c3_o_2_load_to_int_fu_429_p1(30 downto 23);
    tmp_4_fu_179_p2 <= std_logic_vector(unsigned(c_cast3_cast_fu_163_p1) + unsigned(p_shl2_cast_fu_175_p1));
    tmp_5_fu_458_p2 <= (notrhs_fu_452_p2 or notlhs_fu_446_p2);
    tmp_6_fu_476_p2 <= (notrhs5_fu_470_p2 or notlhs4_fu_464_p2);
    tmp_7_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_282_p2),32));
    tmp_7_fu_282_p2 <= std_logic_vector(unsigned(i_fu_270_p3) + unsigned(ap_const_lv4_2));
    tmp_8_fu_482_p2 <= (tmp_5_fu_458_p2 and tmp_6_fu_476_p2);
    tmp_9_fu_375_p2 <= "1" when (signed(i6_reg_114) < signed(tmp_7_cast_reg_536)) else "0";
    tmp_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_330_p2),32));
    tmp_fu_330_p2 <= std_logic_vector(unsigned(j_fu_318_p3) + unsigned(ap_const_lv4_2));
    tmp_s_fu_394_p2 <= "1" when (signed(j5_reg_137) < signed(tmp_cast_reg_559)) else "0";
    w_1_fu_312_p2 <= std_logic_vector(unsigned(w_reg_103) + unsigned(ap_const_lv3_1));
    w_cast1_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_103),10));
end behav;
