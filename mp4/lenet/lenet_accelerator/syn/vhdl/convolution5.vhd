-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv5_w_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv5_w_ce0 : OUT STD_LOGIC;
    conv5_w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv5_b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv5_b_ce0 : OUT STD_LOGIC;
    conv5_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_0_0_ce0 : OUT STD_LOGIC;
    output_0_0_we0 : OUT STD_LOGIC;
    output_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p4_o_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    p4_o_2_ce0 : OUT STD_LOGIC;
    p4_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_cast4_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal co_cast4_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_150_cast_fu_201_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_150_cast_reg_396 : STD_LOGIC_VECTOR (11 downto 0);
    signal co_1_fu_211_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_404 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast3_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast3_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_cast3_cast_fu_221_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast3_cast_reg_414 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_fu_231_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_422 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast2_cast1_fu_237_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast2_cast1_reg_432 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_cast2_cast_fu_241_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_cast2_cast_reg_437 : STD_LOGIC_VECTOR (16 downto 0);
    signal n_fu_251_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_445 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_146_fu_297_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_146_reg_450 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_147_fu_301_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_147_reg_455 : STD_LOGIC_VECTOR (14 downto 0);
    signal p4_o_2_addr_reg_460 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_1_fu_362_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_1_reg_469 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal conv5_w_load_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p4_o_2_load_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal conv5_b_load_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal co_reg_99 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_reg_110 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_133 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_1_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_156 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_2_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_163_cast_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_157_cast_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_142_fu_193_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ci_cast1_cast_fu_261_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_143_fu_265_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_141_fu_274_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_151_cast_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_144_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_145_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_150_fu_305_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_313_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_cast1_cast1_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_151_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_152_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_332_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_160_cast_fu_328_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_153_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_154_fu_346_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_368_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_148_fu_375_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_149_fu_380_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component lenet_wrapper_fadbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fmucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lenet_wrapper_fadbkb_x_U39 : component lenet_wrapper_fadbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_179_p0,
        din1 => grp_fu_179_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);

    lenet_wrapper_fmucud_x_U40 : component lenet_wrapper_fmucud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv5_w_load_reg_479,
        din1 => p4_o_2_load_reg_484,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_245_p2 = ap_const_lv1_0))) then 
                ci_reg_156 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                ci_reg_156 <= ci_1_reg_469;
            end if; 
        end if;
    end process;

    co_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                co_reg_99 <= co_1_reg_404;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_99 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_205_p2 = ap_const_lv1_0))) then 
                i_reg_110 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond1_fu_245_p2))) then 
                i_reg_110 <= m_reg_422;
            end if; 
        end if;
    end process;

    j_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_225_p2 = ap_const_lv1_0))) then 
                j_reg_133 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_reg_465))) then 
                j_reg_133 <= n_reg_445;
            end if; 
        end if;
    end process;

    sum_1_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_225_p2 = ap_const_lv1_0))) then 
                sum_1_reg_144 <= sum_reg_121;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_reg_465))) then 
                sum_1_reg_144 <= sum_2_reg_167;
            end if; 
        end if;
    end process;

    sum_2_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_245_p2 = ap_const_lv1_0))) then 
                sum_2_reg_167 <= sum_1_reg_144;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_2_reg_167 <= grp_fu_179_p2;
            end if; 
        end if;
    end process;

    sum_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_205_p2 = ap_const_lv1_0))) then 
                sum_reg_121 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond1_fu_245_p2))) then 
                sum_reg_121 <= sum_1_reg_144;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_1_reg_469 <= ci_1_fu_362_p2;
                exitcond_reg_465 <= exitcond_fu_356_p2;
                p4_o_2_addr_reg_460 <= tmp_163_cast_fu_351_p1(9 - 1 downto 0);
                tmp_146_reg_450 <= tmp_146_fu_297_p1;
                tmp_147_reg_455 <= tmp_147_fu_301_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_404 <= co_1_fu_211_p2;
                    co_cast4_reg_390(6 downto 0) <= co_cast4_fu_189_p1(6 downto 0);
                    tmp_150_cast_reg_396(10 downto 4) <= tmp_150_cast_fu_201_p1(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                conv5_b_load_reg_499 <= conv5_b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                conv5_w_load_reg_479 <= conv5_w_q0;
                p4_o_2_load_reg_484 <= p4_o_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    i_cast3_cast_reg_414(2 downto 0) <= i_cast3_cast_fu_221_p1(2 downto 0);
                    i_cast3_reg_409(2 downto 0) <= i_cast3_fu_217_p1(2 downto 0);
                m_reg_422 <= m_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    j_cast2_cast1_reg_432(2 downto 0) <= j_cast2_cast1_fu_237_p1(2 downto 0);
                    j_cast2_cast_reg_437(2 downto 0) <= j_cast2_cast_fu_241_p1(2 downto 0);
                n_reg_445 <= n_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_reg_504 <= grp_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_s_reg_489 <= grp_fu_185_p2;
            end if;
        end if;
    end process;
    co_cast4_reg_390(31 downto 7) <= "0000000000000000000000000";
    tmp_150_cast_reg_396(3 downto 0) <= "0000";
    tmp_150_cast_reg_396(11) <= '0';
    i_cast3_reg_409(31 downto 3) <= "00000000000000000000000000000";
    i_cast3_cast_reg_414(7 downto 3) <= "00000";
    j_cast2_cast1_reg_432(9 downto 3) <= "0000000";
    j_cast2_cast_reg_437(16 downto 3) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_225_p2, ap_CS_fsm_state4, exitcond_reg_465, ap_CS_fsm_state6, exitcond1_fu_245_p2, exitcond3_fu_205_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond3_fu_205_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_225_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond1_fu_245_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_reg_465))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_205_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond3_fu_205_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_205_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond3_fu_205_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ci_1_fu_362_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ci_reg_156));
    ci_cast1_cast1_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_156),8));
    ci_cast1_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_156),12));
    co_1_fu_211_p2 <= std_logic_vector(unsigned(co_reg_99) + unsigned(ap_const_lv7_1));
    co_cast4_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_99),32));
    conv5_b_address0 <= co_cast4_reg_390(7 - 1 downto 0);

    conv5_b_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv5_b_ce0 <= ap_const_logic_1;
        else 
            conv5_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv5_w_address0 <= tmp_157_cast_fu_385_p1(16 - 1 downto 0);

    conv5_w_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv5_w_ce0 <= ap_const_logic_1;
        else 
            conv5_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_245_p2 <= "1" when (j_reg_133 = ap_const_lv3_5) else "0";
    exitcond2_fu_225_p2 <= "1" when (i_reg_110 = ap_const_lv3_5) else "0";
    exitcond3_fu_205_p2 <= "1" when (co_reg_99 = ap_const_lv7_78) else "0";
    exitcond_fu_356_p2 <= "1" when (ci_reg_156 = ap_const_lv5_10) else "0";

    grp_fu_179_p0_assign_proc : process(sum_reg_121, sum_2_reg_167, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_179_p0 <= sum_reg_121;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_179_p0 <= sum_2_reg_167;
        else 
            grp_fu_179_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_179_p1_assign_proc : process(tmp_s_reg_489, conv5_b_load_reg_499, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_179_p1 <= conv5_b_load_reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_179_p1 <= tmp_s_reg_489;
        else 
            grp_fu_179_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_cast3_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_110),8));
    i_cast3_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_110),32));
    j_cast2_cast1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_133),10));
    j_cast2_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_133),17));
    m_fu_231_p2 <= std_logic_vector(unsigned(i_reg_110) + unsigned(ap_const_lv3_1));
    n_fu_251_p2 <= std_logic_vector(unsigned(j_reg_133) + unsigned(ap_const_lv3_1));
    output_0_0_address0 <= co_cast4_reg_390(7 - 1 downto 0);

    output_0_0_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_0_0_ce0 <= ap_const_logic_1;
        else 
            output_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_0_d0 <= tmp_reg_504;

    output_0_0_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_0_0_we0 <= ap_const_logic_1;
        else 
            output_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p4_o_2_address0 <= p4_o_2_addr_reg_460;

    p4_o_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p4_o_2_ce0 <= ap_const_logic_1;
        else 
            p4_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_150_fu_305_p3),8));
    p_shl2_cast_fu_368_p3 <= (tmp_147_reg_455 & ap_const_lv2_0);
    p_shl3_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_141_fu_274_p3),32));
    p_shl_cast_fu_332_p3 <= (tmp_152_fu_323_p2 & ap_const_lv2_0);
    tmp_141_fu_274_p3 <= (tmp_143_fu_265_p2 & ap_const_lv2_0);
    tmp_142_fu_193_p3 <= (co_reg_99 & ap_const_lv4_0);
    tmp_143_fu_265_p2 <= std_logic_vector(unsigned(ci_cast1_cast_fu_261_p1) + unsigned(tmp_150_cast_reg_396));
    tmp_144_fu_286_p2 <= std_logic_vector(unsigned(p_shl3_fu_282_p1) + unsigned(tmp_151_cast_fu_270_p1));
    tmp_145_fu_292_p2 <= std_logic_vector(unsigned(i_cast3_reg_409) + unsigned(tmp_144_fu_286_p2));
    tmp_146_fu_297_p1 <= tmp_145_fu_292_p2(17 - 1 downto 0);
    tmp_147_fu_301_p1 <= tmp_145_fu_292_p2(15 - 1 downto 0);
    tmp_148_fu_375_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_368_p3) + unsigned(tmp_146_reg_450));
    tmp_149_fu_380_p2 <= std_logic_vector(unsigned(j_cast2_cast_reg_437) + unsigned(tmp_148_fu_375_p2));
    tmp_150_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_193_p3),12));
    tmp_150_fu_305_p3 <= (ci_reg_156 & ap_const_lv2_0);
    tmp_151_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_265_p2),32));
    tmp_151_fu_317_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_313_p1) + unsigned(ci_cast1_cast1_fu_257_p1));
    tmp_152_fu_323_p2 <= std_logic_vector(unsigned(i_cast3_cast_reg_414) + unsigned(tmp_151_fu_317_p2));
    tmp_153_fu_340_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_332_p3) + unsigned(tmp_160_cast_fu_328_p1));
    tmp_154_fu_346_p2 <= std_logic_vector(unsigned(j_cast2_cast1_reg_432) + unsigned(tmp_153_fu_340_p2));
    tmp_157_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_149_fu_380_p2),32));
    tmp_160_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_152_fu_323_p2),10));
    tmp_163_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_fu_346_p2),32));
end behav;
