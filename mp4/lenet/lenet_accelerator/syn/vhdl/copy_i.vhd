-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity copy_i is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_in_r_AWVALID : OUT STD_LOGIC;
    m_axi_in_r_AWREADY : IN STD_LOGIC;
    m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_WVALID : OUT STD_LOGIC;
    m_axi_in_r_WREADY : IN STD_LOGIC;
    m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_WLAST : OUT STD_LOGIC;
    m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_ARVALID : OUT STD_LOGIC;
    m_axi_in_r_ARREADY : IN STD_LOGIC;
    m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RVALID : IN STD_LOGIC;
    m_axi_in_r_RREADY : OUT STD_LOGIC;
    m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_RLAST : IN STD_LOGIC;
    m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BVALID : IN STD_LOGIC;
    m_axi_in_r_BREADY : OUT STD_LOGIC;
    m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    image_in_i1 : IN STD_LOGIC_VECTOR (29 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of copy_i is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal in_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_147_cast_fu_103_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_147_cast_reg_173 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_10_fu_113_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_10_reg_181 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_addr_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal out_0_addr_reg_192 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_7_fu_162_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_7_reg_200 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_addr_read_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_73 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_84 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond1_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_cast_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_fu_146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_in_r_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_in_r_ARREADY : STD_LOGIC;
    signal tmp_fu_95_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_cast1_cast_fu_119_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_123_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_in_i1_cast_fu_137_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_148_cast6_fu_128_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_fu_140_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_in_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_m_axi_in_r_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_in_r_ARREADY)) then 
                        ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    j_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_156_p2 = ap_const_lv1_1))) then 
                j_reg_73 <= j_10_reg_181;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_73 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_107_p2))) then 
                k_reg_84 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_reg_84 <= k_7_reg_200;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_in_r_RVALID = ap_const_logic_1))) then
                in_addr_read_reg_205 <= m_axi_in_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    in_addr_reg_186(30 downto 0) <= sum_cast_fu_146_p1(30 downto 0);
                k_7_reg_200 <= k_7_fu_162_p2;
                out_0_addr_reg_192 <= tmp_148_cast_fu_132_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_10_reg_181 <= j_10_fu_113_p2;
                    tmp_147_cast_reg_173(10 downto 5) <= tmp_147_cast_fu_103_p1(10 downto 5);
            end if;
        end if;
    end process;
    tmp_147_cast_reg_173(4 downto 0) <= "00000";
    tmp_147_cast_reg_173(11) <= '0';
    in_addr_reg_186(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_in_r_RVALID, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_156_p2, exitcond1_fu_107_p2, ap_sig_ioackin_m_axi_in_r_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_107_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_156_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_m_axi_in_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_in_r_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_107_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_107_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_107_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_fu_107_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_in_r_ARREADY_assign_proc : process(m_axi_in_r_ARREADY, ap_reg_ioackin_m_axi_in_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_in_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_in_r_ARREADY <= m_axi_in_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_107_p2 <= "1" when (j_reg_73 = ap_const_lv6_20) else "0";
    exitcond_fu_156_p2 <= "1" when (k_reg_84 = ap_const_lv6_20) else "0";
    image_in_i1_cast_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_i1),31));

    in_r_blk_n_AR_assign_proc : process(m_axi_in_r_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_blk_n_AR <= m_axi_in_r_ARREADY;
        else 
            in_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in_r_blk_n_R_assign_proc : process(m_axi_in_r_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_r_blk_n_R <= m_axi_in_r_RVALID;
        else 
            in_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    j_10_fu_113_p2 <= std_logic_vector(unsigned(j_reg_73) + unsigned(ap_const_lv6_1));
    k_7_fu_162_p2 <= std_logic_vector(unsigned(k_reg_84) + unsigned(ap_const_lv6_1));
    k_cast1_cast_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_84),12));
    m_axi_in_r_ARADDR <= in_addr_reg_186;
    m_axi_in_r_ARBURST <= ap_const_lv2_0;
    m_axi_in_r_ARCACHE <= ap_const_lv4_0;
    m_axi_in_r_ARID <= ap_const_lv1_0;
    m_axi_in_r_ARLEN <= ap_const_lv32_1;
    m_axi_in_r_ARLOCK <= ap_const_lv2_0;
    m_axi_in_r_ARPROT <= ap_const_lv3_0;
    m_axi_in_r_ARQOS <= ap_const_lv4_0;
    m_axi_in_r_ARREGION <= ap_const_lv4_0;
    m_axi_in_r_ARSIZE <= ap_const_lv3_0;
    m_axi_in_r_ARUSER <= ap_const_lv1_0;

    m_axi_in_r_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_m_axi_in_r_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_in_r_ARREADY))) then 
            m_axi_in_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_in_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_r_AWADDR <= ap_const_lv32_0;
    m_axi_in_r_AWBURST <= ap_const_lv2_0;
    m_axi_in_r_AWCACHE <= ap_const_lv4_0;
    m_axi_in_r_AWID <= ap_const_lv1_0;
    m_axi_in_r_AWLEN <= ap_const_lv32_0;
    m_axi_in_r_AWLOCK <= ap_const_lv2_0;
    m_axi_in_r_AWPROT <= ap_const_lv3_0;
    m_axi_in_r_AWQOS <= ap_const_lv4_0;
    m_axi_in_r_AWREGION <= ap_const_lv4_0;
    m_axi_in_r_AWSIZE <= ap_const_lv3_0;
    m_axi_in_r_AWUSER <= ap_const_lv1_0;
    m_axi_in_r_AWVALID <= ap_const_logic_0;
    m_axi_in_r_BREADY <= ap_const_logic_0;

    m_axi_in_r_RREADY_assign_proc : process(m_axi_in_r_RVALID, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_in_r_RVALID = ap_const_logic_1))) then 
            m_axi_in_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_in_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_r_WDATA <= ap_const_lv32_0;
    m_axi_in_r_WID <= ap_const_lv1_0;
    m_axi_in_r_WLAST <= ap_const_logic_0;
    m_axi_in_r_WSTRB <= ap_const_lv4_0;
    m_axi_in_r_WUSER <= ap_const_lv1_0;
    m_axi_in_r_WVALID <= ap_const_logic_0;
    out_0_address0 <= out_0_addr_reg_192;

    out_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_0_d0 <= in_addr_read_reg_205;

    out_0_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_0_we0 <= ap_const_logic_1;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_cast_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_140_p2),32));
    sum_fu_140_p2 <= std_logic_vector(unsigned(image_in_i1_cast_fu_137_p1) + unsigned(tmp_148_cast6_fu_128_p1));
    tmp_147_cast_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_95_p3),12));
    tmp_148_cast6_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_123_p2),31));
    tmp_148_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_123_p2),32));
    tmp_fu_95_p3 <= (j_reg_73 & ap_const_lv5_0);
    tmp_s_fu_123_p2 <= std_logic_vector(unsigned(tmp_147_cast_reg_173) + unsigned(k_cast1_cast_fu_119_p1));
end behav;
