-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity copy_w3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_in_r_AWVALID : OUT STD_LOGIC;
    m_axi_in_r_AWREADY : IN STD_LOGIC;
    m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_WVALID : OUT STD_LOGIC;
    m_axi_in_r_WREADY : IN STD_LOGIC;
    m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_WLAST : OUT STD_LOGIC;
    m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_ARVALID : OUT STD_LOGIC;
    m_axi_in_r_ARREADY : IN STD_LOGIC;
    m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RVALID : IN STD_LOGIC;
    m_axi_in_r_RREADY : OUT STD_LOGIC;
    m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_r_RLAST : IN STD_LOGIC;
    m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BVALID : IN STD_LOGIC;
    m_axi_in_r_BREADY : OUT STD_LOGIC;
    m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    c3_w_i7 : IN STD_LOGIC_VECTOR (29 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of copy_w3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal in_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c3_w_i7_cast_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_w_i7_cast_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_cast_fu_171_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_134_cast_reg_301 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_10_fu_181_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_reg_309 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_132_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_8_fu_224_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_8_reg_322 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_135_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_5_fu_257_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_5_reg_335 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_136_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_136_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_in_r_ARREADY : STD_LOGIC;
    signal out_addr_reg_351 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state12 : BOOLEAN;
    signal l_2_fu_290_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_2_reg_359 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_addr_read_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_93 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_104 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_115 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_137_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_in_r_ARREADY : STD_LOGIC := '0';
    signal tmp_fu_141_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_153_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_149_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_161_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_130_fu_165_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_cast3_cast_fu_187_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_131_fu_191_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_129_fu_200_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_135_cast_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl2_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast2_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_133_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_cast1_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_in_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_m_axi_in_r_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_in_r_ARREADY)) then 
                        ap_reg_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_218_p2 = ap_const_lv1_1))) then 
                i_reg_93 <= i_10_reg_309;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_93 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond3_fu_175_p2))) then 
                j_reg_104 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_251_p2 = ap_const_lv1_1))) then 
                j_reg_104 <= j_8_reg_322;
            end if; 
        end if;
    end process;

    k_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_218_p2))) then 
                k_reg_115 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_lv1_0 = exitcond_fu_284_p2) and (ap_const_logic_0 = m_axi_in_r_RVALID))) and (exitcond_fu_284_p2 = ap_const_lv1_1))) then 
                k_reg_115 <= k_5_reg_335;
            end if; 
        end if;
    end process;

    l_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                l_reg_126 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                l_reg_126 <= l_2_reg_359;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    c3_w_i7_cast_reg_296(29 downto 0) <= c3_w_i7_cast_fu_137_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_10_reg_309 <= i_10_fu_181_p2;
                    tmp_134_cast_reg_301(9 downto 1) <= tmp_134_cast_fu_171_p1(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond_fu_284_p2) and not(((ap_const_lv1_0 = exitcond_fu_284_p2) and (ap_const_logic_0 = m_axi_in_r_RVALID))))) then
                in_addr_read_reg_364 <= m_axi_in_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_8_reg_322 <= j_8_fu_224_p2;
                tmp_132_reg_314 <= tmp_132_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_5_reg_335 <= k_5_fu_257_p2;
                tmp_135_reg_327 <= tmp_135_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_lv1_0 = exitcond_fu_284_p2) and (ap_const_logic_0 = m_axi_in_r_RVALID))))) then
                l_2_reg_359 <= l_2_fu_290_p2;
                out_addr_reg_351 <= tmp_137_fu_278_p2(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_251_p2))) then
                tmp_136_reg_340 <= tmp_136_fu_263_p2;
            end if;
        end if;
    end process;
    c3_w_i7_cast_reg_296(31 downto 30) <= "00";
    tmp_134_cast_reg_301(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_in_r_RVALID, ap_CS_fsm_state5, ap_CS_fsm_state12, exitcond_fu_284_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_251_p2, ap_sig_ioackin_m_axi_in_r_ARREADY, exitcond2_fu_218_p2, exitcond3_fu_175_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond3_fu_175_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_218_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_251_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_m_axi_in_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and not(((ap_const_lv1_0 = exitcond_fu_284_p2) and (ap_const_logic_0 = m_axi_in_r_RVALID))) and (exitcond_fu_284_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond_fu_284_p2) and not(((ap_const_lv1_0 = exitcond_fu_284_p2) and (ap_const_logic_0 = m_axi_in_r_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state12_assign_proc : process(m_axi_in_r_RVALID, exitcond_fu_284_p2)
    begin
                ap_block_state12 <= ((ap_const_lv1_0 = exitcond_fu_284_p2) and (ap_const_logic_0 = m_axi_in_r_RVALID));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_175_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond3_fu_175_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_175_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond3_fu_175_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_in_r_ARREADY_assign_proc : process(m_axi_in_r_ARREADY, ap_reg_ioackin_m_axi_in_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_in_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_in_r_ARREADY <= m_axi_in_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_in_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    c3_w_i7_cast_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c3_w_i7),32));
    exitcond1_fu_251_p2 <= "1" when (k_reg_115 = ap_const_lv3_5) else "0";
    exitcond2_fu_218_p2 <= "1" when (j_reg_104 = ap_const_lv3_6) else "0";
    exitcond3_fu_175_p2 <= "1" when (i_reg_93 = ap_const_lv5_10) else "0";
    exitcond_fu_284_p2 <= "1" when (l_reg_126 = ap_const_lv3_5) else "0";
    i_10_fu_181_p2 <= std_logic_vector(unsigned(i_reg_93) + unsigned(ap_const_lv5_1));

    in_r_blk_n_AR_assign_proc : process(m_axi_in_r_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_r_blk_n_AR <= m_axi_in_r_ARREADY;
        else 
            in_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in_r_blk_n_R_assign_proc : process(m_axi_in_r_RVALID, ap_CS_fsm_state12, exitcond_fu_284_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond_fu_284_p2))) then 
            in_r_blk_n_R <= m_axi_in_r_RVALID;
        else 
            in_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    j_8_fu_224_p2 <= std_logic_vector(unsigned(j_reg_104) + unsigned(ap_const_lv3_1));
    j_cast3_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_104),10));
    k_5_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(k_reg_115));
    k_cast2_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_115),32));
    l_2_fu_290_p2 <= std_logic_vector(unsigned(l_reg_126) + unsigned(ap_const_lv3_1));
    l_cast1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_126),32));
    m_axi_in_r_ARADDR <= tmp_136_reg_340;
    m_axi_in_r_ARBURST <= ap_const_lv2_0;
    m_axi_in_r_ARCACHE <= ap_const_lv4_0;
    m_axi_in_r_ARID <= ap_const_lv1_0;
    m_axi_in_r_ARLEN <= ap_const_lv32_5;
    m_axi_in_r_ARLOCK <= ap_const_lv2_0;
    m_axi_in_r_ARPROT <= ap_const_lv3_0;
    m_axi_in_r_ARQOS <= ap_const_lv4_0;
    m_axi_in_r_ARREGION <= ap_const_lv4_0;
    m_axi_in_r_ARSIZE <= ap_const_lv3_0;
    m_axi_in_r_ARUSER <= ap_const_lv1_0;

    m_axi_in_r_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_m_axi_in_r_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_in_r_ARREADY))) then 
            m_axi_in_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_in_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_r_AWADDR <= ap_const_lv32_0;
    m_axi_in_r_AWBURST <= ap_const_lv2_0;
    m_axi_in_r_AWCACHE <= ap_const_lv4_0;
    m_axi_in_r_AWID <= ap_const_lv1_0;
    m_axi_in_r_AWLEN <= ap_const_lv32_0;
    m_axi_in_r_AWLOCK <= ap_const_lv2_0;
    m_axi_in_r_AWPROT <= ap_const_lv3_0;
    m_axi_in_r_AWQOS <= ap_const_lv4_0;
    m_axi_in_r_AWREGION <= ap_const_lv4_0;
    m_axi_in_r_AWSIZE <= ap_const_lv3_0;
    m_axi_in_r_AWUSER <= ap_const_lv1_0;
    m_axi_in_r_AWVALID <= ap_const_logic_0;
    m_axi_in_r_BREADY <= ap_const_logic_0;

    m_axi_in_r_RREADY_assign_proc : process(m_axi_in_r_RVALID, ap_CS_fsm_state12, exitcond_fu_284_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond_fu_284_p2) and not(((ap_const_lv1_0 = exitcond_fu_284_p2) and (ap_const_logic_0 = m_axi_in_r_RVALID))))) then 
            m_axi_in_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_in_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_r_WDATA <= ap_const_lv32_0;
    m_axi_in_r_WID <= ap_const_lv1_0;
    m_axi_in_r_WLAST <= ap_const_logic_0;
    m_axi_in_r_WSTRB <= ap_const_lv4_0;
    m_axi_in_r_WUSER <= ap_const_lv1_0;
    m_axi_in_r_WVALID <= ap_const_logic_0;
    out_r_address0 <= out_addr_reg_351;

    out_r_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= in_addr_read_reg_364;

    out_r_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_153_p3),9));
        p_shl2_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_129_fu_200_p3),32));

    p_shl_cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_141_p3),9));
    tmp_129_fu_200_p3 <= (tmp_131_fu_191_p2 & ap_const_lv2_0);
    tmp_130_fu_165_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_149_p1) - unsigned(p_shl1_cast_fu_161_p1));
    tmp_131_fu_191_p2 <= std_logic_vector(signed(tmp_134_cast_reg_301) + signed(j_cast3_cast_fu_187_p1));
    tmp_132_fu_212_p2 <= std_logic_vector(signed(tmp_135_cast_fu_196_p1) + signed(p_shl2_fu_208_p1));
    tmp_133_fu_234_p2 <= std_logic_vector(unsigned(tmp_132_reg_314) + unsigned(k_cast2_fu_230_p1));
        tmp_134_cast_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_130_fu_165_p2),10));

    tmp_134_fu_239_p2 <= std_logic_vector(shift_left(unsigned(tmp_133_fu_234_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
        tmp_135_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_131_fu_191_p2),32));

    tmp_135_fu_245_p2 <= std_logic_vector(unsigned(tmp_133_fu_234_p2) + unsigned(tmp_134_fu_239_p2));
    tmp_136_fu_263_p2 <= std_logic_vector(unsigned(tmp_135_fu_245_p2) + unsigned(c3_w_i7_cast_reg_296));
    tmp_137_fu_278_p2 <= std_logic_vector(unsigned(l_cast1_fu_274_p1) + unsigned(tmp_135_reg_327));
    tmp_fu_141_p3 <= (i_reg_93 & ap_const_lv3_0);
    tmp_s_fu_153_p3 <= (i_reg_93 & ap_const_lv1_0);
end behav;
