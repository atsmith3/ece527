-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_wrapper is
generic (
    C_M_AXI_DATA_IMAGE_IN_I_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_IN_I_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_IMAGE_IN_I_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_IN_I_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_IN_I_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_IN_I_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_W_I_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C1_W_I_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_W_I_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_W_I_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C1_W_I_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_W_I_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_W_I_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_W_I_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_B_I_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C1_B_I_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_B_I_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_B_I_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C1_B_I_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_B_I_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_B_I_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C1_B_I_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_W_I_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C3_W_I_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_W_I_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_W_I_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C3_W_I_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_W_I_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_W_I_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_W_I_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_B_I_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C3_B_I_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_B_I_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_B_I_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C3_B_I_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_B_I_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_B_I_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C3_B_I_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_W_I_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_W_I_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_W_I_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_W_I_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_W_I_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_W_I_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_W_I_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_W_I_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_B_I_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_B_I_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_B_I_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_B_I_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_B_I_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_B_I_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_B_I_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_B_I_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_O_O_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_O_O_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_O_O_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_O_O_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_O_O_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_O_O_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_O_O_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_O_O_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DONE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_DONE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DONE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DONE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_DONE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DONE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DONE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DONE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_START_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_START_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_START_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_START_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_START_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_START_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_START_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_START_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_W_I_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_IMAGE_IN_I_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_C3_W_I_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_B_I_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_START_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C1_W_I_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_START_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_FC6_W_I_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_B_I_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_C3_B_I_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_O_O_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_C1_W_I_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_DONE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_C1_B_I_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C1_B_I_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_DONE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_IMAGE_IN_I_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C3_W_I_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_W_I_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_START_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_B_I_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C3_B_I_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_O_O_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_DONE_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_O_O_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C1_B_I_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C3_W_I_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_C1_W_I_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C3_B_I_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_IMAGE_IN_I_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_AWREADY : IN STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_IN_I_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_WVALID : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_WREADY : IN STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_WLAST : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_ARREADY : IN STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_IN_I_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_RVALID : IN STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_RREADY : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_RLAST : IN STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_IN_I_BVALID : IN STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_BREADY : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_IN_I_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_IN_I_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_IN_I_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_IN_I_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_C1_W_I_AWREADY : IN STD_LOGIC;
    m_axi_DATA_C1_W_I_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C1_W_I_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C1_W_I_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_W_I_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_W_I_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_W_I_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C1_W_I_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_W_I_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_W_I_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_WVALID : OUT STD_LOGIC;
    m_axi_DATA_C1_W_I_WREADY : IN STD_LOGIC;
    m_axi_DATA_C1_W_I_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_C1_W_I_WLAST : OUT STD_LOGIC;
    m_axi_DATA_C1_W_I_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_C1_W_I_ARREADY : IN STD_LOGIC;
    m_axi_DATA_C1_W_I_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C1_W_I_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C1_W_I_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_W_I_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_W_I_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_W_I_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C1_W_I_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_W_I_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_W_I_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_RVALID : IN STD_LOGIC;
    m_axi_DATA_C1_W_I_RREADY : OUT STD_LOGIC;
    m_axi_DATA_C1_W_I_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_RLAST : IN STD_LOGIC;
    m_axi_DATA_C1_W_I_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_W_I_BVALID : IN STD_LOGIC;
    m_axi_DATA_C1_W_I_BREADY : OUT STD_LOGIC;
    m_axi_DATA_C1_W_I_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_W_I_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_W_I_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_W_I_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_C1_B_I_AWREADY : IN STD_LOGIC;
    m_axi_DATA_C1_B_I_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C1_B_I_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C1_B_I_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_B_I_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_B_I_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_B_I_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C1_B_I_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_B_I_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_B_I_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_WVALID : OUT STD_LOGIC;
    m_axi_DATA_C1_B_I_WREADY : IN STD_LOGIC;
    m_axi_DATA_C1_B_I_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_C1_B_I_WLAST : OUT STD_LOGIC;
    m_axi_DATA_C1_B_I_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_C1_B_I_ARREADY : IN STD_LOGIC;
    m_axi_DATA_C1_B_I_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C1_B_I_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C1_B_I_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_B_I_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_B_I_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_B_I_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C1_B_I_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_B_I_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C1_B_I_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_RVALID : IN STD_LOGIC;
    m_axi_DATA_C1_B_I_RREADY : OUT STD_LOGIC;
    m_axi_DATA_C1_B_I_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_RLAST : IN STD_LOGIC;
    m_axi_DATA_C1_B_I_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_B_I_BVALID : IN STD_LOGIC;
    m_axi_DATA_C1_B_I_BREADY : OUT STD_LOGIC;
    m_axi_DATA_C1_B_I_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C1_B_I_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C1_B_I_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C1_B_I_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_C3_W_I_AWREADY : IN STD_LOGIC;
    m_axi_DATA_C3_W_I_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C3_W_I_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C3_W_I_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_W_I_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_W_I_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_W_I_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C3_W_I_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_W_I_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_W_I_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_WVALID : OUT STD_LOGIC;
    m_axi_DATA_C3_W_I_WREADY : IN STD_LOGIC;
    m_axi_DATA_C3_W_I_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_C3_W_I_WLAST : OUT STD_LOGIC;
    m_axi_DATA_C3_W_I_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_C3_W_I_ARREADY : IN STD_LOGIC;
    m_axi_DATA_C3_W_I_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C3_W_I_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C3_W_I_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_W_I_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_W_I_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_W_I_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C3_W_I_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_W_I_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_W_I_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_RVALID : IN STD_LOGIC;
    m_axi_DATA_C3_W_I_RREADY : OUT STD_LOGIC;
    m_axi_DATA_C3_W_I_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_RLAST : IN STD_LOGIC;
    m_axi_DATA_C3_W_I_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_W_I_BVALID : IN STD_LOGIC;
    m_axi_DATA_C3_W_I_BREADY : OUT STD_LOGIC;
    m_axi_DATA_C3_W_I_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_W_I_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_W_I_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_W_I_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_C3_B_I_AWREADY : IN STD_LOGIC;
    m_axi_DATA_C3_B_I_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C3_B_I_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C3_B_I_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_B_I_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_B_I_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_B_I_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C3_B_I_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_B_I_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_B_I_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_WVALID : OUT STD_LOGIC;
    m_axi_DATA_C3_B_I_WREADY : IN STD_LOGIC;
    m_axi_DATA_C3_B_I_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_C3_B_I_WLAST : OUT STD_LOGIC;
    m_axi_DATA_C3_B_I_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_C3_B_I_ARREADY : IN STD_LOGIC;
    m_axi_DATA_C3_B_I_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C3_B_I_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C3_B_I_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_B_I_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_B_I_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_B_I_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C3_B_I_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_B_I_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C3_B_I_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_RVALID : IN STD_LOGIC;
    m_axi_DATA_C3_B_I_RREADY : OUT STD_LOGIC;
    m_axi_DATA_C3_B_I_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_RLAST : IN STD_LOGIC;
    m_axi_DATA_C3_B_I_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_B_I_BVALID : IN STD_LOGIC;
    m_axi_DATA_C3_B_I_BREADY : OUT STD_LOGIC;
    m_axi_DATA_C3_B_I_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C3_B_I_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_C3_B_I_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C3_B_I_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_W_I_AWREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_W_I_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_FC6_W_I_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_W_I_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_W_I_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_W_I_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_W_I_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_W_I_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_W_I_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_W_I_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_WVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_W_I_WREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_W_I_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_FC6_W_I_WLAST : OUT STD_LOGIC;
    m_axi_DATA_FC6_W_I_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_W_I_ARREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_W_I_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_FC6_W_I_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_W_I_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_W_I_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_W_I_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_W_I_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_W_I_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_W_I_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_W_I_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_RVALID : IN STD_LOGIC;
    m_axi_DATA_FC6_W_I_RREADY : OUT STD_LOGIC;
    m_axi_DATA_FC6_W_I_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_RLAST : IN STD_LOGIC;
    m_axi_DATA_FC6_W_I_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_W_I_BVALID : IN STD_LOGIC;
    m_axi_DATA_FC6_W_I_BREADY : OUT STD_LOGIC;
    m_axi_DATA_FC6_W_I_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_W_I_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_W_I_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_W_I_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_B_I_AWREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_B_I_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_FC6_B_I_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_B_I_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_B_I_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_B_I_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_B_I_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_B_I_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_B_I_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_B_I_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_WVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_B_I_WREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_B_I_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_FC6_B_I_WLAST : OUT STD_LOGIC;
    m_axi_DATA_FC6_B_I_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_B_I_ARREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_B_I_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_FC6_B_I_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_B_I_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_B_I_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_B_I_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_B_I_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_B_I_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_B_I_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_B_I_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_RVALID : IN STD_LOGIC;
    m_axi_DATA_FC6_B_I_RREADY : OUT STD_LOGIC;
    m_axi_DATA_FC6_B_I_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_DATA_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_RLAST : IN STD_LOGIC;
    m_axi_DATA_FC6_B_I_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_B_I_BVALID : IN STD_LOGIC;
    m_axi_DATA_FC6_B_I_BREADY : OUT STD_LOGIC;
    m_axi_DATA_FC6_B_I_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_B_I_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_B_I_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_B_I_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_O_O_AWREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_O_O_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_FC6_O_O_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_O_O_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_O_O_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_O_O_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_O_O_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_O_O_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_O_O_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_O_O_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_WVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_O_O_WREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_O_O_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_DATA_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_FC6_O_O_WLAST : OUT STD_LOGIC;
    m_axi_DATA_FC6_O_O_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_O_O_ARREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_O_O_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_FC6_O_O_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_O_O_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_O_O_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_O_O_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_O_O_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_O_O_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_O_O_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_O_O_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_RVALID : IN STD_LOGIC;
    m_axi_DATA_FC6_O_O_RREADY : OUT STD_LOGIC;
    m_axi_DATA_FC6_O_O_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_DATA_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_RLAST : IN STD_LOGIC;
    m_axi_DATA_FC6_O_O_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_O_O_BVALID : IN STD_LOGIC;
    m_axi_DATA_FC6_O_O_BREADY : OUT STD_LOGIC;
    m_axi_DATA_FC6_O_O_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_O_O_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_O_O_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_O_O_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_DONE_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_DONE_AWREADY : IN STD_LOGIC;
    m_axi_DATA_DONE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_DONE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_ID_WIDTH-1 downto 0);
    m_axi_DATA_DONE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_DONE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_DONE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_DONE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_DONE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_DONE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_DONE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_DONE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_DONE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_DONE_WVALID : OUT STD_LOGIC;
    m_axi_DATA_DONE_WREADY : IN STD_LOGIC;
    m_axi_DATA_DONE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_DATA_WIDTH-1 downto 0);
    m_axi_DATA_DONE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_DONE_WLAST : OUT STD_LOGIC;
    m_axi_DATA_DONE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_ID_WIDTH-1 downto 0);
    m_axi_DATA_DONE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_DONE_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_DONE_ARREADY : IN STD_LOGIC;
    m_axi_DATA_DONE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_DONE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_ID_WIDTH-1 downto 0);
    m_axi_DATA_DONE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_DONE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_DONE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_DONE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_DONE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_DONE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_DONE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_DONE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_DONE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_DONE_RVALID : IN STD_LOGIC;
    m_axi_DATA_DONE_RREADY : OUT STD_LOGIC;
    m_axi_DATA_DONE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_DATA_WIDTH-1 downto 0);
    m_axi_DATA_DONE_RLAST : IN STD_LOGIC;
    m_axi_DATA_DONE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_ID_WIDTH-1 downto 0);
    m_axi_DATA_DONE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_DONE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_DONE_BVALID : IN STD_LOGIC;
    m_axi_DATA_DONE_BREADY : OUT STD_LOGIC;
    m_axi_DATA_DONE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_DONE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_ID_WIDTH-1 downto 0);
    m_axi_DATA_DONE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DONE_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_START_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_START_AWREADY : IN STD_LOGIC;
    m_axi_DATA_START_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_START_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_ID_WIDTH-1 downto 0);
    m_axi_DATA_START_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_START_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_START_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_START_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_START_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_START_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_START_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_START_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_START_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_START_WVALID : OUT STD_LOGIC;
    m_axi_DATA_START_WREADY : IN STD_LOGIC;
    m_axi_DATA_START_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_DATA_WIDTH-1 downto 0);
    m_axi_DATA_START_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_START_WLAST : OUT STD_LOGIC;
    m_axi_DATA_START_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_ID_WIDTH-1 downto 0);
    m_axi_DATA_START_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_START_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_START_ARREADY : IN STD_LOGIC;
    m_axi_DATA_START_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_START_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_ID_WIDTH-1 downto 0);
    m_axi_DATA_START_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_START_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_START_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_START_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_START_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_START_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_START_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_START_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_START_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_START_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_START_RVALID : IN STD_LOGIC;
    m_axi_DATA_START_RREADY : OUT STD_LOGIC;
    m_axi_DATA_START_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_START_DATA_WIDTH-1 downto 0);
    m_axi_DATA_START_RLAST : IN STD_LOGIC;
    m_axi_DATA_START_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_START_ID_WIDTH-1 downto 0);
    m_axi_DATA_START_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_START_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_START_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_START_BVALID : IN STD_LOGIC;
    m_axi_DATA_START_BREADY : OUT STD_LOGIC;
    m_axi_DATA_START_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_START_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_START_ID_WIDTH-1 downto 0);
    m_axi_DATA_START_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_START_BUSER_WIDTH-1 downto 0);
    fc6_w_i_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fc6_w_i_ce0 : OUT STD_LOGIC;
    fc6_w_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fc6_b_i_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fc6_b_i_ce0 : OUT STD_LOGIC;
    fc6_b_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of lenet_wrapper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenet_wrapper,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=216,HLS_SYN_DSP=20,HLS_SYN_FF=19609,HLS_SYN_LUT=17918}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (93 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (93 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (93 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (93 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (93 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (93 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (93 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (93 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (93 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (93 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_77 : STD_LOGIC_VECTOR (6 downto 0) := "1110111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal image_in_i : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_w_i : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_b_i : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_w_i : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_b_i : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_w_i : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_b_i : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_o_o : STD_LOGIC_VECTOR (31 downto 0);
    signal done : STD_LOGIC_VECTOR (31 downto 0);
    signal start : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_o_1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal c1_o_1_ce0 : STD_LOGIC;
    signal c1_o_1_we0 : STD_LOGIC;
    signal c1_o_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_o_2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal c1_o_2_ce0 : STD_LOGIC;
    signal c1_o_2_we0 : STD_LOGIC;
    signal c1_o_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_o_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_o_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal p2_o_1_ce0 : STD_LOGIC;
    signal p2_o_1_we0 : STD_LOGIC;
    signal p2_o_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_o_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal p2_o_2_ce0 : STD_LOGIC;
    signal p2_o_2_we0 : STD_LOGIC;
    signal p2_o_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_o_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_o_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal c3_o_1_ce0 : STD_LOGIC;
    signal c3_o_1_we0 : STD_LOGIC;
    signal c3_o_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_o_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal c3_o_2_ce0 : STD_LOGIC;
    signal c3_o_2_we0 : STD_LOGIC;
    signal c3_o_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_o_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p4_o_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p4_o_1_ce0 : STD_LOGIC;
    signal p4_o_1_we0 : STD_LOGIC;
    signal p4_o_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p4_o_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p4_o_2_ce0 : STD_LOGIC;
    signal p4_o_2_we0 : STD_LOGIC;
    signal p4_o_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p4_o_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_o_1_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_o_1_0_0_ce0 : STD_LOGIC;
    signal c5_o_1_0_0_we0 : STD_LOGIC;
    signal c5_o_1_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_o_2_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_o_2_0_0_ce0 : STD_LOGIC;
    signal c5_o_2_0_0_we0 : STD_LOGIC;
    signal c5_o_2_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_o_2_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_o_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc6_o_ce0 : STD_LOGIC;
    signal fc6_o_we0 : STD_LOGIC;
    signal fc6_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_DONE_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal DATA_DONE_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal DATA_DONE_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal DATA_START_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_17_fu_2016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_START_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal DATA_IMAGE_IN_I_AWREADY : STD_LOGIC;
    signal DATA_IMAGE_IN_I_WREADY : STD_LOGIC;
    signal DATA_IMAGE_IN_I_ARVALID : STD_LOGIC;
    signal DATA_IMAGE_IN_I_ARREADY : STD_LOGIC;
    signal DATA_IMAGE_IN_I_RVALID : STD_LOGIC;
    signal DATA_IMAGE_IN_I_RREADY : STD_LOGIC;
    signal DATA_IMAGE_IN_I_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_IMAGE_IN_I_RLAST : STD_LOGIC;
    signal DATA_IMAGE_IN_I_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_IMAGE_IN_I_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_IMAGE_IN_I_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_IMAGE_IN_I_BVALID : STD_LOGIC;
    signal DATA_IMAGE_IN_I_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_IMAGE_IN_I_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_IMAGE_IN_I_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C1_W_I_AWREADY : STD_LOGIC;
    signal DATA_C1_W_I_WREADY : STD_LOGIC;
    signal DATA_C1_W_I_ARVALID : STD_LOGIC;
    signal DATA_C1_W_I_ARREADY : STD_LOGIC;
    signal DATA_C1_W_I_RVALID : STD_LOGIC;
    signal DATA_C1_W_I_RREADY : STD_LOGIC;
    signal DATA_C1_W_I_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_C1_W_I_RLAST : STD_LOGIC;
    signal DATA_C1_W_I_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C1_W_I_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C1_W_I_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C1_W_I_BVALID : STD_LOGIC;
    signal DATA_C1_W_I_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C1_W_I_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C1_W_I_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C1_B_I_AWREADY : STD_LOGIC;
    signal DATA_C1_B_I_WREADY : STD_LOGIC;
    signal DATA_C1_B_I_ARVALID : STD_LOGIC;
    signal DATA_C1_B_I_ARREADY : STD_LOGIC;
    signal DATA_C1_B_I_RVALID : STD_LOGIC;
    signal DATA_C1_B_I_RREADY : STD_LOGIC;
    signal DATA_C1_B_I_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_C1_B_I_RLAST : STD_LOGIC;
    signal DATA_C1_B_I_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C1_B_I_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C1_B_I_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C1_B_I_BVALID : STD_LOGIC;
    signal DATA_C1_B_I_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C1_B_I_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C1_B_I_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C3_W_I_AWREADY : STD_LOGIC;
    signal DATA_C3_W_I_WREADY : STD_LOGIC;
    signal DATA_C3_W_I_ARVALID : STD_LOGIC;
    signal DATA_C3_W_I_ARREADY : STD_LOGIC;
    signal DATA_C3_W_I_RVALID : STD_LOGIC;
    signal DATA_C3_W_I_RREADY : STD_LOGIC;
    signal DATA_C3_W_I_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_C3_W_I_RLAST : STD_LOGIC;
    signal DATA_C3_W_I_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C3_W_I_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C3_W_I_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C3_W_I_BVALID : STD_LOGIC;
    signal DATA_C3_W_I_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C3_W_I_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C3_W_I_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C3_B_I_AWREADY : STD_LOGIC;
    signal DATA_C3_B_I_WREADY : STD_LOGIC;
    signal DATA_C3_B_I_ARVALID : STD_LOGIC;
    signal DATA_C3_B_I_ARREADY : STD_LOGIC;
    signal DATA_C3_B_I_RVALID : STD_LOGIC;
    signal DATA_C3_B_I_RREADY : STD_LOGIC;
    signal DATA_C3_B_I_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_C3_B_I_RLAST : STD_LOGIC;
    signal DATA_C3_B_I_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C3_B_I_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C3_B_I_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C3_B_I_BVALID : STD_LOGIC;
    signal DATA_C3_B_I_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C3_B_I_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C3_B_I_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_W_I_AWREADY : STD_LOGIC;
    signal DATA_FC6_W_I_WREADY : STD_LOGIC;
    signal DATA_FC6_W_I_ARVALID : STD_LOGIC;
    signal DATA_FC6_W_I_ARREADY : STD_LOGIC;
    signal DATA_FC6_W_I_RVALID : STD_LOGIC;
    signal DATA_FC6_W_I_RREADY : STD_LOGIC;
    signal DATA_FC6_W_I_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_FC6_W_I_RLAST : STD_LOGIC;
    signal DATA_FC6_W_I_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_W_I_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_W_I_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_FC6_W_I_BVALID : STD_LOGIC;
    signal DATA_FC6_W_I_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_FC6_W_I_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_W_I_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_B_I_AWREADY : STD_LOGIC;
    signal DATA_FC6_B_I_WREADY : STD_LOGIC;
    signal DATA_FC6_B_I_ARVALID : STD_LOGIC;
    signal DATA_FC6_B_I_ARREADY : STD_LOGIC;
    signal DATA_FC6_B_I_RVALID : STD_LOGIC;
    signal DATA_FC6_B_I_RREADY : STD_LOGIC;
    signal DATA_FC6_B_I_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_FC6_B_I_RLAST : STD_LOGIC;
    signal DATA_FC6_B_I_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_B_I_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_B_I_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_FC6_B_I_BVALID : STD_LOGIC;
    signal DATA_FC6_B_I_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_FC6_B_I_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_B_I_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_O_O_AWVALID : STD_LOGIC;
    signal DATA_FC6_O_O_AWREADY : STD_LOGIC;
    signal DATA_FC6_O_O_WVALID : STD_LOGIC;
    signal DATA_FC6_O_O_WREADY : STD_LOGIC;
    signal DATA_FC6_O_O_ARREADY : STD_LOGIC;
    signal DATA_FC6_O_O_RVALID : STD_LOGIC;
    signal DATA_FC6_O_O_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_FC6_O_O_RLAST : STD_LOGIC;
    signal DATA_FC6_O_O_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_O_O_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_O_O_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_FC6_O_O_BVALID : STD_LOGIC;
    signal DATA_FC6_O_O_BREADY : STD_LOGIC;
    signal DATA_FC6_O_O_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_FC6_O_O_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_O_O_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_DONE_AWVALID : STD_LOGIC;
    signal DATA_DONE_AWREADY : STD_LOGIC;
    signal DATA_DONE_WVALID : STD_LOGIC;
    signal DATA_DONE_WREADY : STD_LOGIC;
    signal DATA_DONE_ARREADY : STD_LOGIC;
    signal DATA_DONE_RVALID : STD_LOGIC;
    signal DATA_DONE_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_DONE_RLAST : STD_LOGIC;
    signal DATA_DONE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_DONE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_DONE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_DONE_BVALID : STD_LOGIC;
    signal DATA_DONE_BREADY : STD_LOGIC;
    signal DATA_DONE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_DONE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_DONE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_START_AWREADY : STD_LOGIC;
    signal DATA_START_WREADY : STD_LOGIC;
    signal DATA_START_ARVALID : STD_LOGIC;
    signal DATA_START_ARREADY : STD_LOGIC;
    signal DATA_START_RVALID : STD_LOGIC;
    signal DATA_START_RREADY : STD_LOGIC;
    signal DATA_START_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_START_RLAST : STD_LOGIC;
    signal DATA_START_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_START_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_START_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_START_BVALID : STD_LOGIC;
    signal DATA_START_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_START_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_START_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_START_addr_reg_2925 : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_DONE_addr_reg_2931 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_o_o1_reg_2936 : STD_LOGIC_VECTOR (29 downto 0);
    signal c5_b_i1_reg_2941 : STD_LOGIC_VECTOR (29 downto 0);
    signal c5_w_i1_reg_2946 : STD_LOGIC_VECTOR (29 downto 0);
    signal c3_b_i9_reg_2951 : STD_LOGIC_VECTOR (29 downto 0);
    signal c3_w_i7_reg_2956 : STD_LOGIC_VECTOR (29 downto 0);
    signal c1_b_i5_reg_2961 : STD_LOGIC_VECTOR (29 downto 0);
    signal c1_w_i3_reg_2966 : STD_LOGIC_VECTOR (29 downto 0);
    signal image_in_i1_reg_2971 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvarinc4_fu_1477_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvarinc4_reg_2976 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc8_fu_1496_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_52_fu_1530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_2992 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal indvarinc1_fu_1536_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc1_reg_2997 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_56_fu_1567_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_reg_3002 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal indvarinc3_fu_1573_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc3_reg_3007 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc5_fu_1593_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal indvarinc6_fu_1622_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_60_fu_1658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_reg_3034 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal indvarinc7_fu_1664_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc7_reg_3039 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_63_fu_1685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_reg_3044 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal indvarinc9_fu_1691_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc9_reg_3049 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_67_fu_1722_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_67_reg_3054 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal indvarinc_fu_1728_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc_reg_3059 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc2_fu_1748_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal indvarinc10_fu_1783_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal indvarinc11_fu_1795_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvarinc11_reg_3089 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_72_fu_1827_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_reg_3094 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal indvarinc12_fu_1833_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc12_reg_3099 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_76_fu_1864_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_76_reg_3104 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indvarinc13_fu_1870_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc13_reg_3109 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc14_fu_1890_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal indvarinc15_fu_1925_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_80_fu_1961_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_80_reg_3139 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal indvarinc16_fu_1967_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc16_reg_3144 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc17_fu_1987_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal indvarinc18_fu_2010_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_ioackin_DATA_START_ARREADY : STD_LOGIC;
    signal ap_block_state20_io : BOOLEAN;
    signal DATA_START_addr_read_reg_3168 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_2022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_3173 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_84_fu_2051_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_84_reg_3177 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_3_fu_2063_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_3185 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_fu_2073_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_85_reg_3190 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal fc6_w_0_0_addr_1_reg_3195 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_2089_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_3203 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal i_i1_cast_fu_2109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i1_cast_reg_3213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i_fu_2120_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_3221 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i1_fu_2114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_cast_fu_2156_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_92_cast_reg_3231 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal i_4_fu_2166_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_3239 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_96_fu_2205_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_96_reg_3244 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal j_3_fu_2217_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_3252 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal c1_o_2_addr_reg_3262 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_fu_2244_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_3270 : STD_LOGIC_VECTOR (4 downto 0);
    signal c1_o_1_load_reg_3275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_1332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_3282 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_96_cast_fu_2328_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_96_cast_reg_3287 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal i_5_fu_2338_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_3295 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_103_fu_2377_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_103_reg_3300 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal j_4_fu_2389_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_3308 : STD_LOGIC_VECTOR (3 downto 0);
    signal p2_o_2_addr_reg_3313 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal k_1_fu_2416_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_3326 : STD_LOGIC_VECTOR (3 downto 0);
    signal p2_o_1_load_reg_3331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal tmp_29_reg_3338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_99_fu_2494_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_99_reg_3343 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_6_fu_2506_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_3351 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_110_fu_2541_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_110_reg_3356 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal j_5_fu_2553_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_5_reg_3364 : STD_LOGIC_VECTOR (3 downto 0);
    signal c3_o_2_addr_reg_3369 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal k_2_fu_2580_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_reg_3382 : STD_LOGIC_VECTOR (3 downto 0);
    signal c3_o_1_load_reg_3387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_39_reg_3394 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_107_fu_2650_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_107_reg_3399 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal i_8_fu_2662_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_3407 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_114_fu_2689_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_114_reg_3412 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal j_6_fu_2701_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_6_reg_3420 : STD_LOGIC_VECTOR (2 downto 0);
    signal p4_o_2_addr_reg_3425 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal k_3_fu_2728_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_3_reg_3438 : STD_LOGIC_VECTOR (2 downto 0);
    signal p4_o_1_load_reg_3443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal tmp_44_reg_3450 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal i_i6_cast3_fu_2782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i6_cast3_reg_3455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal i_7_fu_2793_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_reg_3463 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_i4_fu_2787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_o_1_0_0_load_reg_3473 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal tmp_34_reg_3480 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal n_i_cast2_fu_2847_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_i_cast2_reg_3485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp_120_fu_2876_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_120_reg_3490 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_fu_2888_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_reg_3498 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc6_o_addr_reg_3503 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_i4_fu_2882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal c_fu_2919_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_reg_3516 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_i7_fu_2913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc6_w_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_w_0_0_load_reg_3531 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal c5_o_2_0_0_load_reg_3536 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_reg_3541 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_fu_1323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal fc6_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_b_load_reg_3551 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal tmp_i_66_reg_3556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal image_in_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_in_0_ce0 : STD_LOGIC;
    signal image_in_0_we0 : STD_LOGIC;
    signal image_in_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_w_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_w_0_ce0 : STD_LOGIC;
    signal c1_w_0_we0 : STD_LOGIC;
    signal c1_w_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_w_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_b_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal c1_b_ce0 : STD_LOGIC;
    signal c1_b_we0 : STD_LOGIC;
    signal c1_b_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_w_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal c3_w_ce0 : STD_LOGIC;
    signal c3_w_we0 : STD_LOGIC;
    signal c3_w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_w_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c3_b_ce0 : STD_LOGIC;
    signal c3_b_we0 : STD_LOGIC;
    signal c3_b_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_w_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c5_w_ce0 : STD_LOGIC;
    signal c5_w_we0 : STD_LOGIC;
    signal c5_w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_w_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_b_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_b_ce0 : STD_LOGIC;
    signal c5_b_we0 : STD_LOGIC;
    signal c5_b_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_w_0_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc6_w_0_0_ce0 : STD_LOGIC;
    signal fc6_w_0_0_we0 : STD_LOGIC;
    signal fc6_w_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc6_b_ce0 : STD_LOGIC;
    signal fc6_b_we0 : STD_LOGIC;
    signal fc6_b_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution3_fu_1213_ap_start : STD_LOGIC;
    signal grp_convolution3_fu_1213_ap_done : STD_LOGIC;
    signal grp_convolution3_fu_1213_ap_idle : STD_LOGIC;
    signal grp_convolution3_fu_1213_ap_ready : STD_LOGIC;
    signal grp_convolution3_fu_1213_conv3_w_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution3_fu_1213_conv3_w_ce0 : STD_LOGIC;
    signal grp_convolution3_fu_1213_conv3_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution3_fu_1213_conv3_b_ce0 : STD_LOGIC;
    signal grp_convolution3_fu_1213_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution3_fu_1213_output_r_ce0 : STD_LOGIC;
    signal grp_convolution3_fu_1213_output_r_we0 : STD_LOGIC;
    signal grp_convolution3_fu_1213_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution3_fu_1213_p2_o_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution3_fu_1213_p2_o_2_ce0 : STD_LOGIC;
    signal grp_convolution1_fu_1223_ap_start : STD_LOGIC;
    signal grp_convolution1_fu_1223_ap_done : STD_LOGIC;
    signal grp_convolution1_fu_1223_ap_idle : STD_LOGIC;
    signal grp_convolution1_fu_1223_ap_ready : STD_LOGIC;
    signal grp_convolution1_fu_1223_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution1_fu_1223_input_0_ce0 : STD_LOGIC;
    signal grp_convolution1_fu_1223_conv1_w_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution1_fu_1223_conv1_w_0_ce0 : STD_LOGIC;
    signal grp_convolution1_fu_1223_conv1_b_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution1_fu_1223_conv1_b_ce0 : STD_LOGIC;
    signal grp_convolution1_fu_1223_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_convolution1_fu_1223_output_r_ce0 : STD_LOGIC;
    signal grp_convolution1_fu_1223_output_r_we0 : STD_LOGIC;
    signal grp_convolution1_fu_1223_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution5_fu_1232_ap_start : STD_LOGIC;
    signal grp_convolution5_fu_1232_ap_done : STD_LOGIC;
    signal grp_convolution5_fu_1232_ap_idle : STD_LOGIC;
    signal grp_convolution5_fu_1232_ap_ready : STD_LOGIC;
    signal grp_convolution5_fu_1232_conv5_w_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_convolution5_fu_1232_conv5_w_ce0 : STD_LOGIC;
    signal grp_convolution5_fu_1232_conv5_b_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_convolution5_fu_1232_conv5_b_ce0 : STD_LOGIC;
    signal grp_convolution5_fu_1232_output_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_convolution5_fu_1232_output_0_0_ce0 : STD_LOGIC;
    signal grp_convolution5_fu_1232_output_0_0_we0 : STD_LOGIC;
    signal grp_convolution5_fu_1232_output_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution5_fu_1232_p4_o_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution5_fu_1232_p4_o_2_ce0 : STD_LOGIC;
    signal grp_max_pooling2_fu_1242_ap_start : STD_LOGIC;
    signal grp_max_pooling2_fu_1242_ap_done : STD_LOGIC;
    signal grp_max_pooling2_fu_1242_ap_idle : STD_LOGIC;
    signal grp_max_pooling2_fu_1242_ap_ready : STD_LOGIC;
    signal grp_max_pooling2_fu_1242_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pooling2_fu_1242_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2_fu_1242_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling2_fu_1242_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2_fu_1242_c1_o_2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_max_pooling2_fu_1242_c1_o_2_ce0 : STD_LOGIC;
    signal grp_max_pooling4_fu_1250_ap_start : STD_LOGIC;
    signal grp_max_pooling4_fu_1250_ap_done : STD_LOGIC;
    signal grp_max_pooling4_fu_1250_ap_idle : STD_LOGIC;
    signal grp_max_pooling4_fu_1250_ap_ready : STD_LOGIC;
    signal grp_max_pooling4_fu_1250_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pooling4_fu_1250_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling4_fu_1250_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling4_fu_1250_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling4_fu_1250_c3_o_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pooling4_fu_1250_c3_o_2_ce0 : STD_LOGIC;
    signal grp_copy_w5_fu_1258_ap_start : STD_LOGIC;
    signal grp_copy_w5_fu_1258_ap_done : STD_LOGIC;
    signal grp_copy_w5_fu_1258_ap_idle : STD_LOGIC;
    signal grp_copy_w5_fu_1258_ap_ready : STD_LOGIC;
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWVALID : STD_LOGIC;
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_WVALID : STD_LOGIC;
    signal grp_copy_w5_fu_1258_m_axi_in_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_WLAST : STD_LOGIC;
    signal grp_copy_w5_fu_1258_m_axi_in_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARVALID : STD_LOGIC;
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w5_fu_1258_m_axi_in_r_RREADY : STD_LOGIC;
    signal grp_copy_w5_fu_1258_m_axi_in_r_BREADY : STD_LOGIC;
    signal grp_copy_w5_fu_1258_out_r_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_w5_fu_1258_out_r_ce0 : STD_LOGIC;
    signal grp_copy_w5_fu_1258_out_r_we0 : STD_LOGIC;
    signal grp_copy_w5_fu_1258_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w3_fu_1266_ap_start : STD_LOGIC;
    signal grp_copy_w3_fu_1266_ap_done : STD_LOGIC;
    signal grp_copy_w3_fu_1266_ap_idle : STD_LOGIC;
    signal grp_copy_w3_fu_1266_ap_ready : STD_LOGIC;
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWVALID : STD_LOGIC;
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_WVALID : STD_LOGIC;
    signal grp_copy_w3_fu_1266_m_axi_in_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_WLAST : STD_LOGIC;
    signal grp_copy_w3_fu_1266_m_axi_in_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARVALID : STD_LOGIC;
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w3_fu_1266_m_axi_in_r_RREADY : STD_LOGIC;
    signal grp_copy_w3_fu_1266_m_axi_in_r_BREADY : STD_LOGIC;
    signal grp_copy_w3_fu_1266_out_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_copy_w3_fu_1266_out_r_ce0 : STD_LOGIC;
    signal grp_copy_w3_fu_1266_out_r_we0 : STD_LOGIC;
    signal grp_copy_w3_fu_1266_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w1_fu_1274_ap_start : STD_LOGIC;
    signal grp_copy_w1_fu_1274_ap_done : STD_LOGIC;
    signal grp_copy_w1_fu_1274_ap_idle : STD_LOGIC;
    signal grp_copy_w1_fu_1274_ap_ready : STD_LOGIC;
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWVALID : STD_LOGIC;
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_WVALID : STD_LOGIC;
    signal grp_copy_w1_fu_1274_m_axi_in_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_WLAST : STD_LOGIC;
    signal grp_copy_w1_fu_1274_m_axi_in_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARVALID : STD_LOGIC;
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_w1_fu_1274_m_axi_in_r_RREADY : STD_LOGIC;
    signal grp_copy_w1_fu_1274_m_axi_in_r_BREADY : STD_LOGIC;
    signal grp_copy_w1_fu_1274_out_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_copy_w1_fu_1274_out_0_ce0 : STD_LOGIC;
    signal grp_copy_w1_fu_1274_out_0_we0 : STD_LOGIC;
    signal grp_copy_w1_fu_1274_out_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_i_fu_1282_ap_start : STD_LOGIC;
    signal grp_copy_i_fu_1282_ap_done : STD_LOGIC;
    signal grp_copy_i_fu_1282_ap_idle : STD_LOGIC;
    signal grp_copy_i_fu_1282_ap_ready : STD_LOGIC;
    signal grp_copy_i_fu_1282_m_axi_in_r_AWVALID : STD_LOGIC;
    signal grp_copy_i_fu_1282_m_axi_in_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_WVALID : STD_LOGIC;
    signal grp_copy_i_fu_1282_m_axi_in_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_WLAST : STD_LOGIC;
    signal grp_copy_i_fu_1282_m_axi_in_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARVALID : STD_LOGIC;
    signal grp_copy_i_fu_1282_m_axi_in_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_i_fu_1282_m_axi_in_r_RREADY : STD_LOGIC;
    signal grp_copy_i_fu_1282_m_axi_in_r_BREADY : STD_LOGIC;
    signal grp_copy_i_fu_1282_out_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_copy_i_fu_1282_out_0_ce0 : STD_LOGIC;
    signal grp_copy_i_fu_1282_out_0_we0 : STD_LOGIC;
    signal grp_copy_i_fu_1282_out_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b5_fu_1290_ap_start : STD_LOGIC;
    signal grp_copy_b5_fu_1290_ap_done : STD_LOGIC;
    signal grp_copy_b5_fu_1290_ap_idle : STD_LOGIC;
    signal grp_copy_b5_fu_1290_ap_ready : STD_LOGIC;
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWVALID : STD_LOGIC;
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_WVALID : STD_LOGIC;
    signal grp_copy_b5_fu_1290_m_axi_in_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_WLAST : STD_LOGIC;
    signal grp_copy_b5_fu_1290_m_axi_in_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARVALID : STD_LOGIC;
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b5_fu_1290_m_axi_in_r_RREADY : STD_LOGIC;
    signal grp_copy_b5_fu_1290_m_axi_in_r_BREADY : STD_LOGIC;
    signal grp_copy_b5_fu_1290_out_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_copy_b5_fu_1290_out_r_ce0 : STD_LOGIC;
    signal grp_copy_b5_fu_1290_out_r_we0 : STD_LOGIC;
    signal grp_copy_b5_fu_1290_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b3_fu_1298_ap_start : STD_LOGIC;
    signal grp_copy_b3_fu_1298_ap_done : STD_LOGIC;
    signal grp_copy_b3_fu_1298_ap_idle : STD_LOGIC;
    signal grp_copy_b3_fu_1298_ap_ready : STD_LOGIC;
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWVALID : STD_LOGIC;
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_WVALID : STD_LOGIC;
    signal grp_copy_b3_fu_1298_m_axi_in_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_WLAST : STD_LOGIC;
    signal grp_copy_b3_fu_1298_m_axi_in_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARVALID : STD_LOGIC;
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b3_fu_1298_m_axi_in_r_RREADY : STD_LOGIC;
    signal grp_copy_b3_fu_1298_m_axi_in_r_BREADY : STD_LOGIC;
    signal grp_copy_b3_fu_1298_out_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b3_fu_1298_out_r_ce0 : STD_LOGIC;
    signal grp_copy_b3_fu_1298_out_r_we0 : STD_LOGIC;
    signal grp_copy_b3_fu_1298_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b1_fu_1306_ap_start : STD_LOGIC;
    signal grp_copy_b1_fu_1306_ap_done : STD_LOGIC;
    signal grp_copy_b1_fu_1306_ap_idle : STD_LOGIC;
    signal grp_copy_b1_fu_1306_ap_ready : STD_LOGIC;
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWVALID : STD_LOGIC;
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_WVALID : STD_LOGIC;
    signal grp_copy_b1_fu_1306_m_axi_in_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_WLAST : STD_LOGIC;
    signal grp_copy_b1_fu_1306_m_axi_in_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARVALID : STD_LOGIC;
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_b1_fu_1306_m_axi_in_r_RREADY : STD_LOGIC;
    signal grp_copy_b1_fu_1306_m_axi_in_r_BREADY : STD_LOGIC;
    signal grp_copy_b1_fu_1306_out_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_b1_fu_1306_out_r_ce0 : STD_LOGIC;
    signal grp_copy_b1_fu_1306_out_r_we0 : STD_LOGIC;
    signal grp_copy_b1_fu_1306_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_out_fu_1314_ap_start : STD_LOGIC;
    signal grp_copy_out_fu_1314_ap_done : STD_LOGIC;
    signal grp_copy_out_fu_1314_ap_idle : STD_LOGIC;
    signal grp_copy_out_fu_1314_ap_ready : STD_LOGIC;
    signal grp_copy_out_fu_1314_m_axi_out_r_AWVALID : STD_LOGIC;
    signal grp_copy_out_fu_1314_m_axi_out_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_WVALID : STD_LOGIC;
    signal grp_copy_out_fu_1314_m_axi_out_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_WLAST : STD_LOGIC;
    signal grp_copy_out_fu_1314_m_axi_out_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARVALID : STD_LOGIC;
    signal grp_copy_out_fu_1314_m_axi_out_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_out_fu_1314_m_axi_out_r_RREADY : STD_LOGIC;
    signal grp_copy_out_fu_1314_m_axi_out_r_BREADY : STD_LOGIC;
    signal grp_copy_out_fu_1314_fc6_o_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_out_fu_1314_fc6_o_ce0 : STD_LOGIC;
    signal invdar3_reg_771 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_1508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar7_reg_783 : STD_LOGIC_VECTOR (4 downto 0);
    signal invdar1_reg_794 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar4_reg_806 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar5_reg_818 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar6_reg_829 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_1628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar8_reg_840 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_1766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar9_reg_852 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar_reg_864 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar2_reg_876 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar10_reg_887 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar11_reg_898 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_1914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar12_reg_910 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar13_reg_922 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar14_reg_934 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar15_reg_945 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_1931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar16_reg_956 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_1999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_1993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar17_reg_968 : STD_LOGIC_VECTOR (6 downto 0);
    signal invdar18_reg_979 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i_reg_990 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_state29_on_subcall_done : BOOLEAN;
    signal exitcond2_i_fu_2083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_reg_1001 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_i_phi_fu_1017_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_i_fu_2057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_i_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal i_i1_reg_1025 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_i2_reg_1036 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal exitcond1_i_fu_2211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i1_reg_1047 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_i2_fu_2238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_i1_fu_2160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_i_reg_1058 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal i_i3_reg_1069 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal exitcond1_i1_fu_2383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i2_reg_1080 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i3_fu_2410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_i2_fu_2332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_i1_reg_1091 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal i_i4_reg_1102 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal exitcond1_i2_fu_2547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i3_reg_1113 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i5_fu_2574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_i3_fu_2500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_i2_reg_1124 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal i_i5_reg_1135 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal exitcond1_i3_fu_2695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i4_reg_1146 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_i6_fu_2722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_i4_fu_2656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_i3_reg_1157 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal i_i6_reg_1168 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal n_i_reg_1179 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal tmp_i_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_i_reg_1202 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_grp_convolution3_fu_1213_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_convolution1_fu_1223_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_convolution5_fu_1232_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_max_pooling2_fu_1242_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_max_pooling4_fu_1250_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_copy_w5_fu_1258_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_copy_w3_fu_1266_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_copy_w1_fu_1274_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_copy_i_fu_1282_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_copy_b5_fu_1290_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_copy_b3_fu_1298_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_copy_b1_fu_1306_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_copy_out_fu_1314_ap_start : STD_LOGIC := '0';
    signal tmp_50_fu_1491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_cast_fu_1588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar6_cast_fu_1617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_cast_fu_1743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar10_cast_fu_1778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_cast_fu_1885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar15_cast_fu_1920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_cast_fu_1982_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar18_cast_fu_2005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_cast_fu_2078_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_cast_fu_2104_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_cast_fu_2232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_cast_fu_2404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_cast_fu_2568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_123_cast_fu_2716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_cast_fu_2908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_i_cast1_fu_2894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_1347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_1367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_DATA_START_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_DATA_DONE_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_DATA_DONE_AWREADY : STD_LOGIC;
    signal ap_block_state88_on_subcall_done : BOOLEAN;
    signal ap_reg_ioackin_DATA_DONE_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_DATA_DONE_WREADY : STD_LOGIC;
    signal grp_fu_1323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_fu_1332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal start1_fu_1337_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal done1_fu_1357_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_49_fu_1483_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_fu_1518_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_1526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar1_cast_fu_1514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar4_cast_fu_1542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_1546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_1555_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_fu_1551_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_1559_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal invdar5_cast_cast_fu_1579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_57_fu_1583_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_fu_1634_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_59_fu_1646_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_1642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_1654_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar9_cast_fu_1670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_1674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_1679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_cast_fu_1697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_1701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_1710_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_65_fu_1706_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_1714_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal invdar2_cast_cast_fu_1734_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_68_fu_1738_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_69_fu_1801_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_71_fu_1813_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_fu_1823_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_1809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar13_cast_fu_1839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_1843_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_1852_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_74_fu_1848_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl7_cast_fu_1856_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal invdar14_cast_cast_fu_1876_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_77_fu_1880_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_78_fu_1937_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_fu_1949_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_cast_fu_1945_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_cast_fu_1957_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal invdar17_cast_cast_fu_1973_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_81_fu_1977_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_82_fu_2027_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_83_fu_2039_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl10_cast_fu_2031_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl11_cast_fu_2047_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_i_cast_cast_fu_2069_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal l_i_cast_cast_fu_2095_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_fu_2099_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_86_fu_2126_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_fu_2138_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl12_cast_fu_2134_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl13_cast_fu_2146_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_88_fu_2150_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_i1_cast_cast_fu_2172_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_93_fu_2176_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_94_fu_2181_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_95_fu_2193_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl16_cast_fu_2185_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl17_cast_fu_2201_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_i_cast_cast_fu_2223_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_104_fu_2227_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_assign_to_int_fu_2250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_2253_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_105_fu_2263_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_2273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_2267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_2279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_2285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_2298_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_91_fu_2310_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl14_cast_fu_2306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl15_cast_fu_2318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_2322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_i2_cast_cast_fu_2344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_100_fu_2348_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_fu_2353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_2365_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl20_cast_fu_2357_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl21_cast_fu_2373_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_i1_cast_cast_fu_2395_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_111_fu_2399_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_assign_2_to_in_fu_2422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_2425_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_112_fu_2435_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_2445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_2439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_2451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_2457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_2470_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_2482_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl19_cast_fu_2490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl18_cast_fu_2478_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_i3_cast8_cast_fu_2512_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_108_fu_2516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_fu_2529_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl23_cast_fu_2521_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl24_cast_fu_2537_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_i2_cast7_cast_fu_2559_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_115_fu_2563_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_assign_6_to_in_fu_2586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_2589_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_117_fu_2599_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_2609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_2603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_2615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_2621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_2638_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_i5_cast6_cast_fu_2634_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl22_cast_fu_2646_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_i4_cast5_cast_fu_2668_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_113_fu_2672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_cast_fu_2677_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl25_cast_fu_2681_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_i3_cast4_cast_fu_2707_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_121_fu_2711_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_assign_8_to_in_fu_2734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_2737_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_fu_2747_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_2757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_2751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_2763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_2769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_assign_4_to_in_fu_2799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_2802_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_fu_2812_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_2822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_2816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_2828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_2834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_2852_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_119_fu_2864_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl26_cast_fu_2860_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl27_cast_fu_2872_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_i_cast1_cast_fu_2899_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_123_fu_2903_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (93 downto 0);

    component convolution3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv3_w_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv3_w_ce0 : OUT STD_LOGIC;
        conv3_w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv3_b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        conv3_b_ce0 : OUT STD_LOGIC;
        conv3_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p2_o_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        p2_o_2_ce0 : OUT STD_LOGIC;
        p2_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_w_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        conv1_w_0_ce0 : OUT STD_LOGIC;
        conv1_w_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_b_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        conv1_b_ce0 : OUT STD_LOGIC;
        conv1_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv5_w_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv5_w_ce0 : OUT STD_LOGIC;
        conv5_w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv5_b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        conv5_b_ce0 : OUT STD_LOGIC;
        conv5_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_0_0_ce0 : OUT STD_LOGIC;
        output_0_0_we0 : OUT STD_LOGIC;
        output_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p4_o_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        p4_o_2_ce0 : OUT STD_LOGIC;
        p4_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pooling2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c1_o_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        c1_o_2_ce0 : OUT STD_LOGIC;
        c1_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pooling4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c3_o_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        c3_o_2_ce0 : OUT STD_LOGIC;
        c3_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_w5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_r_AWVALID : OUT STD_LOGIC;
        m_axi_in_r_AWREADY : IN STD_LOGIC;
        m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WVALID : OUT STD_LOGIC;
        m_axi_in_r_WREADY : IN STD_LOGIC;
        m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_WLAST : OUT STD_LOGIC;
        m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARVALID : OUT STD_LOGIC;
        m_axi_in_r_ARREADY : IN STD_LOGIC;
        m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RVALID : IN STD_LOGIC;
        m_axi_in_r_RREADY : OUT STD_LOGIC;
        m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_RLAST : IN STD_LOGIC;
        m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BVALID : IN STD_LOGIC;
        m_axi_in_r_BREADY : OUT STD_LOGIC;
        m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        c5_w_i11 : IN STD_LOGIC_VECTOR (29 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_w3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_r_AWVALID : OUT STD_LOGIC;
        m_axi_in_r_AWREADY : IN STD_LOGIC;
        m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WVALID : OUT STD_LOGIC;
        m_axi_in_r_WREADY : IN STD_LOGIC;
        m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_WLAST : OUT STD_LOGIC;
        m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARVALID : OUT STD_LOGIC;
        m_axi_in_r_ARREADY : IN STD_LOGIC;
        m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RVALID : IN STD_LOGIC;
        m_axi_in_r_RREADY : OUT STD_LOGIC;
        m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_RLAST : IN STD_LOGIC;
        m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BVALID : IN STD_LOGIC;
        m_axi_in_r_BREADY : OUT STD_LOGIC;
        m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        c3_w_i7 : IN STD_LOGIC_VECTOR (29 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_w1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_r_AWVALID : OUT STD_LOGIC;
        m_axi_in_r_AWREADY : IN STD_LOGIC;
        m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WVALID : OUT STD_LOGIC;
        m_axi_in_r_WREADY : IN STD_LOGIC;
        m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_WLAST : OUT STD_LOGIC;
        m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARVALID : OUT STD_LOGIC;
        m_axi_in_r_ARREADY : IN STD_LOGIC;
        m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RVALID : IN STD_LOGIC;
        m_axi_in_r_RREADY : OUT STD_LOGIC;
        m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_RLAST : IN STD_LOGIC;
        m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BVALID : IN STD_LOGIC;
        m_axi_in_r_BREADY : OUT STD_LOGIC;
        m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        c1_w_i3 : IN STD_LOGIC_VECTOR (29 downto 0);
        out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_0_ce0 : OUT STD_LOGIC;
        out_0_we0 : OUT STD_LOGIC;
        out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_i IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_r_AWVALID : OUT STD_LOGIC;
        m_axi_in_r_AWREADY : IN STD_LOGIC;
        m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WVALID : OUT STD_LOGIC;
        m_axi_in_r_WREADY : IN STD_LOGIC;
        m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_WLAST : OUT STD_LOGIC;
        m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARVALID : OUT STD_LOGIC;
        m_axi_in_r_ARREADY : IN STD_LOGIC;
        m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RVALID : IN STD_LOGIC;
        m_axi_in_r_RREADY : OUT STD_LOGIC;
        m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_RLAST : IN STD_LOGIC;
        m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BVALID : IN STD_LOGIC;
        m_axi_in_r_BREADY : OUT STD_LOGIC;
        m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        image_in_i1 : IN STD_LOGIC_VECTOR (29 downto 0);
        out_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_0_ce0 : OUT STD_LOGIC;
        out_0_we0 : OUT STD_LOGIC;
        out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_b5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_r_AWVALID : OUT STD_LOGIC;
        m_axi_in_r_AWREADY : IN STD_LOGIC;
        m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WVALID : OUT STD_LOGIC;
        m_axi_in_r_WREADY : IN STD_LOGIC;
        m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_WLAST : OUT STD_LOGIC;
        m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARVALID : OUT STD_LOGIC;
        m_axi_in_r_ARREADY : IN STD_LOGIC;
        m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RVALID : IN STD_LOGIC;
        m_axi_in_r_RREADY : OUT STD_LOGIC;
        m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_RLAST : IN STD_LOGIC;
        m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BVALID : IN STD_LOGIC;
        m_axi_in_r_BREADY : OUT STD_LOGIC;
        m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        c5_b_i13 : IN STD_LOGIC_VECTOR (29 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_b3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_r_AWVALID : OUT STD_LOGIC;
        m_axi_in_r_AWREADY : IN STD_LOGIC;
        m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WVALID : OUT STD_LOGIC;
        m_axi_in_r_WREADY : IN STD_LOGIC;
        m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_WLAST : OUT STD_LOGIC;
        m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARVALID : OUT STD_LOGIC;
        m_axi_in_r_ARREADY : IN STD_LOGIC;
        m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RVALID : IN STD_LOGIC;
        m_axi_in_r_RREADY : OUT STD_LOGIC;
        m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_RLAST : IN STD_LOGIC;
        m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BVALID : IN STD_LOGIC;
        m_axi_in_r_BREADY : OUT STD_LOGIC;
        m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        c3_b_i9 : IN STD_LOGIC_VECTOR (29 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_b1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_r_AWVALID : OUT STD_LOGIC;
        m_axi_in_r_AWREADY : IN STD_LOGIC;
        m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WVALID : OUT STD_LOGIC;
        m_axi_in_r_WREADY : IN STD_LOGIC;
        m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_WLAST : OUT STD_LOGIC;
        m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARVALID : OUT STD_LOGIC;
        m_axi_in_r_ARREADY : IN STD_LOGIC;
        m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RVALID : IN STD_LOGIC;
        m_axi_in_r_RREADY : OUT STD_LOGIC;
        m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_r_RLAST : IN STD_LOGIC;
        m_axi_in_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BVALID : IN STD_LOGIC;
        m_axi_in_r_BREADY : OUT STD_LOGIC;
        m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        c1_b_i5 : IN STD_LOGIC_VECTOR (29 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component copy_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_out_r_AWVALID : OUT STD_LOGIC;
        m_axi_out_r_AWREADY : IN STD_LOGIC;
        m_axi_out_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_WVALID : OUT STD_LOGIC;
        m_axi_out_r_WREADY : IN STD_LOGIC;
        m_axi_out_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_r_WLAST : OUT STD_LOGIC;
        m_axi_out_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_ARVALID : OUT STD_LOGIC;
        m_axi_out_r_ARREADY : IN STD_LOGIC;
        m_axi_out_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_RVALID : IN STD_LOGIC;
        m_axi_out_r_RREADY : OUT STD_LOGIC;
        m_axi_out_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_r_RLAST : IN STD_LOGIC;
        m_axi_out_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_r_BVALID : IN STD_LOGIC;
        m_axi_out_r_BREADY : OUT STD_LOGIC;
        m_axi_out_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        fc6_o_o15 : IN STD_LOGIC_VECTOR (29 downto 0);
        fc6_o_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        fc6_o_ce0 : OUT STD_LOGIC;
        fc6_o_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fadbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fmucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fcmdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_c1_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_p2_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_c3_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_p4_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_c5_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fc6_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_imaocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_c1_pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_c1_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_c3_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_c3_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_c5_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_c5_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fc6qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fc6_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        image_in_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        c1_w_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        c1_b_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        c3_w_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        c3_b_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        c5_w_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        c5_b_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc6_o_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        done : OUT STD_LOGIC_VECTOR (31 downto 0);
        start : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_DATA_IMAGE_IN_I_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_C1_W_I_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_C1_B_I_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_C3_W_I_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_C3_B_I_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_FC6_W_I_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_FC6_B_I_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_FC6_O_O_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_DONE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_wrapper_DATA_START_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    c1_o_1_U : component lenet_wrapper_c1_eOg
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c1_o_1_address0,
        ce0 => c1_o_1_ce0,
        we0 => c1_o_1_we0,
        d0 => grp_convolution1_fu_1223_output_r_d0,
        q0 => c1_o_1_q0);

    c1_o_2_U : component lenet_wrapper_c1_eOg
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c1_o_2_address0,
        ce0 => c1_o_2_ce0,
        we0 => c1_o_2_we0,
        d0 => c1_o_2_d0,
        q0 => c1_o_2_q0);

    p2_o_1_U : component lenet_wrapper_p2_g8j
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p2_o_1_address0,
        ce0 => p2_o_1_ce0,
        we0 => p2_o_1_we0,
        d0 => grp_max_pooling2_fu_1242_output_r_d0,
        q0 => p2_o_1_q0);

    p2_o_2_U : component lenet_wrapper_p2_g8j
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p2_o_2_address0,
        ce0 => p2_o_2_ce0,
        we0 => p2_o_2_we0,
        d0 => p2_o_2_d0,
        q0 => p2_o_2_q0);

    c3_o_1_U : component lenet_wrapper_c3_ibs
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c3_o_1_address0,
        ce0 => c3_o_1_ce0,
        we0 => c3_o_1_we0,
        d0 => grp_convolution3_fu_1213_output_r_d0,
        q0 => c3_o_1_q0);

    c3_o_2_U : component lenet_wrapper_c3_ibs
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c3_o_2_address0,
        ce0 => c3_o_2_ce0,
        we0 => c3_o_2_we0,
        d0 => c3_o_2_d0,
        q0 => c3_o_2_q0);

    p4_o_1_U : component lenet_wrapper_p4_kbM
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p4_o_1_address0,
        ce0 => p4_o_1_ce0,
        we0 => p4_o_1_we0,
        d0 => grp_max_pooling4_fu_1250_output_r_d0,
        q0 => p4_o_1_q0);

    p4_o_2_U : component lenet_wrapper_p4_kbM
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p4_o_2_address0,
        ce0 => p4_o_2_ce0,
        we0 => p4_o_2_we0,
        d0 => p4_o_2_d0,
        q0 => p4_o_2_q0);

    c5_o_1_0_0_U : component lenet_wrapper_c5_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_o_1_0_0_address0,
        ce0 => c5_o_1_0_0_ce0,
        we0 => c5_o_1_0_0_we0,
        d0 => grp_convolution5_fu_1232_output_0_0_d0,
        q0 => c5_o_1_0_0_q0);

    c5_o_2_0_0_U : component lenet_wrapper_c5_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_o_2_0_0_address0,
        ce0 => c5_o_2_0_0_ce0,
        we0 => c5_o_2_0_0_we0,
        d0 => c5_o_2_0_0_d0,
        q0 => c5_o_2_0_0_q0);

    fc6_o_U : component lenet_wrapper_fc6_o
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc6_o_address0,
        ce0 => fc6_o_ce0,
        we0 => fc6_o_we0,
        d0 => tmp_i_66_reg_3556,
        q0 => fc6_o_q0);

    lenet_wrapper_AXILiteS_s_axi_U : component lenet_wrapper_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        image_in_i => image_in_i,
        c1_w_i => c1_w_i,
        c1_b_i => c1_b_i,
        c3_w_i => c3_w_i,
        c3_b_i => c3_b_i,
        c5_w_i => c5_w_i,
        c5_b_i => c5_b_i,
        fc6_o_o => fc6_o_o,
        done => done,
        start => start);

    lenet_wrapper_DATA_IMAGE_IN_I_m_axi_U : component lenet_wrapper_DATA_IMAGE_IN_I_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_IMAGE_IN_I_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_IMAGE_IN_I_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_IMAGE_IN_I_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_IMAGE_IN_I_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_IMAGE_IN_I_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_IMAGE_IN_I_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_IMAGE_IN_I_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_IMAGE_IN_I_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_IMAGE_IN_I_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_IMAGE_IN_I_AWVALID,
        AWREADY => m_axi_DATA_IMAGE_IN_I_AWREADY,
        AWADDR => m_axi_DATA_IMAGE_IN_I_AWADDR,
        AWID => m_axi_DATA_IMAGE_IN_I_AWID,
        AWLEN => m_axi_DATA_IMAGE_IN_I_AWLEN,
        AWSIZE => m_axi_DATA_IMAGE_IN_I_AWSIZE,
        AWBURST => m_axi_DATA_IMAGE_IN_I_AWBURST,
        AWLOCK => m_axi_DATA_IMAGE_IN_I_AWLOCK,
        AWCACHE => m_axi_DATA_IMAGE_IN_I_AWCACHE,
        AWPROT => m_axi_DATA_IMAGE_IN_I_AWPROT,
        AWQOS => m_axi_DATA_IMAGE_IN_I_AWQOS,
        AWREGION => m_axi_DATA_IMAGE_IN_I_AWREGION,
        AWUSER => m_axi_DATA_IMAGE_IN_I_AWUSER,
        WVALID => m_axi_DATA_IMAGE_IN_I_WVALID,
        WREADY => m_axi_DATA_IMAGE_IN_I_WREADY,
        WDATA => m_axi_DATA_IMAGE_IN_I_WDATA,
        WSTRB => m_axi_DATA_IMAGE_IN_I_WSTRB,
        WLAST => m_axi_DATA_IMAGE_IN_I_WLAST,
        WID => m_axi_DATA_IMAGE_IN_I_WID,
        WUSER => m_axi_DATA_IMAGE_IN_I_WUSER,
        ARVALID => m_axi_DATA_IMAGE_IN_I_ARVALID,
        ARREADY => m_axi_DATA_IMAGE_IN_I_ARREADY,
        ARADDR => m_axi_DATA_IMAGE_IN_I_ARADDR,
        ARID => m_axi_DATA_IMAGE_IN_I_ARID,
        ARLEN => m_axi_DATA_IMAGE_IN_I_ARLEN,
        ARSIZE => m_axi_DATA_IMAGE_IN_I_ARSIZE,
        ARBURST => m_axi_DATA_IMAGE_IN_I_ARBURST,
        ARLOCK => m_axi_DATA_IMAGE_IN_I_ARLOCK,
        ARCACHE => m_axi_DATA_IMAGE_IN_I_ARCACHE,
        ARPROT => m_axi_DATA_IMAGE_IN_I_ARPROT,
        ARQOS => m_axi_DATA_IMAGE_IN_I_ARQOS,
        ARREGION => m_axi_DATA_IMAGE_IN_I_ARREGION,
        ARUSER => m_axi_DATA_IMAGE_IN_I_ARUSER,
        RVALID => m_axi_DATA_IMAGE_IN_I_RVALID,
        RREADY => m_axi_DATA_IMAGE_IN_I_RREADY,
        RDATA => m_axi_DATA_IMAGE_IN_I_RDATA,
        RLAST => m_axi_DATA_IMAGE_IN_I_RLAST,
        RID => m_axi_DATA_IMAGE_IN_I_RID,
        RUSER => m_axi_DATA_IMAGE_IN_I_RUSER,
        RRESP => m_axi_DATA_IMAGE_IN_I_RRESP,
        BVALID => m_axi_DATA_IMAGE_IN_I_BVALID,
        BREADY => m_axi_DATA_IMAGE_IN_I_BREADY,
        BRESP => m_axi_DATA_IMAGE_IN_I_BRESP,
        BID => m_axi_DATA_IMAGE_IN_I_BID,
        BUSER => m_axi_DATA_IMAGE_IN_I_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_IMAGE_IN_I_ARVALID,
        I_ARREADY => DATA_IMAGE_IN_I_ARREADY,
        I_ARADDR => grp_copy_i_fu_1282_m_axi_in_r_ARADDR,
        I_ARID => grp_copy_i_fu_1282_m_axi_in_r_ARID,
        I_ARLEN => grp_copy_i_fu_1282_m_axi_in_r_ARLEN,
        I_ARSIZE => grp_copy_i_fu_1282_m_axi_in_r_ARSIZE,
        I_ARLOCK => grp_copy_i_fu_1282_m_axi_in_r_ARLOCK,
        I_ARCACHE => grp_copy_i_fu_1282_m_axi_in_r_ARCACHE,
        I_ARQOS => grp_copy_i_fu_1282_m_axi_in_r_ARQOS,
        I_ARPROT => grp_copy_i_fu_1282_m_axi_in_r_ARPROT,
        I_ARUSER => grp_copy_i_fu_1282_m_axi_in_r_ARUSER,
        I_ARBURST => grp_copy_i_fu_1282_m_axi_in_r_ARBURST,
        I_ARREGION => grp_copy_i_fu_1282_m_axi_in_r_ARREGION,
        I_RVALID => DATA_IMAGE_IN_I_RVALID,
        I_RREADY => DATA_IMAGE_IN_I_RREADY,
        I_RDATA => DATA_IMAGE_IN_I_RDATA,
        I_RID => DATA_IMAGE_IN_I_RID,
        I_RUSER => DATA_IMAGE_IN_I_RUSER,
        I_RRESP => DATA_IMAGE_IN_I_RRESP,
        I_RLAST => DATA_IMAGE_IN_I_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_IMAGE_IN_I_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_IMAGE_IN_I_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_IMAGE_IN_I_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_IMAGE_IN_I_BRESP,
        I_BID => DATA_IMAGE_IN_I_BID,
        I_BUSER => DATA_IMAGE_IN_I_BUSER);

    lenet_wrapper_DATA_C1_W_I_m_axi_U : component lenet_wrapper_DATA_C1_W_I_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_C1_W_I_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_C1_W_I_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_C1_W_I_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_C1_W_I_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_C1_W_I_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_C1_W_I_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_C1_W_I_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_C1_W_I_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_C1_W_I_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_C1_W_I_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_C1_W_I_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_C1_W_I_AWVALID,
        AWREADY => m_axi_DATA_C1_W_I_AWREADY,
        AWADDR => m_axi_DATA_C1_W_I_AWADDR,
        AWID => m_axi_DATA_C1_W_I_AWID,
        AWLEN => m_axi_DATA_C1_W_I_AWLEN,
        AWSIZE => m_axi_DATA_C1_W_I_AWSIZE,
        AWBURST => m_axi_DATA_C1_W_I_AWBURST,
        AWLOCK => m_axi_DATA_C1_W_I_AWLOCK,
        AWCACHE => m_axi_DATA_C1_W_I_AWCACHE,
        AWPROT => m_axi_DATA_C1_W_I_AWPROT,
        AWQOS => m_axi_DATA_C1_W_I_AWQOS,
        AWREGION => m_axi_DATA_C1_W_I_AWREGION,
        AWUSER => m_axi_DATA_C1_W_I_AWUSER,
        WVALID => m_axi_DATA_C1_W_I_WVALID,
        WREADY => m_axi_DATA_C1_W_I_WREADY,
        WDATA => m_axi_DATA_C1_W_I_WDATA,
        WSTRB => m_axi_DATA_C1_W_I_WSTRB,
        WLAST => m_axi_DATA_C1_W_I_WLAST,
        WID => m_axi_DATA_C1_W_I_WID,
        WUSER => m_axi_DATA_C1_W_I_WUSER,
        ARVALID => m_axi_DATA_C1_W_I_ARVALID,
        ARREADY => m_axi_DATA_C1_W_I_ARREADY,
        ARADDR => m_axi_DATA_C1_W_I_ARADDR,
        ARID => m_axi_DATA_C1_W_I_ARID,
        ARLEN => m_axi_DATA_C1_W_I_ARLEN,
        ARSIZE => m_axi_DATA_C1_W_I_ARSIZE,
        ARBURST => m_axi_DATA_C1_W_I_ARBURST,
        ARLOCK => m_axi_DATA_C1_W_I_ARLOCK,
        ARCACHE => m_axi_DATA_C1_W_I_ARCACHE,
        ARPROT => m_axi_DATA_C1_W_I_ARPROT,
        ARQOS => m_axi_DATA_C1_W_I_ARQOS,
        ARREGION => m_axi_DATA_C1_W_I_ARREGION,
        ARUSER => m_axi_DATA_C1_W_I_ARUSER,
        RVALID => m_axi_DATA_C1_W_I_RVALID,
        RREADY => m_axi_DATA_C1_W_I_RREADY,
        RDATA => m_axi_DATA_C1_W_I_RDATA,
        RLAST => m_axi_DATA_C1_W_I_RLAST,
        RID => m_axi_DATA_C1_W_I_RID,
        RUSER => m_axi_DATA_C1_W_I_RUSER,
        RRESP => m_axi_DATA_C1_W_I_RRESP,
        BVALID => m_axi_DATA_C1_W_I_BVALID,
        BREADY => m_axi_DATA_C1_W_I_BREADY,
        BRESP => m_axi_DATA_C1_W_I_BRESP,
        BID => m_axi_DATA_C1_W_I_BID,
        BUSER => m_axi_DATA_C1_W_I_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_C1_W_I_ARVALID,
        I_ARREADY => DATA_C1_W_I_ARREADY,
        I_ARADDR => grp_copy_w1_fu_1274_m_axi_in_r_ARADDR,
        I_ARID => grp_copy_w1_fu_1274_m_axi_in_r_ARID,
        I_ARLEN => grp_copy_w1_fu_1274_m_axi_in_r_ARLEN,
        I_ARSIZE => grp_copy_w1_fu_1274_m_axi_in_r_ARSIZE,
        I_ARLOCK => grp_copy_w1_fu_1274_m_axi_in_r_ARLOCK,
        I_ARCACHE => grp_copy_w1_fu_1274_m_axi_in_r_ARCACHE,
        I_ARQOS => grp_copy_w1_fu_1274_m_axi_in_r_ARQOS,
        I_ARPROT => grp_copy_w1_fu_1274_m_axi_in_r_ARPROT,
        I_ARUSER => grp_copy_w1_fu_1274_m_axi_in_r_ARUSER,
        I_ARBURST => grp_copy_w1_fu_1274_m_axi_in_r_ARBURST,
        I_ARREGION => grp_copy_w1_fu_1274_m_axi_in_r_ARREGION,
        I_RVALID => DATA_C1_W_I_RVALID,
        I_RREADY => DATA_C1_W_I_RREADY,
        I_RDATA => DATA_C1_W_I_RDATA,
        I_RID => DATA_C1_W_I_RID,
        I_RUSER => DATA_C1_W_I_RUSER,
        I_RRESP => DATA_C1_W_I_RRESP,
        I_RLAST => DATA_C1_W_I_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_C1_W_I_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_C1_W_I_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_C1_W_I_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_C1_W_I_BRESP,
        I_BID => DATA_C1_W_I_BID,
        I_BUSER => DATA_C1_W_I_BUSER);

    lenet_wrapper_DATA_C1_B_I_m_axi_U : component lenet_wrapper_DATA_C1_B_I_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_C1_B_I_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_C1_B_I_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_C1_B_I_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_C1_B_I_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_C1_B_I_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_C1_B_I_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_C1_B_I_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_C1_B_I_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_C1_B_I_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_C1_B_I_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_C1_B_I_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_C1_B_I_AWVALID,
        AWREADY => m_axi_DATA_C1_B_I_AWREADY,
        AWADDR => m_axi_DATA_C1_B_I_AWADDR,
        AWID => m_axi_DATA_C1_B_I_AWID,
        AWLEN => m_axi_DATA_C1_B_I_AWLEN,
        AWSIZE => m_axi_DATA_C1_B_I_AWSIZE,
        AWBURST => m_axi_DATA_C1_B_I_AWBURST,
        AWLOCK => m_axi_DATA_C1_B_I_AWLOCK,
        AWCACHE => m_axi_DATA_C1_B_I_AWCACHE,
        AWPROT => m_axi_DATA_C1_B_I_AWPROT,
        AWQOS => m_axi_DATA_C1_B_I_AWQOS,
        AWREGION => m_axi_DATA_C1_B_I_AWREGION,
        AWUSER => m_axi_DATA_C1_B_I_AWUSER,
        WVALID => m_axi_DATA_C1_B_I_WVALID,
        WREADY => m_axi_DATA_C1_B_I_WREADY,
        WDATA => m_axi_DATA_C1_B_I_WDATA,
        WSTRB => m_axi_DATA_C1_B_I_WSTRB,
        WLAST => m_axi_DATA_C1_B_I_WLAST,
        WID => m_axi_DATA_C1_B_I_WID,
        WUSER => m_axi_DATA_C1_B_I_WUSER,
        ARVALID => m_axi_DATA_C1_B_I_ARVALID,
        ARREADY => m_axi_DATA_C1_B_I_ARREADY,
        ARADDR => m_axi_DATA_C1_B_I_ARADDR,
        ARID => m_axi_DATA_C1_B_I_ARID,
        ARLEN => m_axi_DATA_C1_B_I_ARLEN,
        ARSIZE => m_axi_DATA_C1_B_I_ARSIZE,
        ARBURST => m_axi_DATA_C1_B_I_ARBURST,
        ARLOCK => m_axi_DATA_C1_B_I_ARLOCK,
        ARCACHE => m_axi_DATA_C1_B_I_ARCACHE,
        ARPROT => m_axi_DATA_C1_B_I_ARPROT,
        ARQOS => m_axi_DATA_C1_B_I_ARQOS,
        ARREGION => m_axi_DATA_C1_B_I_ARREGION,
        ARUSER => m_axi_DATA_C1_B_I_ARUSER,
        RVALID => m_axi_DATA_C1_B_I_RVALID,
        RREADY => m_axi_DATA_C1_B_I_RREADY,
        RDATA => m_axi_DATA_C1_B_I_RDATA,
        RLAST => m_axi_DATA_C1_B_I_RLAST,
        RID => m_axi_DATA_C1_B_I_RID,
        RUSER => m_axi_DATA_C1_B_I_RUSER,
        RRESP => m_axi_DATA_C1_B_I_RRESP,
        BVALID => m_axi_DATA_C1_B_I_BVALID,
        BREADY => m_axi_DATA_C1_B_I_BREADY,
        BRESP => m_axi_DATA_C1_B_I_BRESP,
        BID => m_axi_DATA_C1_B_I_BID,
        BUSER => m_axi_DATA_C1_B_I_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_C1_B_I_ARVALID,
        I_ARREADY => DATA_C1_B_I_ARREADY,
        I_ARADDR => grp_copy_b1_fu_1306_m_axi_in_r_ARADDR,
        I_ARID => grp_copy_b1_fu_1306_m_axi_in_r_ARID,
        I_ARLEN => grp_copy_b1_fu_1306_m_axi_in_r_ARLEN,
        I_ARSIZE => grp_copy_b1_fu_1306_m_axi_in_r_ARSIZE,
        I_ARLOCK => grp_copy_b1_fu_1306_m_axi_in_r_ARLOCK,
        I_ARCACHE => grp_copy_b1_fu_1306_m_axi_in_r_ARCACHE,
        I_ARQOS => grp_copy_b1_fu_1306_m_axi_in_r_ARQOS,
        I_ARPROT => grp_copy_b1_fu_1306_m_axi_in_r_ARPROT,
        I_ARUSER => grp_copy_b1_fu_1306_m_axi_in_r_ARUSER,
        I_ARBURST => grp_copy_b1_fu_1306_m_axi_in_r_ARBURST,
        I_ARREGION => grp_copy_b1_fu_1306_m_axi_in_r_ARREGION,
        I_RVALID => DATA_C1_B_I_RVALID,
        I_RREADY => DATA_C1_B_I_RREADY,
        I_RDATA => DATA_C1_B_I_RDATA,
        I_RID => DATA_C1_B_I_RID,
        I_RUSER => DATA_C1_B_I_RUSER,
        I_RRESP => DATA_C1_B_I_RRESP,
        I_RLAST => DATA_C1_B_I_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_C1_B_I_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_C1_B_I_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_C1_B_I_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_C1_B_I_BRESP,
        I_BID => DATA_C1_B_I_BID,
        I_BUSER => DATA_C1_B_I_BUSER);

    lenet_wrapper_DATA_C3_W_I_m_axi_U : component lenet_wrapper_DATA_C3_W_I_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_C3_W_I_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_C3_W_I_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_C3_W_I_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_C3_W_I_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_C3_W_I_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_C3_W_I_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_C3_W_I_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_C3_W_I_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_C3_W_I_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_C3_W_I_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_C3_W_I_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_C3_W_I_AWVALID,
        AWREADY => m_axi_DATA_C3_W_I_AWREADY,
        AWADDR => m_axi_DATA_C3_W_I_AWADDR,
        AWID => m_axi_DATA_C3_W_I_AWID,
        AWLEN => m_axi_DATA_C3_W_I_AWLEN,
        AWSIZE => m_axi_DATA_C3_W_I_AWSIZE,
        AWBURST => m_axi_DATA_C3_W_I_AWBURST,
        AWLOCK => m_axi_DATA_C3_W_I_AWLOCK,
        AWCACHE => m_axi_DATA_C3_W_I_AWCACHE,
        AWPROT => m_axi_DATA_C3_W_I_AWPROT,
        AWQOS => m_axi_DATA_C3_W_I_AWQOS,
        AWREGION => m_axi_DATA_C3_W_I_AWREGION,
        AWUSER => m_axi_DATA_C3_W_I_AWUSER,
        WVALID => m_axi_DATA_C3_W_I_WVALID,
        WREADY => m_axi_DATA_C3_W_I_WREADY,
        WDATA => m_axi_DATA_C3_W_I_WDATA,
        WSTRB => m_axi_DATA_C3_W_I_WSTRB,
        WLAST => m_axi_DATA_C3_W_I_WLAST,
        WID => m_axi_DATA_C3_W_I_WID,
        WUSER => m_axi_DATA_C3_W_I_WUSER,
        ARVALID => m_axi_DATA_C3_W_I_ARVALID,
        ARREADY => m_axi_DATA_C3_W_I_ARREADY,
        ARADDR => m_axi_DATA_C3_W_I_ARADDR,
        ARID => m_axi_DATA_C3_W_I_ARID,
        ARLEN => m_axi_DATA_C3_W_I_ARLEN,
        ARSIZE => m_axi_DATA_C3_W_I_ARSIZE,
        ARBURST => m_axi_DATA_C3_W_I_ARBURST,
        ARLOCK => m_axi_DATA_C3_W_I_ARLOCK,
        ARCACHE => m_axi_DATA_C3_W_I_ARCACHE,
        ARPROT => m_axi_DATA_C3_W_I_ARPROT,
        ARQOS => m_axi_DATA_C3_W_I_ARQOS,
        ARREGION => m_axi_DATA_C3_W_I_ARREGION,
        ARUSER => m_axi_DATA_C3_W_I_ARUSER,
        RVALID => m_axi_DATA_C3_W_I_RVALID,
        RREADY => m_axi_DATA_C3_W_I_RREADY,
        RDATA => m_axi_DATA_C3_W_I_RDATA,
        RLAST => m_axi_DATA_C3_W_I_RLAST,
        RID => m_axi_DATA_C3_W_I_RID,
        RUSER => m_axi_DATA_C3_W_I_RUSER,
        RRESP => m_axi_DATA_C3_W_I_RRESP,
        BVALID => m_axi_DATA_C3_W_I_BVALID,
        BREADY => m_axi_DATA_C3_W_I_BREADY,
        BRESP => m_axi_DATA_C3_W_I_BRESP,
        BID => m_axi_DATA_C3_W_I_BID,
        BUSER => m_axi_DATA_C3_W_I_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_C3_W_I_ARVALID,
        I_ARREADY => DATA_C3_W_I_ARREADY,
        I_ARADDR => grp_copy_w3_fu_1266_m_axi_in_r_ARADDR,
        I_ARID => grp_copy_w3_fu_1266_m_axi_in_r_ARID,
        I_ARLEN => grp_copy_w3_fu_1266_m_axi_in_r_ARLEN,
        I_ARSIZE => grp_copy_w3_fu_1266_m_axi_in_r_ARSIZE,
        I_ARLOCK => grp_copy_w3_fu_1266_m_axi_in_r_ARLOCK,
        I_ARCACHE => grp_copy_w3_fu_1266_m_axi_in_r_ARCACHE,
        I_ARQOS => grp_copy_w3_fu_1266_m_axi_in_r_ARQOS,
        I_ARPROT => grp_copy_w3_fu_1266_m_axi_in_r_ARPROT,
        I_ARUSER => grp_copy_w3_fu_1266_m_axi_in_r_ARUSER,
        I_ARBURST => grp_copy_w3_fu_1266_m_axi_in_r_ARBURST,
        I_ARREGION => grp_copy_w3_fu_1266_m_axi_in_r_ARREGION,
        I_RVALID => DATA_C3_W_I_RVALID,
        I_RREADY => DATA_C3_W_I_RREADY,
        I_RDATA => DATA_C3_W_I_RDATA,
        I_RID => DATA_C3_W_I_RID,
        I_RUSER => DATA_C3_W_I_RUSER,
        I_RRESP => DATA_C3_W_I_RRESP,
        I_RLAST => DATA_C3_W_I_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_C3_W_I_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_C3_W_I_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_C3_W_I_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_C3_W_I_BRESP,
        I_BID => DATA_C3_W_I_BID,
        I_BUSER => DATA_C3_W_I_BUSER);

    lenet_wrapper_DATA_C3_B_I_m_axi_U : component lenet_wrapper_DATA_C3_B_I_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_C3_B_I_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_C3_B_I_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_C3_B_I_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_C3_B_I_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_C3_B_I_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_C3_B_I_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_C3_B_I_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_C3_B_I_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_C3_B_I_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_C3_B_I_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_C3_B_I_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_C3_B_I_AWVALID,
        AWREADY => m_axi_DATA_C3_B_I_AWREADY,
        AWADDR => m_axi_DATA_C3_B_I_AWADDR,
        AWID => m_axi_DATA_C3_B_I_AWID,
        AWLEN => m_axi_DATA_C3_B_I_AWLEN,
        AWSIZE => m_axi_DATA_C3_B_I_AWSIZE,
        AWBURST => m_axi_DATA_C3_B_I_AWBURST,
        AWLOCK => m_axi_DATA_C3_B_I_AWLOCK,
        AWCACHE => m_axi_DATA_C3_B_I_AWCACHE,
        AWPROT => m_axi_DATA_C3_B_I_AWPROT,
        AWQOS => m_axi_DATA_C3_B_I_AWQOS,
        AWREGION => m_axi_DATA_C3_B_I_AWREGION,
        AWUSER => m_axi_DATA_C3_B_I_AWUSER,
        WVALID => m_axi_DATA_C3_B_I_WVALID,
        WREADY => m_axi_DATA_C3_B_I_WREADY,
        WDATA => m_axi_DATA_C3_B_I_WDATA,
        WSTRB => m_axi_DATA_C3_B_I_WSTRB,
        WLAST => m_axi_DATA_C3_B_I_WLAST,
        WID => m_axi_DATA_C3_B_I_WID,
        WUSER => m_axi_DATA_C3_B_I_WUSER,
        ARVALID => m_axi_DATA_C3_B_I_ARVALID,
        ARREADY => m_axi_DATA_C3_B_I_ARREADY,
        ARADDR => m_axi_DATA_C3_B_I_ARADDR,
        ARID => m_axi_DATA_C3_B_I_ARID,
        ARLEN => m_axi_DATA_C3_B_I_ARLEN,
        ARSIZE => m_axi_DATA_C3_B_I_ARSIZE,
        ARBURST => m_axi_DATA_C3_B_I_ARBURST,
        ARLOCK => m_axi_DATA_C3_B_I_ARLOCK,
        ARCACHE => m_axi_DATA_C3_B_I_ARCACHE,
        ARPROT => m_axi_DATA_C3_B_I_ARPROT,
        ARQOS => m_axi_DATA_C3_B_I_ARQOS,
        ARREGION => m_axi_DATA_C3_B_I_ARREGION,
        ARUSER => m_axi_DATA_C3_B_I_ARUSER,
        RVALID => m_axi_DATA_C3_B_I_RVALID,
        RREADY => m_axi_DATA_C3_B_I_RREADY,
        RDATA => m_axi_DATA_C3_B_I_RDATA,
        RLAST => m_axi_DATA_C3_B_I_RLAST,
        RID => m_axi_DATA_C3_B_I_RID,
        RUSER => m_axi_DATA_C3_B_I_RUSER,
        RRESP => m_axi_DATA_C3_B_I_RRESP,
        BVALID => m_axi_DATA_C3_B_I_BVALID,
        BREADY => m_axi_DATA_C3_B_I_BREADY,
        BRESP => m_axi_DATA_C3_B_I_BRESP,
        BID => m_axi_DATA_C3_B_I_BID,
        BUSER => m_axi_DATA_C3_B_I_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_C3_B_I_ARVALID,
        I_ARREADY => DATA_C3_B_I_ARREADY,
        I_ARADDR => grp_copy_b3_fu_1298_m_axi_in_r_ARADDR,
        I_ARID => grp_copy_b3_fu_1298_m_axi_in_r_ARID,
        I_ARLEN => grp_copy_b3_fu_1298_m_axi_in_r_ARLEN,
        I_ARSIZE => grp_copy_b3_fu_1298_m_axi_in_r_ARSIZE,
        I_ARLOCK => grp_copy_b3_fu_1298_m_axi_in_r_ARLOCK,
        I_ARCACHE => grp_copy_b3_fu_1298_m_axi_in_r_ARCACHE,
        I_ARQOS => grp_copy_b3_fu_1298_m_axi_in_r_ARQOS,
        I_ARPROT => grp_copy_b3_fu_1298_m_axi_in_r_ARPROT,
        I_ARUSER => grp_copy_b3_fu_1298_m_axi_in_r_ARUSER,
        I_ARBURST => grp_copy_b3_fu_1298_m_axi_in_r_ARBURST,
        I_ARREGION => grp_copy_b3_fu_1298_m_axi_in_r_ARREGION,
        I_RVALID => DATA_C3_B_I_RVALID,
        I_RREADY => DATA_C3_B_I_RREADY,
        I_RDATA => DATA_C3_B_I_RDATA,
        I_RID => DATA_C3_B_I_RID,
        I_RUSER => DATA_C3_B_I_RUSER,
        I_RRESP => DATA_C3_B_I_RRESP,
        I_RLAST => DATA_C3_B_I_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_C3_B_I_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_C3_B_I_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_C3_B_I_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_C3_B_I_BRESP,
        I_BID => DATA_C3_B_I_BID,
        I_BUSER => DATA_C3_B_I_BUSER);

    lenet_wrapper_DATA_FC6_W_I_m_axi_U : component lenet_wrapper_DATA_FC6_W_I_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_FC6_W_I_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_FC6_W_I_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_FC6_W_I_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_FC6_W_I_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_FC6_W_I_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_FC6_W_I_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_FC6_W_I_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_FC6_W_I_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_FC6_W_I_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_FC6_W_I_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_FC6_W_I_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_FC6_W_I_AWVALID,
        AWREADY => m_axi_DATA_FC6_W_I_AWREADY,
        AWADDR => m_axi_DATA_FC6_W_I_AWADDR,
        AWID => m_axi_DATA_FC6_W_I_AWID,
        AWLEN => m_axi_DATA_FC6_W_I_AWLEN,
        AWSIZE => m_axi_DATA_FC6_W_I_AWSIZE,
        AWBURST => m_axi_DATA_FC6_W_I_AWBURST,
        AWLOCK => m_axi_DATA_FC6_W_I_AWLOCK,
        AWCACHE => m_axi_DATA_FC6_W_I_AWCACHE,
        AWPROT => m_axi_DATA_FC6_W_I_AWPROT,
        AWQOS => m_axi_DATA_FC6_W_I_AWQOS,
        AWREGION => m_axi_DATA_FC6_W_I_AWREGION,
        AWUSER => m_axi_DATA_FC6_W_I_AWUSER,
        WVALID => m_axi_DATA_FC6_W_I_WVALID,
        WREADY => m_axi_DATA_FC6_W_I_WREADY,
        WDATA => m_axi_DATA_FC6_W_I_WDATA,
        WSTRB => m_axi_DATA_FC6_W_I_WSTRB,
        WLAST => m_axi_DATA_FC6_W_I_WLAST,
        WID => m_axi_DATA_FC6_W_I_WID,
        WUSER => m_axi_DATA_FC6_W_I_WUSER,
        ARVALID => m_axi_DATA_FC6_W_I_ARVALID,
        ARREADY => m_axi_DATA_FC6_W_I_ARREADY,
        ARADDR => m_axi_DATA_FC6_W_I_ARADDR,
        ARID => m_axi_DATA_FC6_W_I_ARID,
        ARLEN => m_axi_DATA_FC6_W_I_ARLEN,
        ARSIZE => m_axi_DATA_FC6_W_I_ARSIZE,
        ARBURST => m_axi_DATA_FC6_W_I_ARBURST,
        ARLOCK => m_axi_DATA_FC6_W_I_ARLOCK,
        ARCACHE => m_axi_DATA_FC6_W_I_ARCACHE,
        ARPROT => m_axi_DATA_FC6_W_I_ARPROT,
        ARQOS => m_axi_DATA_FC6_W_I_ARQOS,
        ARREGION => m_axi_DATA_FC6_W_I_ARREGION,
        ARUSER => m_axi_DATA_FC6_W_I_ARUSER,
        RVALID => m_axi_DATA_FC6_W_I_RVALID,
        RREADY => m_axi_DATA_FC6_W_I_RREADY,
        RDATA => m_axi_DATA_FC6_W_I_RDATA,
        RLAST => m_axi_DATA_FC6_W_I_RLAST,
        RID => m_axi_DATA_FC6_W_I_RID,
        RUSER => m_axi_DATA_FC6_W_I_RUSER,
        RRESP => m_axi_DATA_FC6_W_I_RRESP,
        BVALID => m_axi_DATA_FC6_W_I_BVALID,
        BREADY => m_axi_DATA_FC6_W_I_BREADY,
        BRESP => m_axi_DATA_FC6_W_I_BRESP,
        BID => m_axi_DATA_FC6_W_I_BID,
        BUSER => m_axi_DATA_FC6_W_I_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_FC6_W_I_ARVALID,
        I_ARREADY => DATA_FC6_W_I_ARREADY,
        I_ARADDR => grp_copy_w5_fu_1258_m_axi_in_r_ARADDR,
        I_ARID => grp_copy_w5_fu_1258_m_axi_in_r_ARID,
        I_ARLEN => grp_copy_w5_fu_1258_m_axi_in_r_ARLEN,
        I_ARSIZE => grp_copy_w5_fu_1258_m_axi_in_r_ARSIZE,
        I_ARLOCK => grp_copy_w5_fu_1258_m_axi_in_r_ARLOCK,
        I_ARCACHE => grp_copy_w5_fu_1258_m_axi_in_r_ARCACHE,
        I_ARQOS => grp_copy_w5_fu_1258_m_axi_in_r_ARQOS,
        I_ARPROT => grp_copy_w5_fu_1258_m_axi_in_r_ARPROT,
        I_ARUSER => grp_copy_w5_fu_1258_m_axi_in_r_ARUSER,
        I_ARBURST => grp_copy_w5_fu_1258_m_axi_in_r_ARBURST,
        I_ARREGION => grp_copy_w5_fu_1258_m_axi_in_r_ARREGION,
        I_RVALID => DATA_FC6_W_I_RVALID,
        I_RREADY => DATA_FC6_W_I_RREADY,
        I_RDATA => DATA_FC6_W_I_RDATA,
        I_RID => DATA_FC6_W_I_RID,
        I_RUSER => DATA_FC6_W_I_RUSER,
        I_RRESP => DATA_FC6_W_I_RRESP,
        I_RLAST => DATA_FC6_W_I_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_FC6_W_I_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_FC6_W_I_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_FC6_W_I_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_FC6_W_I_BRESP,
        I_BID => DATA_FC6_W_I_BID,
        I_BUSER => DATA_FC6_W_I_BUSER);

    lenet_wrapper_DATA_FC6_B_I_m_axi_U : component lenet_wrapper_DATA_FC6_B_I_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_FC6_B_I_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_FC6_B_I_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_FC6_B_I_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_FC6_B_I_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_FC6_B_I_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_FC6_B_I_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_FC6_B_I_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_FC6_B_I_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_FC6_B_I_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_FC6_B_I_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_FC6_B_I_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_FC6_B_I_AWVALID,
        AWREADY => m_axi_DATA_FC6_B_I_AWREADY,
        AWADDR => m_axi_DATA_FC6_B_I_AWADDR,
        AWID => m_axi_DATA_FC6_B_I_AWID,
        AWLEN => m_axi_DATA_FC6_B_I_AWLEN,
        AWSIZE => m_axi_DATA_FC6_B_I_AWSIZE,
        AWBURST => m_axi_DATA_FC6_B_I_AWBURST,
        AWLOCK => m_axi_DATA_FC6_B_I_AWLOCK,
        AWCACHE => m_axi_DATA_FC6_B_I_AWCACHE,
        AWPROT => m_axi_DATA_FC6_B_I_AWPROT,
        AWQOS => m_axi_DATA_FC6_B_I_AWQOS,
        AWREGION => m_axi_DATA_FC6_B_I_AWREGION,
        AWUSER => m_axi_DATA_FC6_B_I_AWUSER,
        WVALID => m_axi_DATA_FC6_B_I_WVALID,
        WREADY => m_axi_DATA_FC6_B_I_WREADY,
        WDATA => m_axi_DATA_FC6_B_I_WDATA,
        WSTRB => m_axi_DATA_FC6_B_I_WSTRB,
        WLAST => m_axi_DATA_FC6_B_I_WLAST,
        WID => m_axi_DATA_FC6_B_I_WID,
        WUSER => m_axi_DATA_FC6_B_I_WUSER,
        ARVALID => m_axi_DATA_FC6_B_I_ARVALID,
        ARREADY => m_axi_DATA_FC6_B_I_ARREADY,
        ARADDR => m_axi_DATA_FC6_B_I_ARADDR,
        ARID => m_axi_DATA_FC6_B_I_ARID,
        ARLEN => m_axi_DATA_FC6_B_I_ARLEN,
        ARSIZE => m_axi_DATA_FC6_B_I_ARSIZE,
        ARBURST => m_axi_DATA_FC6_B_I_ARBURST,
        ARLOCK => m_axi_DATA_FC6_B_I_ARLOCK,
        ARCACHE => m_axi_DATA_FC6_B_I_ARCACHE,
        ARPROT => m_axi_DATA_FC6_B_I_ARPROT,
        ARQOS => m_axi_DATA_FC6_B_I_ARQOS,
        ARREGION => m_axi_DATA_FC6_B_I_ARREGION,
        ARUSER => m_axi_DATA_FC6_B_I_ARUSER,
        RVALID => m_axi_DATA_FC6_B_I_RVALID,
        RREADY => m_axi_DATA_FC6_B_I_RREADY,
        RDATA => m_axi_DATA_FC6_B_I_RDATA,
        RLAST => m_axi_DATA_FC6_B_I_RLAST,
        RID => m_axi_DATA_FC6_B_I_RID,
        RUSER => m_axi_DATA_FC6_B_I_RUSER,
        RRESP => m_axi_DATA_FC6_B_I_RRESP,
        BVALID => m_axi_DATA_FC6_B_I_BVALID,
        BREADY => m_axi_DATA_FC6_B_I_BREADY,
        BRESP => m_axi_DATA_FC6_B_I_BRESP,
        BID => m_axi_DATA_FC6_B_I_BID,
        BUSER => m_axi_DATA_FC6_B_I_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_FC6_B_I_ARVALID,
        I_ARREADY => DATA_FC6_B_I_ARREADY,
        I_ARADDR => grp_copy_b5_fu_1290_m_axi_in_r_ARADDR,
        I_ARID => grp_copy_b5_fu_1290_m_axi_in_r_ARID,
        I_ARLEN => grp_copy_b5_fu_1290_m_axi_in_r_ARLEN,
        I_ARSIZE => grp_copy_b5_fu_1290_m_axi_in_r_ARSIZE,
        I_ARLOCK => grp_copy_b5_fu_1290_m_axi_in_r_ARLOCK,
        I_ARCACHE => grp_copy_b5_fu_1290_m_axi_in_r_ARCACHE,
        I_ARQOS => grp_copy_b5_fu_1290_m_axi_in_r_ARQOS,
        I_ARPROT => grp_copy_b5_fu_1290_m_axi_in_r_ARPROT,
        I_ARUSER => grp_copy_b5_fu_1290_m_axi_in_r_ARUSER,
        I_ARBURST => grp_copy_b5_fu_1290_m_axi_in_r_ARBURST,
        I_ARREGION => grp_copy_b5_fu_1290_m_axi_in_r_ARREGION,
        I_RVALID => DATA_FC6_B_I_RVALID,
        I_RREADY => DATA_FC6_B_I_RREADY,
        I_RDATA => DATA_FC6_B_I_RDATA,
        I_RID => DATA_FC6_B_I_RID,
        I_RUSER => DATA_FC6_B_I_RUSER,
        I_RRESP => DATA_FC6_B_I_RRESP,
        I_RLAST => DATA_FC6_B_I_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_FC6_B_I_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_FC6_B_I_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_FC6_B_I_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_FC6_B_I_BRESP,
        I_BID => DATA_FC6_B_I_BID,
        I_BUSER => DATA_FC6_B_I_BUSER);

    lenet_wrapper_DATA_FC6_O_O_m_axi_U : component lenet_wrapper_DATA_FC6_O_O_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_FC6_O_O_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_FC6_O_O_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_FC6_O_O_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_FC6_O_O_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_FC6_O_O_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_FC6_O_O_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_FC6_O_O_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_FC6_O_O_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_FC6_O_O_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_FC6_O_O_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_FC6_O_O_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_FC6_O_O_AWVALID,
        AWREADY => m_axi_DATA_FC6_O_O_AWREADY,
        AWADDR => m_axi_DATA_FC6_O_O_AWADDR,
        AWID => m_axi_DATA_FC6_O_O_AWID,
        AWLEN => m_axi_DATA_FC6_O_O_AWLEN,
        AWSIZE => m_axi_DATA_FC6_O_O_AWSIZE,
        AWBURST => m_axi_DATA_FC6_O_O_AWBURST,
        AWLOCK => m_axi_DATA_FC6_O_O_AWLOCK,
        AWCACHE => m_axi_DATA_FC6_O_O_AWCACHE,
        AWPROT => m_axi_DATA_FC6_O_O_AWPROT,
        AWQOS => m_axi_DATA_FC6_O_O_AWQOS,
        AWREGION => m_axi_DATA_FC6_O_O_AWREGION,
        AWUSER => m_axi_DATA_FC6_O_O_AWUSER,
        WVALID => m_axi_DATA_FC6_O_O_WVALID,
        WREADY => m_axi_DATA_FC6_O_O_WREADY,
        WDATA => m_axi_DATA_FC6_O_O_WDATA,
        WSTRB => m_axi_DATA_FC6_O_O_WSTRB,
        WLAST => m_axi_DATA_FC6_O_O_WLAST,
        WID => m_axi_DATA_FC6_O_O_WID,
        WUSER => m_axi_DATA_FC6_O_O_WUSER,
        ARVALID => m_axi_DATA_FC6_O_O_ARVALID,
        ARREADY => m_axi_DATA_FC6_O_O_ARREADY,
        ARADDR => m_axi_DATA_FC6_O_O_ARADDR,
        ARID => m_axi_DATA_FC6_O_O_ARID,
        ARLEN => m_axi_DATA_FC6_O_O_ARLEN,
        ARSIZE => m_axi_DATA_FC6_O_O_ARSIZE,
        ARBURST => m_axi_DATA_FC6_O_O_ARBURST,
        ARLOCK => m_axi_DATA_FC6_O_O_ARLOCK,
        ARCACHE => m_axi_DATA_FC6_O_O_ARCACHE,
        ARPROT => m_axi_DATA_FC6_O_O_ARPROT,
        ARQOS => m_axi_DATA_FC6_O_O_ARQOS,
        ARREGION => m_axi_DATA_FC6_O_O_ARREGION,
        ARUSER => m_axi_DATA_FC6_O_O_ARUSER,
        RVALID => m_axi_DATA_FC6_O_O_RVALID,
        RREADY => m_axi_DATA_FC6_O_O_RREADY,
        RDATA => m_axi_DATA_FC6_O_O_RDATA,
        RLAST => m_axi_DATA_FC6_O_O_RLAST,
        RID => m_axi_DATA_FC6_O_O_RID,
        RUSER => m_axi_DATA_FC6_O_O_RUSER,
        RRESP => m_axi_DATA_FC6_O_O_RRESP,
        BVALID => m_axi_DATA_FC6_O_O_BVALID,
        BREADY => m_axi_DATA_FC6_O_O_BREADY,
        BRESP => m_axi_DATA_FC6_O_O_BRESP,
        BID => m_axi_DATA_FC6_O_O_BID,
        BUSER => m_axi_DATA_FC6_O_O_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_FC6_O_O_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_FC6_O_O_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_FC6_O_O_RDATA,
        I_RID => DATA_FC6_O_O_RID,
        I_RUSER => DATA_FC6_O_O_RUSER,
        I_RRESP => DATA_FC6_O_O_RRESP,
        I_RLAST => DATA_FC6_O_O_RLAST,
        I_AWVALID => DATA_FC6_O_O_AWVALID,
        I_AWREADY => DATA_FC6_O_O_AWREADY,
        I_AWADDR => grp_copy_out_fu_1314_m_axi_out_r_AWADDR,
        I_AWID => grp_copy_out_fu_1314_m_axi_out_r_AWID,
        I_AWLEN => grp_copy_out_fu_1314_m_axi_out_r_AWLEN,
        I_AWSIZE => grp_copy_out_fu_1314_m_axi_out_r_AWSIZE,
        I_AWLOCK => grp_copy_out_fu_1314_m_axi_out_r_AWLOCK,
        I_AWCACHE => grp_copy_out_fu_1314_m_axi_out_r_AWCACHE,
        I_AWQOS => grp_copy_out_fu_1314_m_axi_out_r_AWQOS,
        I_AWPROT => grp_copy_out_fu_1314_m_axi_out_r_AWPROT,
        I_AWUSER => grp_copy_out_fu_1314_m_axi_out_r_AWUSER,
        I_AWBURST => grp_copy_out_fu_1314_m_axi_out_r_AWBURST,
        I_AWREGION => grp_copy_out_fu_1314_m_axi_out_r_AWREGION,
        I_WVALID => DATA_FC6_O_O_WVALID,
        I_WREADY => DATA_FC6_O_O_WREADY,
        I_WDATA => grp_copy_out_fu_1314_m_axi_out_r_WDATA,
        I_WID => grp_copy_out_fu_1314_m_axi_out_r_WID,
        I_WUSER => grp_copy_out_fu_1314_m_axi_out_r_WUSER,
        I_WLAST => grp_copy_out_fu_1314_m_axi_out_r_WLAST,
        I_WSTRB => grp_copy_out_fu_1314_m_axi_out_r_WSTRB,
        I_BVALID => DATA_FC6_O_O_BVALID,
        I_BREADY => DATA_FC6_O_O_BREADY,
        I_BRESP => DATA_FC6_O_O_BRESP,
        I_BID => DATA_FC6_O_O_BID,
        I_BUSER => DATA_FC6_O_O_BUSER);

    lenet_wrapper_DATA_DONE_m_axi_U : component lenet_wrapper_DATA_DONE_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_DONE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_DONE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_DONE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_DONE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_DONE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_DONE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_DONE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_DONE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_DONE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_DONE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_DONE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_DONE_AWVALID,
        AWREADY => m_axi_DATA_DONE_AWREADY,
        AWADDR => m_axi_DATA_DONE_AWADDR,
        AWID => m_axi_DATA_DONE_AWID,
        AWLEN => m_axi_DATA_DONE_AWLEN,
        AWSIZE => m_axi_DATA_DONE_AWSIZE,
        AWBURST => m_axi_DATA_DONE_AWBURST,
        AWLOCK => m_axi_DATA_DONE_AWLOCK,
        AWCACHE => m_axi_DATA_DONE_AWCACHE,
        AWPROT => m_axi_DATA_DONE_AWPROT,
        AWQOS => m_axi_DATA_DONE_AWQOS,
        AWREGION => m_axi_DATA_DONE_AWREGION,
        AWUSER => m_axi_DATA_DONE_AWUSER,
        WVALID => m_axi_DATA_DONE_WVALID,
        WREADY => m_axi_DATA_DONE_WREADY,
        WDATA => m_axi_DATA_DONE_WDATA,
        WSTRB => m_axi_DATA_DONE_WSTRB,
        WLAST => m_axi_DATA_DONE_WLAST,
        WID => m_axi_DATA_DONE_WID,
        WUSER => m_axi_DATA_DONE_WUSER,
        ARVALID => m_axi_DATA_DONE_ARVALID,
        ARREADY => m_axi_DATA_DONE_ARREADY,
        ARADDR => m_axi_DATA_DONE_ARADDR,
        ARID => m_axi_DATA_DONE_ARID,
        ARLEN => m_axi_DATA_DONE_ARLEN,
        ARSIZE => m_axi_DATA_DONE_ARSIZE,
        ARBURST => m_axi_DATA_DONE_ARBURST,
        ARLOCK => m_axi_DATA_DONE_ARLOCK,
        ARCACHE => m_axi_DATA_DONE_ARCACHE,
        ARPROT => m_axi_DATA_DONE_ARPROT,
        ARQOS => m_axi_DATA_DONE_ARQOS,
        ARREGION => m_axi_DATA_DONE_ARREGION,
        ARUSER => m_axi_DATA_DONE_ARUSER,
        RVALID => m_axi_DATA_DONE_RVALID,
        RREADY => m_axi_DATA_DONE_RREADY,
        RDATA => m_axi_DATA_DONE_RDATA,
        RLAST => m_axi_DATA_DONE_RLAST,
        RID => m_axi_DATA_DONE_RID,
        RUSER => m_axi_DATA_DONE_RUSER,
        RRESP => m_axi_DATA_DONE_RRESP,
        BVALID => m_axi_DATA_DONE_BVALID,
        BREADY => m_axi_DATA_DONE_BREADY,
        BRESP => m_axi_DATA_DONE_BRESP,
        BID => m_axi_DATA_DONE_BID,
        BUSER => m_axi_DATA_DONE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_DONE_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_DONE_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_DONE_RDATA,
        I_RID => DATA_DONE_RID,
        I_RUSER => DATA_DONE_RUSER,
        I_RRESP => DATA_DONE_RRESP,
        I_RLAST => DATA_DONE_RLAST,
        I_AWVALID => DATA_DONE_AWVALID,
        I_AWREADY => DATA_DONE_AWREADY,
        I_AWADDR => DATA_DONE_addr_reg_2931,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => DATA_DONE_WVALID,
        I_WREADY => DATA_DONE_WREADY,
        I_WDATA => ap_const_lv32_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => DATA_DONE_BVALID,
        I_BREADY => DATA_DONE_BREADY,
        I_BRESP => DATA_DONE_BRESP,
        I_BID => DATA_DONE_BID,
        I_BUSER => DATA_DONE_BUSER);

    lenet_wrapper_DATA_START_m_axi_U : component lenet_wrapper_DATA_START_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_START_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_START_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_START_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_START_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_START_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_START_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_START_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_START_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_START_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_START_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_START_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_START_AWVALID,
        AWREADY => m_axi_DATA_START_AWREADY,
        AWADDR => m_axi_DATA_START_AWADDR,
        AWID => m_axi_DATA_START_AWID,
        AWLEN => m_axi_DATA_START_AWLEN,
        AWSIZE => m_axi_DATA_START_AWSIZE,
        AWBURST => m_axi_DATA_START_AWBURST,
        AWLOCK => m_axi_DATA_START_AWLOCK,
        AWCACHE => m_axi_DATA_START_AWCACHE,
        AWPROT => m_axi_DATA_START_AWPROT,
        AWQOS => m_axi_DATA_START_AWQOS,
        AWREGION => m_axi_DATA_START_AWREGION,
        AWUSER => m_axi_DATA_START_AWUSER,
        WVALID => m_axi_DATA_START_WVALID,
        WREADY => m_axi_DATA_START_WREADY,
        WDATA => m_axi_DATA_START_WDATA,
        WSTRB => m_axi_DATA_START_WSTRB,
        WLAST => m_axi_DATA_START_WLAST,
        WID => m_axi_DATA_START_WID,
        WUSER => m_axi_DATA_START_WUSER,
        ARVALID => m_axi_DATA_START_ARVALID,
        ARREADY => m_axi_DATA_START_ARREADY,
        ARADDR => m_axi_DATA_START_ARADDR,
        ARID => m_axi_DATA_START_ARID,
        ARLEN => m_axi_DATA_START_ARLEN,
        ARSIZE => m_axi_DATA_START_ARSIZE,
        ARBURST => m_axi_DATA_START_ARBURST,
        ARLOCK => m_axi_DATA_START_ARLOCK,
        ARCACHE => m_axi_DATA_START_ARCACHE,
        ARPROT => m_axi_DATA_START_ARPROT,
        ARQOS => m_axi_DATA_START_ARQOS,
        ARREGION => m_axi_DATA_START_ARREGION,
        ARUSER => m_axi_DATA_START_ARUSER,
        RVALID => m_axi_DATA_START_RVALID,
        RREADY => m_axi_DATA_START_RREADY,
        RDATA => m_axi_DATA_START_RDATA,
        RLAST => m_axi_DATA_START_RLAST,
        RID => m_axi_DATA_START_RID,
        RUSER => m_axi_DATA_START_RUSER,
        RRESP => m_axi_DATA_START_RRESP,
        BVALID => m_axi_DATA_START_BVALID,
        BREADY => m_axi_DATA_START_BREADY,
        BRESP => m_axi_DATA_START_BRESP,
        BID => m_axi_DATA_START_BID,
        BUSER => m_axi_DATA_START_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_START_ARVALID,
        I_ARREADY => DATA_START_ARREADY,
        I_ARADDR => DATA_START_addr_reg_2925,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_START_RVALID,
        I_RREADY => DATA_START_RREADY,
        I_RDATA => DATA_START_RDATA,
        I_RID => DATA_START_RID,
        I_RUSER => DATA_START_RUSER,
        I_RRESP => DATA_START_RRESP,
        I_RLAST => DATA_START_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_START_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_START_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_START_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_START_BRESP,
        I_BID => DATA_START_BID,
        I_BUSER => DATA_START_BUSER);

    image_in_0_U : component lenet_wrapper_imaocq
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_in_0_address0,
        ce0 => image_in_0_ce0,
        we0 => image_in_0_we0,
        d0 => image_in_0_d0,
        q0 => image_in_0_q0);

    c1_w_0_U : component lenet_wrapper_c1_pcA
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c1_w_0_address0,
        ce0 => c1_w_0_ce0,
        we0 => c1_w_0_we0,
        d0 => c1_w_0_d0,
        q0 => c1_w_0_q0);

    c1_b_U : component lenet_wrapper_c1_b
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c1_b_address0,
        ce0 => c1_b_ce0,
        we0 => c1_b_we0,
        d0 => c1_b_d0,
        q0 => c1_b_q0);

    c3_w_U : component lenet_wrapper_c3_w
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c3_w_address0,
        ce0 => c3_w_ce0,
        we0 => c3_w_we0,
        d0 => c3_w_d0,
        q0 => c3_w_q0);

    c3_b_U : component lenet_wrapper_c3_b
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c3_b_address0,
        ce0 => c3_b_ce0,
        we0 => c3_b_we0,
        d0 => c3_b_d0,
        q0 => c3_b_q0);

    c5_w_U : component lenet_wrapper_c5_w
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_w_address0,
        ce0 => c5_w_ce0,
        we0 => c5_w_we0,
        d0 => c5_w_d0,
        q0 => c5_w_q0);

    c5_b_U : component lenet_wrapper_c5_b
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_b_address0,
        ce0 => c5_b_ce0,
        we0 => c5_b_we0,
        d0 => c5_b_d0,
        q0 => c5_b_q0);

    fc6_w_0_0_U : component lenet_wrapper_fc6qcK
    generic map (
        DataWidth => 32,
        AddressRange => 1200,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc6_w_0_0_address0,
        ce0 => fc6_w_0_0_ce0,
        we0 => fc6_w_0_0_we0,
        d0 => fc6_w_0_0_d0,
        q0 => fc6_w_0_0_q0);

    fc6_b_U : component lenet_wrapper_fc6_b
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc6_b_address0,
        ce0 => fc6_b_ce0,
        we0 => fc6_b_we0,
        d0 => fc6_b_d0,
        q0 => fc6_b_q0);

    grp_convolution3_fu_1213 : component convolution3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution3_fu_1213_ap_start,
        ap_done => grp_convolution3_fu_1213_ap_done,
        ap_idle => grp_convolution3_fu_1213_ap_idle,
        ap_ready => grp_convolution3_fu_1213_ap_ready,
        conv3_w_address0 => grp_convolution3_fu_1213_conv3_w_address0,
        conv3_w_ce0 => grp_convolution3_fu_1213_conv3_w_ce0,
        conv3_w_q0 => c3_w_q0,
        conv3_b_address0 => grp_convolution3_fu_1213_conv3_b_address0,
        conv3_b_ce0 => grp_convolution3_fu_1213_conv3_b_ce0,
        conv3_b_q0 => c3_b_q0,
        output_r_address0 => grp_convolution3_fu_1213_output_r_address0,
        output_r_ce0 => grp_convolution3_fu_1213_output_r_ce0,
        output_r_we0 => grp_convolution3_fu_1213_output_r_we0,
        output_r_d0 => grp_convolution3_fu_1213_output_r_d0,
        p2_o_2_address0 => grp_convolution3_fu_1213_p2_o_2_address0,
        p2_o_2_ce0 => grp_convolution3_fu_1213_p2_o_2_ce0,
        p2_o_2_q0 => p2_o_2_q0);

    grp_convolution1_fu_1223 : component convolution1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution1_fu_1223_ap_start,
        ap_done => grp_convolution1_fu_1223_ap_done,
        ap_idle => grp_convolution1_fu_1223_ap_idle,
        ap_ready => grp_convolution1_fu_1223_ap_ready,
        input_0_address0 => grp_convolution1_fu_1223_input_0_address0,
        input_0_ce0 => grp_convolution1_fu_1223_input_0_ce0,
        input_0_q0 => image_in_0_q0,
        conv1_w_0_address0 => grp_convolution1_fu_1223_conv1_w_0_address0,
        conv1_w_0_ce0 => grp_convolution1_fu_1223_conv1_w_0_ce0,
        conv1_w_0_q0 => c1_w_0_q0,
        conv1_b_address0 => grp_convolution1_fu_1223_conv1_b_address0,
        conv1_b_ce0 => grp_convolution1_fu_1223_conv1_b_ce0,
        conv1_b_q0 => c1_b_q0,
        output_r_address0 => grp_convolution1_fu_1223_output_r_address0,
        output_r_ce0 => grp_convolution1_fu_1223_output_r_ce0,
        output_r_we0 => grp_convolution1_fu_1223_output_r_we0,
        output_r_d0 => grp_convolution1_fu_1223_output_r_d0);

    grp_convolution5_fu_1232 : component convolution5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution5_fu_1232_ap_start,
        ap_done => grp_convolution5_fu_1232_ap_done,
        ap_idle => grp_convolution5_fu_1232_ap_idle,
        ap_ready => grp_convolution5_fu_1232_ap_ready,
        conv5_w_address0 => grp_convolution5_fu_1232_conv5_w_address0,
        conv5_w_ce0 => grp_convolution5_fu_1232_conv5_w_ce0,
        conv5_w_q0 => c5_w_q0,
        conv5_b_address0 => grp_convolution5_fu_1232_conv5_b_address0,
        conv5_b_ce0 => grp_convolution5_fu_1232_conv5_b_ce0,
        conv5_b_q0 => c5_b_q0,
        output_0_0_address0 => grp_convolution5_fu_1232_output_0_0_address0,
        output_0_0_ce0 => grp_convolution5_fu_1232_output_0_0_ce0,
        output_0_0_we0 => grp_convolution5_fu_1232_output_0_0_we0,
        output_0_0_d0 => grp_convolution5_fu_1232_output_0_0_d0,
        p4_o_2_address0 => grp_convolution5_fu_1232_p4_o_2_address0,
        p4_o_2_ce0 => grp_convolution5_fu_1232_p4_o_2_ce0,
        p4_o_2_q0 => p4_o_2_q0);

    grp_max_pooling2_fu_1242 : component max_pooling2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pooling2_fu_1242_ap_start,
        ap_done => grp_max_pooling2_fu_1242_ap_done,
        ap_idle => grp_max_pooling2_fu_1242_ap_idle,
        ap_ready => grp_max_pooling2_fu_1242_ap_ready,
        output_r_address0 => grp_max_pooling2_fu_1242_output_r_address0,
        output_r_ce0 => grp_max_pooling2_fu_1242_output_r_ce0,
        output_r_we0 => grp_max_pooling2_fu_1242_output_r_we0,
        output_r_d0 => grp_max_pooling2_fu_1242_output_r_d0,
        c1_o_2_address0 => grp_max_pooling2_fu_1242_c1_o_2_address0,
        c1_o_2_ce0 => grp_max_pooling2_fu_1242_c1_o_2_ce0,
        c1_o_2_q0 => c1_o_2_q0);

    grp_max_pooling4_fu_1250 : component max_pooling4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pooling4_fu_1250_ap_start,
        ap_done => grp_max_pooling4_fu_1250_ap_done,
        ap_idle => grp_max_pooling4_fu_1250_ap_idle,
        ap_ready => grp_max_pooling4_fu_1250_ap_ready,
        output_r_address0 => grp_max_pooling4_fu_1250_output_r_address0,
        output_r_ce0 => grp_max_pooling4_fu_1250_output_r_ce0,
        output_r_we0 => grp_max_pooling4_fu_1250_output_r_we0,
        output_r_d0 => grp_max_pooling4_fu_1250_output_r_d0,
        c3_o_2_address0 => grp_max_pooling4_fu_1250_c3_o_2_address0,
        c3_o_2_ce0 => grp_max_pooling4_fu_1250_c3_o_2_ce0,
        c3_o_2_q0 => c3_o_2_q0);

    grp_copy_w5_fu_1258 : component copy_w5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_w5_fu_1258_ap_start,
        ap_done => grp_copy_w5_fu_1258_ap_done,
        ap_idle => grp_copy_w5_fu_1258_ap_idle,
        ap_ready => grp_copy_w5_fu_1258_ap_ready,
        m_axi_in_r_AWVALID => grp_copy_w5_fu_1258_m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY => ap_const_logic_0,
        m_axi_in_r_AWADDR => grp_copy_w5_fu_1258_m_axi_in_r_AWADDR,
        m_axi_in_r_AWID => grp_copy_w5_fu_1258_m_axi_in_r_AWID,
        m_axi_in_r_AWLEN => grp_copy_w5_fu_1258_m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE => grp_copy_w5_fu_1258_m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST => grp_copy_w5_fu_1258_m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK => grp_copy_w5_fu_1258_m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE => grp_copy_w5_fu_1258_m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT => grp_copy_w5_fu_1258_m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS => grp_copy_w5_fu_1258_m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION => grp_copy_w5_fu_1258_m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER => grp_copy_w5_fu_1258_m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID => grp_copy_w5_fu_1258_m_axi_in_r_WVALID,
        m_axi_in_r_WREADY => ap_const_logic_0,
        m_axi_in_r_WDATA => grp_copy_w5_fu_1258_m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB => grp_copy_w5_fu_1258_m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST => grp_copy_w5_fu_1258_m_axi_in_r_WLAST,
        m_axi_in_r_WID => grp_copy_w5_fu_1258_m_axi_in_r_WID,
        m_axi_in_r_WUSER => grp_copy_w5_fu_1258_m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID => grp_copy_w5_fu_1258_m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY => DATA_FC6_W_I_ARREADY,
        m_axi_in_r_ARADDR => grp_copy_w5_fu_1258_m_axi_in_r_ARADDR,
        m_axi_in_r_ARID => grp_copy_w5_fu_1258_m_axi_in_r_ARID,
        m_axi_in_r_ARLEN => grp_copy_w5_fu_1258_m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE => grp_copy_w5_fu_1258_m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST => grp_copy_w5_fu_1258_m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK => grp_copy_w5_fu_1258_m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE => grp_copy_w5_fu_1258_m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT => grp_copy_w5_fu_1258_m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS => grp_copy_w5_fu_1258_m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION => grp_copy_w5_fu_1258_m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER => grp_copy_w5_fu_1258_m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID => DATA_FC6_W_I_RVALID,
        m_axi_in_r_RREADY => grp_copy_w5_fu_1258_m_axi_in_r_RREADY,
        m_axi_in_r_RDATA => DATA_FC6_W_I_RDATA,
        m_axi_in_r_RLAST => DATA_FC6_W_I_RLAST,
        m_axi_in_r_RID => DATA_FC6_W_I_RID,
        m_axi_in_r_RUSER => DATA_FC6_W_I_RUSER,
        m_axi_in_r_RRESP => DATA_FC6_W_I_RRESP,
        m_axi_in_r_BVALID => ap_const_logic_0,
        m_axi_in_r_BREADY => grp_copy_w5_fu_1258_m_axi_in_r_BREADY,
        m_axi_in_r_BRESP => ap_const_lv2_0,
        m_axi_in_r_BID => ap_const_lv1_0,
        m_axi_in_r_BUSER => ap_const_lv1_0,
        c5_w_i11 => c5_w_i1_reg_2946,
        out_r_address0 => grp_copy_w5_fu_1258_out_r_address0,
        out_r_ce0 => grp_copy_w5_fu_1258_out_r_ce0,
        out_r_we0 => grp_copy_w5_fu_1258_out_r_we0,
        out_r_d0 => grp_copy_w5_fu_1258_out_r_d0);

    grp_copy_w3_fu_1266 : component copy_w3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_w3_fu_1266_ap_start,
        ap_done => grp_copy_w3_fu_1266_ap_done,
        ap_idle => grp_copy_w3_fu_1266_ap_idle,
        ap_ready => grp_copy_w3_fu_1266_ap_ready,
        m_axi_in_r_AWVALID => grp_copy_w3_fu_1266_m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY => ap_const_logic_0,
        m_axi_in_r_AWADDR => grp_copy_w3_fu_1266_m_axi_in_r_AWADDR,
        m_axi_in_r_AWID => grp_copy_w3_fu_1266_m_axi_in_r_AWID,
        m_axi_in_r_AWLEN => grp_copy_w3_fu_1266_m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE => grp_copy_w3_fu_1266_m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST => grp_copy_w3_fu_1266_m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK => grp_copy_w3_fu_1266_m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE => grp_copy_w3_fu_1266_m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT => grp_copy_w3_fu_1266_m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS => grp_copy_w3_fu_1266_m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION => grp_copy_w3_fu_1266_m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER => grp_copy_w3_fu_1266_m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID => grp_copy_w3_fu_1266_m_axi_in_r_WVALID,
        m_axi_in_r_WREADY => ap_const_logic_0,
        m_axi_in_r_WDATA => grp_copy_w3_fu_1266_m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB => grp_copy_w3_fu_1266_m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST => grp_copy_w3_fu_1266_m_axi_in_r_WLAST,
        m_axi_in_r_WID => grp_copy_w3_fu_1266_m_axi_in_r_WID,
        m_axi_in_r_WUSER => grp_copy_w3_fu_1266_m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID => grp_copy_w3_fu_1266_m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY => DATA_C3_W_I_ARREADY,
        m_axi_in_r_ARADDR => grp_copy_w3_fu_1266_m_axi_in_r_ARADDR,
        m_axi_in_r_ARID => grp_copy_w3_fu_1266_m_axi_in_r_ARID,
        m_axi_in_r_ARLEN => grp_copy_w3_fu_1266_m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE => grp_copy_w3_fu_1266_m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST => grp_copy_w3_fu_1266_m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK => grp_copy_w3_fu_1266_m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE => grp_copy_w3_fu_1266_m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT => grp_copy_w3_fu_1266_m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS => grp_copy_w3_fu_1266_m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION => grp_copy_w3_fu_1266_m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER => grp_copy_w3_fu_1266_m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID => DATA_C3_W_I_RVALID,
        m_axi_in_r_RREADY => grp_copy_w3_fu_1266_m_axi_in_r_RREADY,
        m_axi_in_r_RDATA => DATA_C3_W_I_RDATA,
        m_axi_in_r_RLAST => DATA_C3_W_I_RLAST,
        m_axi_in_r_RID => DATA_C3_W_I_RID,
        m_axi_in_r_RUSER => DATA_C3_W_I_RUSER,
        m_axi_in_r_RRESP => DATA_C3_W_I_RRESP,
        m_axi_in_r_BVALID => ap_const_logic_0,
        m_axi_in_r_BREADY => grp_copy_w3_fu_1266_m_axi_in_r_BREADY,
        m_axi_in_r_BRESP => ap_const_lv2_0,
        m_axi_in_r_BID => ap_const_lv1_0,
        m_axi_in_r_BUSER => ap_const_lv1_0,
        c3_w_i7 => c3_w_i7_reg_2956,
        out_r_address0 => grp_copy_w3_fu_1266_out_r_address0,
        out_r_ce0 => grp_copy_w3_fu_1266_out_r_ce0,
        out_r_we0 => grp_copy_w3_fu_1266_out_r_we0,
        out_r_d0 => grp_copy_w3_fu_1266_out_r_d0);

    grp_copy_w1_fu_1274 : component copy_w1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_w1_fu_1274_ap_start,
        ap_done => grp_copy_w1_fu_1274_ap_done,
        ap_idle => grp_copy_w1_fu_1274_ap_idle,
        ap_ready => grp_copy_w1_fu_1274_ap_ready,
        m_axi_in_r_AWVALID => grp_copy_w1_fu_1274_m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY => ap_const_logic_0,
        m_axi_in_r_AWADDR => grp_copy_w1_fu_1274_m_axi_in_r_AWADDR,
        m_axi_in_r_AWID => grp_copy_w1_fu_1274_m_axi_in_r_AWID,
        m_axi_in_r_AWLEN => grp_copy_w1_fu_1274_m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE => grp_copy_w1_fu_1274_m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST => grp_copy_w1_fu_1274_m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK => grp_copy_w1_fu_1274_m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE => grp_copy_w1_fu_1274_m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT => grp_copy_w1_fu_1274_m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS => grp_copy_w1_fu_1274_m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION => grp_copy_w1_fu_1274_m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER => grp_copy_w1_fu_1274_m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID => grp_copy_w1_fu_1274_m_axi_in_r_WVALID,
        m_axi_in_r_WREADY => ap_const_logic_0,
        m_axi_in_r_WDATA => grp_copy_w1_fu_1274_m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB => grp_copy_w1_fu_1274_m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST => grp_copy_w1_fu_1274_m_axi_in_r_WLAST,
        m_axi_in_r_WID => grp_copy_w1_fu_1274_m_axi_in_r_WID,
        m_axi_in_r_WUSER => grp_copy_w1_fu_1274_m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID => grp_copy_w1_fu_1274_m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY => DATA_C1_W_I_ARREADY,
        m_axi_in_r_ARADDR => grp_copy_w1_fu_1274_m_axi_in_r_ARADDR,
        m_axi_in_r_ARID => grp_copy_w1_fu_1274_m_axi_in_r_ARID,
        m_axi_in_r_ARLEN => grp_copy_w1_fu_1274_m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE => grp_copy_w1_fu_1274_m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST => grp_copy_w1_fu_1274_m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK => grp_copy_w1_fu_1274_m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE => grp_copy_w1_fu_1274_m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT => grp_copy_w1_fu_1274_m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS => grp_copy_w1_fu_1274_m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION => grp_copy_w1_fu_1274_m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER => grp_copy_w1_fu_1274_m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID => DATA_C1_W_I_RVALID,
        m_axi_in_r_RREADY => grp_copy_w1_fu_1274_m_axi_in_r_RREADY,
        m_axi_in_r_RDATA => DATA_C1_W_I_RDATA,
        m_axi_in_r_RLAST => DATA_C1_W_I_RLAST,
        m_axi_in_r_RID => DATA_C1_W_I_RID,
        m_axi_in_r_RUSER => DATA_C1_W_I_RUSER,
        m_axi_in_r_RRESP => DATA_C1_W_I_RRESP,
        m_axi_in_r_BVALID => ap_const_logic_0,
        m_axi_in_r_BREADY => grp_copy_w1_fu_1274_m_axi_in_r_BREADY,
        m_axi_in_r_BRESP => ap_const_lv2_0,
        m_axi_in_r_BID => ap_const_lv1_0,
        m_axi_in_r_BUSER => ap_const_lv1_0,
        c1_w_i3 => c1_w_i3_reg_2966,
        out_0_address0 => grp_copy_w1_fu_1274_out_0_address0,
        out_0_ce0 => grp_copy_w1_fu_1274_out_0_ce0,
        out_0_we0 => grp_copy_w1_fu_1274_out_0_we0,
        out_0_d0 => grp_copy_w1_fu_1274_out_0_d0);

    grp_copy_i_fu_1282 : component copy_i
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_i_fu_1282_ap_start,
        ap_done => grp_copy_i_fu_1282_ap_done,
        ap_idle => grp_copy_i_fu_1282_ap_idle,
        ap_ready => grp_copy_i_fu_1282_ap_ready,
        m_axi_in_r_AWVALID => grp_copy_i_fu_1282_m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY => ap_const_logic_0,
        m_axi_in_r_AWADDR => grp_copy_i_fu_1282_m_axi_in_r_AWADDR,
        m_axi_in_r_AWID => grp_copy_i_fu_1282_m_axi_in_r_AWID,
        m_axi_in_r_AWLEN => grp_copy_i_fu_1282_m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE => grp_copy_i_fu_1282_m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST => grp_copy_i_fu_1282_m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK => grp_copy_i_fu_1282_m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE => grp_copy_i_fu_1282_m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT => grp_copy_i_fu_1282_m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS => grp_copy_i_fu_1282_m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION => grp_copy_i_fu_1282_m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER => grp_copy_i_fu_1282_m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID => grp_copy_i_fu_1282_m_axi_in_r_WVALID,
        m_axi_in_r_WREADY => ap_const_logic_0,
        m_axi_in_r_WDATA => grp_copy_i_fu_1282_m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB => grp_copy_i_fu_1282_m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST => grp_copy_i_fu_1282_m_axi_in_r_WLAST,
        m_axi_in_r_WID => grp_copy_i_fu_1282_m_axi_in_r_WID,
        m_axi_in_r_WUSER => grp_copy_i_fu_1282_m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID => grp_copy_i_fu_1282_m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY => DATA_IMAGE_IN_I_ARREADY,
        m_axi_in_r_ARADDR => grp_copy_i_fu_1282_m_axi_in_r_ARADDR,
        m_axi_in_r_ARID => grp_copy_i_fu_1282_m_axi_in_r_ARID,
        m_axi_in_r_ARLEN => grp_copy_i_fu_1282_m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE => grp_copy_i_fu_1282_m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST => grp_copy_i_fu_1282_m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK => grp_copy_i_fu_1282_m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE => grp_copy_i_fu_1282_m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT => grp_copy_i_fu_1282_m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS => grp_copy_i_fu_1282_m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION => grp_copy_i_fu_1282_m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER => grp_copy_i_fu_1282_m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID => DATA_IMAGE_IN_I_RVALID,
        m_axi_in_r_RREADY => grp_copy_i_fu_1282_m_axi_in_r_RREADY,
        m_axi_in_r_RDATA => DATA_IMAGE_IN_I_RDATA,
        m_axi_in_r_RLAST => DATA_IMAGE_IN_I_RLAST,
        m_axi_in_r_RID => DATA_IMAGE_IN_I_RID,
        m_axi_in_r_RUSER => DATA_IMAGE_IN_I_RUSER,
        m_axi_in_r_RRESP => DATA_IMAGE_IN_I_RRESP,
        m_axi_in_r_BVALID => ap_const_logic_0,
        m_axi_in_r_BREADY => grp_copy_i_fu_1282_m_axi_in_r_BREADY,
        m_axi_in_r_BRESP => ap_const_lv2_0,
        m_axi_in_r_BID => ap_const_lv1_0,
        m_axi_in_r_BUSER => ap_const_lv1_0,
        image_in_i1 => image_in_i1_reg_2971,
        out_0_address0 => grp_copy_i_fu_1282_out_0_address0,
        out_0_ce0 => grp_copy_i_fu_1282_out_0_ce0,
        out_0_we0 => grp_copy_i_fu_1282_out_0_we0,
        out_0_d0 => grp_copy_i_fu_1282_out_0_d0);

    grp_copy_b5_fu_1290 : component copy_b5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_b5_fu_1290_ap_start,
        ap_done => grp_copy_b5_fu_1290_ap_done,
        ap_idle => grp_copy_b5_fu_1290_ap_idle,
        ap_ready => grp_copy_b5_fu_1290_ap_ready,
        m_axi_in_r_AWVALID => grp_copy_b5_fu_1290_m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY => ap_const_logic_0,
        m_axi_in_r_AWADDR => grp_copy_b5_fu_1290_m_axi_in_r_AWADDR,
        m_axi_in_r_AWID => grp_copy_b5_fu_1290_m_axi_in_r_AWID,
        m_axi_in_r_AWLEN => grp_copy_b5_fu_1290_m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE => grp_copy_b5_fu_1290_m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST => grp_copy_b5_fu_1290_m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK => grp_copy_b5_fu_1290_m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE => grp_copy_b5_fu_1290_m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT => grp_copy_b5_fu_1290_m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS => grp_copy_b5_fu_1290_m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION => grp_copy_b5_fu_1290_m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER => grp_copy_b5_fu_1290_m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID => grp_copy_b5_fu_1290_m_axi_in_r_WVALID,
        m_axi_in_r_WREADY => ap_const_logic_0,
        m_axi_in_r_WDATA => grp_copy_b5_fu_1290_m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB => grp_copy_b5_fu_1290_m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST => grp_copy_b5_fu_1290_m_axi_in_r_WLAST,
        m_axi_in_r_WID => grp_copy_b5_fu_1290_m_axi_in_r_WID,
        m_axi_in_r_WUSER => grp_copy_b5_fu_1290_m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID => grp_copy_b5_fu_1290_m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY => DATA_FC6_B_I_ARREADY,
        m_axi_in_r_ARADDR => grp_copy_b5_fu_1290_m_axi_in_r_ARADDR,
        m_axi_in_r_ARID => grp_copy_b5_fu_1290_m_axi_in_r_ARID,
        m_axi_in_r_ARLEN => grp_copy_b5_fu_1290_m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE => grp_copy_b5_fu_1290_m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST => grp_copy_b5_fu_1290_m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK => grp_copy_b5_fu_1290_m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE => grp_copy_b5_fu_1290_m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT => grp_copy_b5_fu_1290_m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS => grp_copy_b5_fu_1290_m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION => grp_copy_b5_fu_1290_m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER => grp_copy_b5_fu_1290_m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID => DATA_FC6_B_I_RVALID,
        m_axi_in_r_RREADY => grp_copy_b5_fu_1290_m_axi_in_r_RREADY,
        m_axi_in_r_RDATA => DATA_FC6_B_I_RDATA,
        m_axi_in_r_RLAST => DATA_FC6_B_I_RLAST,
        m_axi_in_r_RID => DATA_FC6_B_I_RID,
        m_axi_in_r_RUSER => DATA_FC6_B_I_RUSER,
        m_axi_in_r_RRESP => DATA_FC6_B_I_RRESP,
        m_axi_in_r_BVALID => ap_const_logic_0,
        m_axi_in_r_BREADY => grp_copy_b5_fu_1290_m_axi_in_r_BREADY,
        m_axi_in_r_BRESP => ap_const_lv2_0,
        m_axi_in_r_BID => ap_const_lv1_0,
        m_axi_in_r_BUSER => ap_const_lv1_0,
        c5_b_i13 => c5_b_i1_reg_2941,
        out_r_address0 => grp_copy_b5_fu_1290_out_r_address0,
        out_r_ce0 => grp_copy_b5_fu_1290_out_r_ce0,
        out_r_we0 => grp_copy_b5_fu_1290_out_r_we0,
        out_r_d0 => grp_copy_b5_fu_1290_out_r_d0);

    grp_copy_b3_fu_1298 : component copy_b3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_b3_fu_1298_ap_start,
        ap_done => grp_copy_b3_fu_1298_ap_done,
        ap_idle => grp_copy_b3_fu_1298_ap_idle,
        ap_ready => grp_copy_b3_fu_1298_ap_ready,
        m_axi_in_r_AWVALID => grp_copy_b3_fu_1298_m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY => ap_const_logic_0,
        m_axi_in_r_AWADDR => grp_copy_b3_fu_1298_m_axi_in_r_AWADDR,
        m_axi_in_r_AWID => grp_copy_b3_fu_1298_m_axi_in_r_AWID,
        m_axi_in_r_AWLEN => grp_copy_b3_fu_1298_m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE => grp_copy_b3_fu_1298_m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST => grp_copy_b3_fu_1298_m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK => grp_copy_b3_fu_1298_m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE => grp_copy_b3_fu_1298_m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT => grp_copy_b3_fu_1298_m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS => grp_copy_b3_fu_1298_m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION => grp_copy_b3_fu_1298_m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER => grp_copy_b3_fu_1298_m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID => grp_copy_b3_fu_1298_m_axi_in_r_WVALID,
        m_axi_in_r_WREADY => ap_const_logic_0,
        m_axi_in_r_WDATA => grp_copy_b3_fu_1298_m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB => grp_copy_b3_fu_1298_m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST => grp_copy_b3_fu_1298_m_axi_in_r_WLAST,
        m_axi_in_r_WID => grp_copy_b3_fu_1298_m_axi_in_r_WID,
        m_axi_in_r_WUSER => grp_copy_b3_fu_1298_m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID => grp_copy_b3_fu_1298_m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY => DATA_C3_B_I_ARREADY,
        m_axi_in_r_ARADDR => grp_copy_b3_fu_1298_m_axi_in_r_ARADDR,
        m_axi_in_r_ARID => grp_copy_b3_fu_1298_m_axi_in_r_ARID,
        m_axi_in_r_ARLEN => grp_copy_b3_fu_1298_m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE => grp_copy_b3_fu_1298_m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST => grp_copy_b3_fu_1298_m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK => grp_copy_b3_fu_1298_m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE => grp_copy_b3_fu_1298_m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT => grp_copy_b3_fu_1298_m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS => grp_copy_b3_fu_1298_m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION => grp_copy_b3_fu_1298_m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER => grp_copy_b3_fu_1298_m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID => DATA_C3_B_I_RVALID,
        m_axi_in_r_RREADY => grp_copy_b3_fu_1298_m_axi_in_r_RREADY,
        m_axi_in_r_RDATA => DATA_C3_B_I_RDATA,
        m_axi_in_r_RLAST => DATA_C3_B_I_RLAST,
        m_axi_in_r_RID => DATA_C3_B_I_RID,
        m_axi_in_r_RUSER => DATA_C3_B_I_RUSER,
        m_axi_in_r_RRESP => DATA_C3_B_I_RRESP,
        m_axi_in_r_BVALID => ap_const_logic_0,
        m_axi_in_r_BREADY => grp_copy_b3_fu_1298_m_axi_in_r_BREADY,
        m_axi_in_r_BRESP => ap_const_lv2_0,
        m_axi_in_r_BID => ap_const_lv1_0,
        m_axi_in_r_BUSER => ap_const_lv1_0,
        c3_b_i9 => c3_b_i9_reg_2951,
        out_r_address0 => grp_copy_b3_fu_1298_out_r_address0,
        out_r_ce0 => grp_copy_b3_fu_1298_out_r_ce0,
        out_r_we0 => grp_copy_b3_fu_1298_out_r_we0,
        out_r_d0 => grp_copy_b3_fu_1298_out_r_d0);

    grp_copy_b1_fu_1306 : component copy_b1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_b1_fu_1306_ap_start,
        ap_done => grp_copy_b1_fu_1306_ap_done,
        ap_idle => grp_copy_b1_fu_1306_ap_idle,
        ap_ready => grp_copy_b1_fu_1306_ap_ready,
        m_axi_in_r_AWVALID => grp_copy_b1_fu_1306_m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY => ap_const_logic_0,
        m_axi_in_r_AWADDR => grp_copy_b1_fu_1306_m_axi_in_r_AWADDR,
        m_axi_in_r_AWID => grp_copy_b1_fu_1306_m_axi_in_r_AWID,
        m_axi_in_r_AWLEN => grp_copy_b1_fu_1306_m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE => grp_copy_b1_fu_1306_m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST => grp_copy_b1_fu_1306_m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK => grp_copy_b1_fu_1306_m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE => grp_copy_b1_fu_1306_m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT => grp_copy_b1_fu_1306_m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS => grp_copy_b1_fu_1306_m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION => grp_copy_b1_fu_1306_m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER => grp_copy_b1_fu_1306_m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID => grp_copy_b1_fu_1306_m_axi_in_r_WVALID,
        m_axi_in_r_WREADY => ap_const_logic_0,
        m_axi_in_r_WDATA => grp_copy_b1_fu_1306_m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB => grp_copy_b1_fu_1306_m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST => grp_copy_b1_fu_1306_m_axi_in_r_WLAST,
        m_axi_in_r_WID => grp_copy_b1_fu_1306_m_axi_in_r_WID,
        m_axi_in_r_WUSER => grp_copy_b1_fu_1306_m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID => grp_copy_b1_fu_1306_m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY => DATA_C1_B_I_ARREADY,
        m_axi_in_r_ARADDR => grp_copy_b1_fu_1306_m_axi_in_r_ARADDR,
        m_axi_in_r_ARID => grp_copy_b1_fu_1306_m_axi_in_r_ARID,
        m_axi_in_r_ARLEN => grp_copy_b1_fu_1306_m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE => grp_copy_b1_fu_1306_m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST => grp_copy_b1_fu_1306_m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK => grp_copy_b1_fu_1306_m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE => grp_copy_b1_fu_1306_m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT => grp_copy_b1_fu_1306_m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS => grp_copy_b1_fu_1306_m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION => grp_copy_b1_fu_1306_m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER => grp_copy_b1_fu_1306_m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID => DATA_C1_B_I_RVALID,
        m_axi_in_r_RREADY => grp_copy_b1_fu_1306_m_axi_in_r_RREADY,
        m_axi_in_r_RDATA => DATA_C1_B_I_RDATA,
        m_axi_in_r_RLAST => DATA_C1_B_I_RLAST,
        m_axi_in_r_RID => DATA_C1_B_I_RID,
        m_axi_in_r_RUSER => DATA_C1_B_I_RUSER,
        m_axi_in_r_RRESP => DATA_C1_B_I_RRESP,
        m_axi_in_r_BVALID => ap_const_logic_0,
        m_axi_in_r_BREADY => grp_copy_b1_fu_1306_m_axi_in_r_BREADY,
        m_axi_in_r_BRESP => ap_const_lv2_0,
        m_axi_in_r_BID => ap_const_lv1_0,
        m_axi_in_r_BUSER => ap_const_lv1_0,
        c1_b_i5 => c1_b_i5_reg_2961,
        out_r_address0 => grp_copy_b1_fu_1306_out_r_address0,
        out_r_ce0 => grp_copy_b1_fu_1306_out_r_ce0,
        out_r_we0 => grp_copy_b1_fu_1306_out_r_we0,
        out_r_d0 => grp_copy_b1_fu_1306_out_r_d0);

    grp_copy_out_fu_1314 : component copy_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copy_out_fu_1314_ap_start,
        ap_done => grp_copy_out_fu_1314_ap_done,
        ap_idle => grp_copy_out_fu_1314_ap_idle,
        ap_ready => grp_copy_out_fu_1314_ap_ready,
        m_axi_out_r_AWVALID => grp_copy_out_fu_1314_m_axi_out_r_AWVALID,
        m_axi_out_r_AWREADY => DATA_FC6_O_O_AWREADY,
        m_axi_out_r_AWADDR => grp_copy_out_fu_1314_m_axi_out_r_AWADDR,
        m_axi_out_r_AWID => grp_copy_out_fu_1314_m_axi_out_r_AWID,
        m_axi_out_r_AWLEN => grp_copy_out_fu_1314_m_axi_out_r_AWLEN,
        m_axi_out_r_AWSIZE => grp_copy_out_fu_1314_m_axi_out_r_AWSIZE,
        m_axi_out_r_AWBURST => grp_copy_out_fu_1314_m_axi_out_r_AWBURST,
        m_axi_out_r_AWLOCK => grp_copy_out_fu_1314_m_axi_out_r_AWLOCK,
        m_axi_out_r_AWCACHE => grp_copy_out_fu_1314_m_axi_out_r_AWCACHE,
        m_axi_out_r_AWPROT => grp_copy_out_fu_1314_m_axi_out_r_AWPROT,
        m_axi_out_r_AWQOS => grp_copy_out_fu_1314_m_axi_out_r_AWQOS,
        m_axi_out_r_AWREGION => grp_copy_out_fu_1314_m_axi_out_r_AWREGION,
        m_axi_out_r_AWUSER => grp_copy_out_fu_1314_m_axi_out_r_AWUSER,
        m_axi_out_r_WVALID => grp_copy_out_fu_1314_m_axi_out_r_WVALID,
        m_axi_out_r_WREADY => DATA_FC6_O_O_WREADY,
        m_axi_out_r_WDATA => grp_copy_out_fu_1314_m_axi_out_r_WDATA,
        m_axi_out_r_WSTRB => grp_copy_out_fu_1314_m_axi_out_r_WSTRB,
        m_axi_out_r_WLAST => grp_copy_out_fu_1314_m_axi_out_r_WLAST,
        m_axi_out_r_WID => grp_copy_out_fu_1314_m_axi_out_r_WID,
        m_axi_out_r_WUSER => grp_copy_out_fu_1314_m_axi_out_r_WUSER,
        m_axi_out_r_ARVALID => grp_copy_out_fu_1314_m_axi_out_r_ARVALID,
        m_axi_out_r_ARREADY => ap_const_logic_0,
        m_axi_out_r_ARADDR => grp_copy_out_fu_1314_m_axi_out_r_ARADDR,
        m_axi_out_r_ARID => grp_copy_out_fu_1314_m_axi_out_r_ARID,
        m_axi_out_r_ARLEN => grp_copy_out_fu_1314_m_axi_out_r_ARLEN,
        m_axi_out_r_ARSIZE => grp_copy_out_fu_1314_m_axi_out_r_ARSIZE,
        m_axi_out_r_ARBURST => grp_copy_out_fu_1314_m_axi_out_r_ARBURST,
        m_axi_out_r_ARLOCK => grp_copy_out_fu_1314_m_axi_out_r_ARLOCK,
        m_axi_out_r_ARCACHE => grp_copy_out_fu_1314_m_axi_out_r_ARCACHE,
        m_axi_out_r_ARPROT => grp_copy_out_fu_1314_m_axi_out_r_ARPROT,
        m_axi_out_r_ARQOS => grp_copy_out_fu_1314_m_axi_out_r_ARQOS,
        m_axi_out_r_ARREGION => grp_copy_out_fu_1314_m_axi_out_r_ARREGION,
        m_axi_out_r_ARUSER => grp_copy_out_fu_1314_m_axi_out_r_ARUSER,
        m_axi_out_r_RVALID => ap_const_logic_0,
        m_axi_out_r_RREADY => grp_copy_out_fu_1314_m_axi_out_r_RREADY,
        m_axi_out_r_RDATA => ap_const_lv32_0,
        m_axi_out_r_RLAST => ap_const_logic_0,
        m_axi_out_r_RID => ap_const_lv1_0,
        m_axi_out_r_RUSER => ap_const_lv1_0,
        m_axi_out_r_RRESP => ap_const_lv2_0,
        m_axi_out_r_BVALID => DATA_FC6_O_O_BVALID,
        m_axi_out_r_BREADY => grp_copy_out_fu_1314_m_axi_out_r_BREADY,
        m_axi_out_r_BRESP => DATA_FC6_O_O_BRESP,
        m_axi_out_r_BID => DATA_FC6_O_O_BID,
        m_axi_out_r_BUSER => DATA_FC6_O_O_BUSER,
        fc6_o_o15 => fc6_o_o1_reg_2936,
        fc6_o_address0 => grp_copy_out_fu_1314_fc6_o_address0,
        fc6_o_ce0 => grp_copy_out_fu_1314_fc6_o_ce0,
        fc6_o_q0 => fc6_o_q0);

    lenet_wrapper_fadbkb_x_U48 : component lenet_wrapper_fadbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_reg_1190,
        din1 => grp_fu_1323_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1323_p2);

    lenet_wrapper_fmucud_x_U49 : component lenet_wrapper_fmucud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => fc6_w_0_0_load_reg_3531,
        din1 => c5_o_2_0_0_load_reg_3536,
        ce => ap_const_logic_1,
        dout => grp_fu_1328_p2);

    lenet_wrapper_fcmdEe_x_U50 : component lenet_wrapper_fcmdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_1332_p0,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => grp_fu_1332_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_convolution1_fu_1223_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_convolution1_fu_1223_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_lv1_1 = exitcond_i1_fu_2114_p2))) then 
                    ap_reg_grp_convolution1_fu_1223_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_convolution1_fu_1223_ap_ready)) then 
                    ap_reg_grp_convolution1_fu_1223_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_convolution3_fu_1213_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_convolution3_fu_1213_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_1 = exitcond2_i2_fu_2332_p2))) then 
                    ap_reg_grp_convolution3_fu_1213_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_convolution3_fu_1213_ap_ready)) then 
                    ap_reg_grp_convolution3_fu_1213_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_convolution5_fu_1232_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_convolution5_fu_1232_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_lv1_1 = exitcond2_i4_fu_2656_p2))) then 
                    ap_reg_grp_convolution5_fu_1232_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_convolution5_fu_1232_ap_ready)) then 
                    ap_reg_grp_convolution5_fu_1232_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_copy_b1_fu_1306_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_copy_b1_fu_1306_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2))) then 
                    ap_reg_grp_copy_b1_fu_1306_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_copy_b1_fu_1306_ap_ready)) then 
                    ap_reg_grp_copy_b1_fu_1306_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_copy_b3_fu_1298_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_copy_b3_fu_1298_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2))) then 
                    ap_reg_grp_copy_b3_fu_1298_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_copy_b3_fu_1298_ap_ready)) then 
                    ap_reg_grp_copy_b3_fu_1298_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_copy_b5_fu_1290_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_copy_b5_fu_1290_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2))) then 
                    ap_reg_grp_copy_b5_fu_1290_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_copy_b5_fu_1290_ap_ready)) then 
                    ap_reg_grp_copy_b5_fu_1290_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_copy_i_fu_1282_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_copy_i_fu_1282_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2))) then 
                    ap_reg_grp_copy_i_fu_1282_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_copy_i_fu_1282_ap_ready)) then 
                    ap_reg_grp_copy_i_fu_1282_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_copy_out_fu_1314_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_copy_out_fu_1314_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_1 = exitcond1_i4_fu_2882_p2))) then 
                    ap_reg_grp_copy_out_fu_1314_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_copy_out_fu_1314_ap_ready)) then 
                    ap_reg_grp_copy_out_fu_1314_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_copy_w1_fu_1274_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_copy_w1_fu_1274_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2))) then 
                    ap_reg_grp_copy_w1_fu_1274_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_copy_w1_fu_1274_ap_ready)) then 
                    ap_reg_grp_copy_w1_fu_1274_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_copy_w3_fu_1266_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_copy_w3_fu_1266_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2))) then 
                    ap_reg_grp_copy_w3_fu_1266_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_copy_w3_fu_1266_ap_ready)) then 
                    ap_reg_grp_copy_w3_fu_1266_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_copy_w5_fu_1258_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_copy_w5_fu_1258_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2))) then 
                    ap_reg_grp_copy_w5_fu_1258_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_copy_w5_fu_1258_ap_ready)) then 
                    ap_reg_grp_copy_w5_fu_1258_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_max_pooling2_fu_1242_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_max_pooling2_fu_1242_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_lv1_1 = exitcond2_i1_fu_2160_p2))) then 
                    ap_reg_grp_max_pooling2_fu_1242_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_max_pooling2_fu_1242_ap_ready)) then 
                    ap_reg_grp_max_pooling2_fu_1242_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_max_pooling4_fu_1250_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_max_pooling4_fu_1250_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (ap_const_lv1_1 = exitcond2_i3_fu_2500_p2))) then 
                    ap_reg_grp_max_pooling4_fu_1250_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_max_pooling4_fu_1250_ap_ready)) then 
                    ap_reg_grp_max_pooling4_fu_1250_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_DONE_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_DONE_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                    if (not(((ap_const_boolean_1 = ap_block_state88_on_subcall_done) or (ap_const_logic_0 = ap_sig_ioackin_DATA_DONE_AWREADY)))) then 
                        ap_reg_ioackin_DATA_DONE_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = DATA_DONE_AWREADY) and (ap_block_state88_on_subcall_done = ap_const_boolean_0))) then 
                        ap_reg_ioackin_DATA_DONE_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_DONE_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_DONE_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                    if ((ap_sig_ioackin_DATA_DONE_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_DATA_DONE_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_DONE_WREADY)) then 
                        ap_reg_ioackin_DATA_DONE_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_START_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_START_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_17_fu_2016_p2 = ap_const_lv1_1))) then
                    if ((ap_block_state20_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_DATA_START_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_START_ARREADY)) then 
                        ap_reg_ioackin_DATA_START_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    c_i_reg_1202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                c_i_reg_1202 <= c_reg_3516;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_0 = exitcond1_i4_fu_2882_p2))) then 
                c_i_reg_1202 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_i1_reg_1025_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond3_i_fu_2057_p2))) then 
                i_i1_reg_1025 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_i1_reg_1025 <= i_reg_3221;
            end if; 
        end if;
    end process;

    i_i2_reg_1036_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_lv1_1 = exitcond1_i_fu_2211_p2))) then 
                i_i2_reg_1036 <= i_4_reg_3239;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_convolution1_fu_1223_ap_done = ap_const_logic_1))) then 
                i_i2_reg_1036 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i3_reg_1069_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_lv1_1 = exitcond1_i1_fu_2383_p2))) then 
                i_i3_reg_1069 <= i_5_reg_3295;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_max_pooling2_fu_1242_ap_done = ap_const_logic_1))) then 
                i_i3_reg_1069 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i4_reg_1102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) and (ap_const_lv1_1 = exitcond1_i2_fu_2547_p2))) then 
                i_i4_reg_1102 <= i_6_reg_3351;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_convolution3_fu_1213_ap_done = ap_const_logic_1))) then 
                i_i4_reg_1102 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i5_reg_1135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_lv1_1 = exitcond1_i3_fu_2695_p2))) then 
                i_i5_reg_1135 <= i_8_reg_3407;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_max_pooling4_fu_1250_ap_done = ap_const_logic_1))) then 
                i_i5_reg_1135 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i6_reg_1168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                i_i6_reg_1168 <= i_7_reg_3463;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_convolution5_fu_1232_ap_done = ap_const_logic_1))) then 
                i_i6_reg_1168 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_i_reg_990_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_1 = exitcond2_i_fu_2083_p2))) then 
                i_i_reg_990 <= i_3_reg_3185;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_block_state29_on_subcall_done = ap_const_boolean_0))) then 
                i_i_reg_990 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    invdar10_reg_887_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_2_fu_1754_p2) and (ap_const_lv1_1 = tmp_3_fu_1760_p2) and (ap_const_lv1_1 = tmp_4_fu_1766_p2) and (ap_const_lv1_1 = tmp_5_fu_1772_p2))) then 
                invdar10_reg_887 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_8_fu_1789_p2))) then 
                invdar10_reg_887 <= indvarinc10_fu_1783_p2;
            end if; 
        end if;
    end process;

    invdar11_reg_898_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_8_fu_1789_p2))) then 
                invdar11_reg_898 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_13_fu_1914_p2) and (ap_const_lv1_1 = tmp_10_fu_1896_p2) and (ap_const_lv1_1 = tmp_11_fu_1902_p2) and (ap_const_lv1_1 = tmp_12_fu_1908_p2))) then 
                invdar11_reg_898 <= indvarinc11_reg_3089;
            end if; 
        end if;
    end process;

    invdar12_reg_910_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_10_fu_1896_p2) and (ap_const_lv1_1 = tmp_11_fu_1902_p2) and (ap_const_lv1_0 = tmp_12_fu_1908_p2))) then 
                invdar12_reg_910 <= indvarinc12_reg_3099;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                invdar12_reg_910 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar13_reg_922_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_10_fu_1896_p2) and (ap_const_lv1_0 = tmp_11_fu_1902_p2))) then 
                invdar13_reg_922 <= indvarinc13_reg_3109;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                invdar13_reg_922 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar14_reg_934_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_10_fu_1896_p2))) then 
                invdar14_reg_934 <= indvarinc14_fu_1890_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                invdar14_reg_934 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar15_reg_945_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_10_fu_1896_p2) and (ap_const_lv1_1 = tmp_11_fu_1902_p2) and (ap_const_lv1_1 = tmp_12_fu_1908_p2) and (ap_const_lv1_1 = tmp_13_fu_1914_p2))) then 
                invdar15_reg_945 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_14_fu_1931_p2))) then 
                invdar15_reg_945 <= indvarinc15_fu_1925_p2;
            end if; 
        end if;
    end process;

    invdar16_reg_956_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = tmp_14_fu_1931_p2))) then 
                invdar16_reg_956 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_16_fu_1999_p2) and (ap_const_lv1_1 = tmp_15_fu_1993_p2))) then 
                invdar16_reg_956 <= indvarinc16_reg_3144;
            end if; 
        end if;
    end process;

    invdar17_reg_968_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_15_fu_1993_p2))) then 
                invdar17_reg_968 <= indvarinc17_fu_1987_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                invdar17_reg_968 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    invdar18_reg_979_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_1 = tmp_15_fu_1993_p2) and (ap_const_lv1_1 = tmp_16_fu_1999_p2))) then 
                invdar18_reg_979 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_io = ap_const_boolean_0) and (tmp_17_fu_2016_p2 = ap_const_lv1_0))) then 
                invdar18_reg_979 <= indvarinc18_fu_2010_p2;
            end if; 
        end if;
    end process;

    invdar1_reg_794_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_1502_p2) and (ap_const_lv1_1 = tmp_s_fu_1508_p2))) then 
                invdar1_reg_794 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_9_fu_1611_p2) and (ap_const_lv1_1 = tmp_6_fu_1599_p2) and (ap_const_lv1_1 = tmp_7_fu_1605_p2))) then 
                invdar1_reg_794 <= indvarinc1_reg_2997;
            end if; 
        end if;
    end process;

    invdar2_reg_876_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = tmp_2_fu_1754_p2))) then 
                invdar2_reg_876 <= indvarinc2_fu_1748_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                invdar2_reg_876 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar3_reg_771_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_s_fu_1508_p2) and (ap_const_lv1_1 = tmp_fu_1502_p2))) then 
                invdar3_reg_771 <= indvarinc4_reg_2976;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar3_reg_771 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    invdar4_reg_806_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_6_fu_1599_p2) and (ap_const_lv1_0 = tmp_7_fu_1605_p2))) then 
                invdar4_reg_806 <= indvarinc3_reg_3007;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                invdar4_reg_806 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar5_reg_818_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_6_fu_1599_p2))) then 
                invdar5_reg_818 <= indvarinc5_fu_1593_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                invdar5_reg_818 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar6_reg_829_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_6_fu_1599_p2) and (ap_const_lv1_1 = tmp_7_fu_1605_p2) and (ap_const_lv1_1 = tmp_9_fu_1611_p2))) then 
                invdar6_reg_829 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_1_fu_1628_p2))) then 
                invdar6_reg_829 <= indvarinc6_fu_1622_p2;
            end if; 
        end if;
    end process;

    invdar7_reg_783_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_fu_1502_p2))) then 
                invdar7_reg_783 <= indvarinc8_fu_1496_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                invdar7_reg_783 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    invdar8_reg_840_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_1_fu_1628_p2))) then 
                invdar8_reg_840 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = tmp_5_fu_1772_p2) and (ap_const_lv1_1 = tmp_2_fu_1754_p2) and (ap_const_lv1_1 = tmp_3_fu_1760_p2) and (ap_const_lv1_1 = tmp_4_fu_1766_p2))) then 
                invdar8_reg_840 <= indvarinc7_reg_3039;
            end if; 
        end if;
    end process;

    invdar9_reg_852_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_2_fu_1754_p2) and (ap_const_lv1_1 = tmp_3_fu_1760_p2) and (ap_const_lv1_0 = tmp_4_fu_1766_p2))) then 
                invdar9_reg_852 <= indvarinc9_reg_3049;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                invdar9_reg_852 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar_reg_864_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_2_fu_1754_p2) and (ap_const_lv1_0 = tmp_3_fu_1760_p2))) then 
                invdar_reg_864 <= indvarinc_reg_3059;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                invdar_reg_864 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_i1_reg_1047_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_lv1_0 = exitcond2_i1_fu_2160_p2))) then 
                j_i1_reg_1047 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_lv1_1 = exitcond_i2_fu_2238_p2))) then 
                j_i1_reg_1047 <= j_3_reg_3252;
            end if; 
        end if;
    end process;

    j_i2_reg_1080_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = exitcond2_i2_fu_2332_p2))) then 
                j_i2_reg_1080 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_const_lv1_1 = exitcond_i3_fu_2410_p2))) then 
                j_i2_reg_1080 <= j_4_reg_3308;
            end if; 
        end if;
    end process;

    j_i3_reg_1113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (ap_const_lv1_0 = exitcond2_i3_fu_2500_p2))) then 
                j_i3_reg_1113 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (ap_const_lv1_1 = exitcond_i5_fu_2574_p2))) then 
                j_i3_reg_1113 <= j_5_reg_3364;
            end if; 
        end if;
    end process;

    j_i4_reg_1146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_lv1_0 = exitcond2_i4_fu_2656_p2))) then 
                j_i4_reg_1146 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and (ap_const_lv1_1 = exitcond_i6_fu_2722_p2))) then 
                j_i4_reg_1146 <= j_6_reg_3420;
            end if; 
        end if;
    end process;

    j_i_reg_1001_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond3_i_fu_2057_p2))) then 
                j_i_reg_1001 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_1 = l_i_phi_fu_1017_p4))) then 
                j_i_reg_1001 <= j_reg_3203;
            end if; 
        end if;
    end process;

    k_i1_reg_1091_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_lv1_0 = exitcond1_i1_fu_2383_p2))) then 
                k_i1_reg_1091 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                k_i1_reg_1091 <= k_1_reg_3326;
            end if; 
        end if;
    end process;

    k_i2_reg_1124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) and (ap_const_lv1_0 = exitcond1_i2_fu_2547_p2))) then 
                k_i2_reg_1124 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                k_i2_reg_1124 <= k_2_reg_3382;
            end if; 
        end if;
    end process;

    k_i3_reg_1157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_lv1_0 = exitcond1_i3_fu_2695_p2))) then 
                k_i3_reg_1157 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                k_i3_reg_1157 <= k_3_reg_3438;
            end if; 
        end if;
    end process;

    k_i_reg_1058_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_lv1_0 = exitcond1_i_fu_2211_p2))) then 
                k_i_reg_1058 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                k_i_reg_1058 <= k_reg_3270;
            end if; 
        end if;
    end process;

    l_i_reg_1012_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond2_i_fu_2083_p2))) then 
                l_i_reg_1012 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                l_i_reg_1012 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    n_i_reg_1179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_1 = exitcond_i4_fu_2787_p2))) then 
                n_i_reg_1179 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                n_i_reg_1179 <= n_reg_3498;
            end if; 
        end if;
    end process;

    tmp_i_reg_1190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                tmp_i_reg_1190 <= grp_fu_1323_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_0 = exitcond1_i4_fu_2882_p2))) then 
                tmp_i_reg_1190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    DATA_DONE_addr_reg_2931(29 downto 0) <= tmp_46_fu_1367_p1(29 downto 0);
                    DATA_START_addr_reg_2925(29 downto 0) <= tmp_42_fu_1347_p1(29 downto 0);
                c1_b_i5_reg_2961 <= c1_b_i(31 downto 2);
                c1_w_i3_reg_2966 <= c1_w_i(31 downto 2);
                c3_b_i9_reg_2951 <= c3_b_i(31 downto 2);
                c3_w_i7_reg_2956 <= c3_w_i(31 downto 2);
                c5_b_i1_reg_2941 <= c5_b_i(31 downto 2);
                c5_w_i1_reg_2946 <= c5_w_i(31 downto 2);
                fc6_o_o1_reg_2936 <= fc6_o_o(31 downto 2);
                image_in_i1_reg_2971 <= image_in_i(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (DATA_START_RVALID = ap_const_logic_1))) then
                DATA_START_addr_read_reg_3168 <= DATA_START_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                c1_o_1_load_reg_3275 <= c1_o_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                c1_o_2_addr_reg_3262 <= tmp_108_cast_fu_2232_p1(13 - 1 downto 0);
                k_reg_3270 <= k_fu_2244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                c3_o_1_load_reg_3387 <= c3_o_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                c3_o_2_addr_reg_3369 <= tmp_119_cast_fu_2568_p1(11 - 1 downto 0);
                k_2_reg_3382 <= k_2_fu_2580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                c5_o_1_0_0_load_reg_3473 <= c5_o_1_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                c5_o_2_0_0_load_reg_3536 <= c5_o_2_0_0_q0;
                fc6_w_0_0_load_reg_3531 <= fc6_w_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                c_reg_3516 <= c_fu_2919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                fc6_b_load_reg_3551 <= fc6_b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_0 = exitcond1_i4_fu_2882_p2))) then
                fc6_o_addr_reg_3503 <= n_i_cast2_fu_2847_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                fc6_w_0_0_addr_1_reg_3195 <= tmp_89_cast_fu_2078_p1(11 - 1 downto 0);
                j_reg_3203 <= j_fu_2089_p2;
                tmp_85_reg_3190 <= tmp_85_fu_2073_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_3_reg_3185 <= i_3_fu_2063_p2;
                    tmp_84_reg_3177(11 downto 3) <= tmp_84_fu_2051_p2(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                i_4_reg_3239 <= i_4_fu_2166_p2;
                    tmp_92_cast_reg_3231(9 downto 2) <= tmp_92_cast_fu_2156_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                i_5_reg_3295 <= i_5_fu_2338_p2;
                    tmp_96_cast_reg_3287(8 downto 1) <= tmp_96_cast_fu_2328_p1(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                i_6_reg_3351 <= i_6_fu_2506_p2;
                    tmp_99_reg_3343(8 downto 1) <= tmp_99_fu_2494_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                i_7_reg_3463 <= i_7_fu_2793_p2;
                    i_i6_cast3_reg_3455(6 downto 0) <= i_i6_cast3_fu_2782_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                i_8_reg_3407 <= i_8_fu_2662_p2;
                tmp_107_reg_3399 <= tmp_107_fu_2650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                    i_i1_cast_reg_3213(3 downto 0) <= i_i1_cast_fu_2109_p1(3 downto 0);
                i_reg_3221 <= i_fu_2120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                indvarinc11_reg_3089 <= indvarinc11_fu_1795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                indvarinc12_reg_3099 <= indvarinc12_fu_1833_p2;
                tmp_72_reg_3094 <= tmp_72_fu_1827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                indvarinc13_reg_3109 <= indvarinc13_fu_1870_p2;
                tmp_76_reg_3104 <= tmp_76_fu_1864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                indvarinc16_reg_3144 <= indvarinc16_fu_1967_p2;
                    tmp_80_reg_3139(11 downto 3) <= tmp_80_fu_1961_p2(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                indvarinc1_reg_2997 <= indvarinc1_fu_1536_p2;
                tmp_52_reg_2992 <= tmp_52_fu_1530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                indvarinc3_reg_3007 <= indvarinc3_fu_1573_p2;
                tmp_56_reg_3002 <= tmp_56_fu_1567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvarinc4_reg_2976 <= indvarinc4_fu_1477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                indvarinc7_reg_3039 <= indvarinc7_fu_1664_p2;
                    tmp_60_reg_3034(31 downto 1) <= tmp_60_fu_1658_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                indvarinc9_reg_3049 <= indvarinc9_fu_1691_p2;
                tmp_63_reg_3044 <= tmp_63_fu_1685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                indvarinc_reg_3059 <= indvarinc_fu_1728_p2;
                tmp_67_reg_3054 <= tmp_67_fu_1722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                j_3_reg_3252 <= j_3_fu_2217_p2;
                    tmp_96_reg_3244(13 downto 2) <= tmp_96_fu_2205_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                j_4_reg_3308 <= j_4_fu_2389_p2;
                    tmp_103_reg_3300(11 downto 1) <= tmp_103_fu_2377_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                j_5_reg_3364 <= j_5_fu_2553_p2;
                    tmp_110_reg_3356(11 downto 1) <= tmp_110_fu_2541_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                j_6_reg_3420 <= j_6_fu_2701_p2;
                tmp_114_reg_3412 <= tmp_114_fu_2689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                k_1_reg_3326 <= k_1_fu_2416_p2;
                p2_o_2_addr_reg_3313 <= tmp_115_cast_fu_2404_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                k_3_reg_3438 <= k_3_fu_2728_p2;
                p4_o_2_addr_reg_3425 <= tmp_123_cast_fu_2716_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                    n_i_cast2_reg_3485(3 downto 0) <= n_i_cast2_fu_2847_p1(3 downto 0);
                n_reg_3498 <= n_fu_2888_p2;
                    tmp_120_reg_3490(11 downto 3) <= tmp_120_fu_2876_p2(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                p2_o_1_load_reg_3331 <= p2_o_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                p4_o_1_load_reg_3443 <= p4_o_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_18_reg_3173 <= tmp_18_fu_2022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                tmp_19_i_reg_3541 <= grp_fu_1328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                tmp_24_reg_3282 <= grp_fu_1332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                tmp_29_reg_3338 <= grp_fu_1332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                tmp_34_reg_3480 <= grp_fu_1332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                tmp_39_reg_3394 <= grp_fu_1332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                tmp_44_reg_3450 <= grp_fu_1332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                tmp_i_66_reg_3556 <= grp_fu_1323_p2;
            end if;
        end if;
    end process;
    DATA_START_addr_reg_2925(31 downto 30) <= "00";
    DATA_DONE_addr_reg_2931(31 downto 30) <= "00";
    tmp_60_reg_3034(0) <= '0';
    tmp_80_reg_3139(2 downto 0) <= "000";
    tmp_84_reg_3177(2 downto 0) <= "000";
    i_i1_cast_reg_3213(31 downto 4) <= "0000000000000000000000000000";
    tmp_92_cast_reg_3231(1 downto 0) <= "00";
    tmp_96_reg_3244(1 downto 0) <= "00";
    tmp_96_cast_reg_3287(0) <= '0';
    tmp_103_reg_3300(0) <= '0';
    tmp_99_reg_3343(0) <= '0';
    tmp_110_reg_3356(0) <= '0';
    i_i6_cast3_reg_3455(31 downto 7) <= "0000000000000000000000000";
    n_i_cast2_reg_3485(31 downto 4) <= "0000000000000000000000000000";
    tmp_120_reg_3490(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state20, tmp_17_fu_2016_p2, ap_CS_fsm_state27, DATA_DONE_BVALID, DATA_START_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_block_state20_io, tmp_18_fu_2022_p2, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state34, exitcond_i1_fu_2114_p2, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state65, exitcond_i4_fu_2787_p2, ap_CS_fsm_state69, exitcond1_i4_fu_2882_p2, ap_CS_fsm_state70, exitcond_i7_fu_2913_p2, grp_convolution3_fu_1213_ap_done, grp_convolution1_fu_1223_ap_done, grp_convolution5_fu_1232_ap_done, grp_max_pooling2_fu_1242_ap_done, grp_max_pooling4_fu_1250_ap_done, tmp_s_fu_1508_p2, tmp_fu_1502_p2, tmp_9_fu_1611_p2, tmp_6_fu_1599_p2, tmp_7_fu_1605_p2, tmp_1_fu_1628_p2, tmp_5_fu_1772_p2, tmp_2_fu_1754_p2, tmp_3_fu_1760_p2, tmp_4_fu_1766_p2, tmp_8_fu_1789_p2, tmp_13_fu_1914_p2, tmp_10_fu_1896_p2, tmp_11_fu_1902_p2, tmp_12_fu_1908_p2, tmp_14_fu_1931_p2, tmp_16_fu_1999_p2, tmp_15_fu_1993_p2, ap_CS_fsm_state29, ap_block_state29_on_subcall_done, exitcond2_i_fu_2083_p2, l_i_phi_fu_1017_p4, exitcond3_i_fu_2057_p2, ap_CS_fsm_state36, exitcond1_i_fu_2211_p2, exitcond_i2_fu_2238_p2, exitcond2_i1_fu_2160_p2, ap_CS_fsm_state43, exitcond1_i1_fu_2383_p2, exitcond_i3_fu_2410_p2, exitcond2_i2_fu_2332_p2, ap_CS_fsm_state50, exitcond1_i2_fu_2547_p2, exitcond_i5_fu_2574_p2, exitcond2_i3_fu_2500_p2, ap_CS_fsm_state57, exitcond1_i3_fu_2695_p2, exitcond_i6_fu_2722_p2, exitcond2_i4_fu_2656_p2, ap_CS_fsm_state64, ap_sig_ioackin_DATA_DONE_AWREADY, ap_block_state88_on_subcall_done, ap_sig_ioackin_DATA_DONE_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_fu_1502_p2) and (ap_const_lv1_1 = tmp_s_fu_1508_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_s_fu_1508_p2) and (ap_const_lv1_1 = tmp_fu_1502_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_6_fu_1599_p2) and (ap_const_lv1_1 = tmp_7_fu_1605_p2) and (ap_const_lv1_1 = tmp_9_fu_1611_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_9_fu_1611_p2) and (ap_const_lv1_1 = tmp_6_fu_1599_p2) and (ap_const_lv1_1 = tmp_7_fu_1605_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_6_fu_1599_p2) and (ap_const_lv1_0 = tmp_7_fu_1605_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_1_fu_1628_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_2_fu_1754_p2) and (ap_const_lv1_1 = tmp_3_fu_1760_p2) and (ap_const_lv1_1 = tmp_4_fu_1766_p2) and (ap_const_lv1_1 = tmp_5_fu_1772_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = tmp_5_fu_1772_p2) and (ap_const_lv1_1 = tmp_2_fu_1754_p2) and (ap_const_lv1_1 = tmp_3_fu_1760_p2) and (ap_const_lv1_1 = tmp_4_fu_1766_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_2_fu_1754_p2) and (ap_const_lv1_1 = tmp_3_fu_1760_p2) and (ap_const_lv1_0 = tmp_4_fu_1766_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = tmp_2_fu_1754_p2) and (ap_const_lv1_0 = tmp_3_fu_1760_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_8_fu_1789_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_10_fu_1896_p2) and (ap_const_lv1_1 = tmp_11_fu_1902_p2) and (ap_const_lv1_1 = tmp_12_fu_1908_p2) and (ap_const_lv1_1 = tmp_13_fu_1914_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_13_fu_1914_p2) and (ap_const_lv1_1 = tmp_10_fu_1896_p2) and (ap_const_lv1_1 = tmp_11_fu_1902_p2) and (ap_const_lv1_1 = tmp_12_fu_1908_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_10_fu_1896_p2) and (ap_const_lv1_1 = tmp_11_fu_1902_p2) and (ap_const_lv1_0 = tmp_12_fu_1908_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_10_fu_1896_p2) and (ap_const_lv1_0 = tmp_11_fu_1902_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = tmp_14_fu_1931_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_1 = tmp_15_fu_1993_p2) and (ap_const_lv1_1 = tmp_16_fu_1999_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = tmp_16_fu_1999_p2) and (ap_const_lv1_1 = tmp_15_fu_1993_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_17_fu_2016_p2 = ap_const_lv1_1) and (ap_block_state20_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_io = ap_const_boolean_0) and (tmp_17_fu_2016_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (DATA_START_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (tmp_18_fu_2022_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_block_state29_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond3_i_fu_2057_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_1 = exitcond2_i_fu_2083_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_1 = l_i_phi_fu_1017_p4))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_lv1_1 = exitcond_i1_fu_2114_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_convolution1_fu_1223_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_lv1_0 = exitcond2_i1_fu_2160_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_lv1_1 = exitcond1_i_fu_2211_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_lv1_1 = exitcond_i2_fu_2238_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_max_pooling2_fu_1242_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = exitcond2_i2_fu_2332_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_lv1_1 = exitcond1_i1_fu_2383_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_const_lv1_1 = exitcond_i3_fu_2410_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_convolution3_fu_1213_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (ap_const_lv1_0 = exitcond2_i3_fu_2500_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (ap_const_lv1_1 = exitcond1_i2_fu_2547_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (ap_const_lv1_1 = exitcond_i5_fu_2574_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_max_pooling4_fu_1250_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_lv1_0 = exitcond2_i4_fu_2656_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_lv1_1 = exitcond1_i3_fu_2695_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (ap_const_lv1_1 = exitcond_i6_fu_2722_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_convolution5_fu_1232_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_1 = exitcond_i4_fu_2787_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_0 = exitcond1_i4_fu_2882_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (ap_const_lv1_1 = exitcond_i7_fu_2913_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and not(((ap_const_boolean_1 = ap_block_state88_on_subcall_done) or (ap_const_logic_0 = ap_sig_ioackin_DATA_DONE_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state89) and (ap_sig_ioackin_DATA_DONE_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state94) and (DATA_DONE_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DATA_C1_B_I_ARVALID_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_b1_fu_1306_m_axi_in_r_ARVALID, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_C1_B_I_ARVALID <= grp_copy_b1_fu_1306_m_axi_in_r_ARVALID;
        else 
            DATA_C1_B_I_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C1_B_I_RREADY_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_b1_fu_1306_m_axi_in_r_RREADY, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_C1_B_I_RREADY <= grp_copy_b1_fu_1306_m_axi_in_r_RREADY;
        else 
            DATA_C1_B_I_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C1_W_I_ARVALID_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_w1_fu_1274_m_axi_in_r_ARVALID, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_C1_W_I_ARVALID <= grp_copy_w1_fu_1274_m_axi_in_r_ARVALID;
        else 
            DATA_C1_W_I_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C1_W_I_RREADY_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_w1_fu_1274_m_axi_in_r_RREADY, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_C1_W_I_RREADY <= grp_copy_w1_fu_1274_m_axi_in_r_RREADY;
        else 
            DATA_C1_W_I_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C3_B_I_ARVALID_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_b3_fu_1298_m_axi_in_r_ARVALID, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_C3_B_I_ARVALID <= grp_copy_b3_fu_1298_m_axi_in_r_ARVALID;
        else 
            DATA_C3_B_I_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C3_B_I_RREADY_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_b3_fu_1298_m_axi_in_r_RREADY, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_C3_B_I_RREADY <= grp_copy_b3_fu_1298_m_axi_in_r_RREADY;
        else 
            DATA_C3_B_I_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C3_W_I_ARVALID_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_w3_fu_1266_m_axi_in_r_ARVALID, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_C3_W_I_ARVALID <= grp_copy_w3_fu_1266_m_axi_in_r_ARVALID;
        else 
            DATA_C3_W_I_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C3_W_I_RREADY_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_w3_fu_1266_m_axi_in_r_RREADY, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_C3_W_I_RREADY <= grp_copy_w3_fu_1266_m_axi_in_r_RREADY;
        else 
            DATA_C3_W_I_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_DONE_AWVALID_assign_proc : process(ap_CS_fsm_state88, ap_reg_ioackin_DATA_DONE_AWREADY, ap_block_state88_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (ap_block_state88_on_subcall_done = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_DATA_DONE_AWREADY))) then 
            DATA_DONE_AWVALID <= ap_const_logic_1;
        else 
            DATA_DONE_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_DONE_BREADY_assign_proc : process(ap_CS_fsm_state94, DATA_DONE_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) and (DATA_DONE_BVALID = ap_const_logic_1))) then 
            DATA_DONE_BREADY <= ap_const_logic_1;
        else 
            DATA_DONE_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_DONE_WVALID_assign_proc : process(ap_CS_fsm_state89, ap_reg_ioackin_DATA_DONE_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) and (ap_const_logic_0 = ap_reg_ioackin_DATA_DONE_WREADY))) then 
            DATA_DONE_WVALID <= ap_const_logic_1;
        else 
            DATA_DONE_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_DONE_blk_n_AW_assign_proc : process(m_axi_DATA_DONE_AWREADY, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            DATA_DONE_blk_n_AW <= m_axi_DATA_DONE_AWREADY;
        else 
            DATA_DONE_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    DATA_DONE_blk_n_B_assign_proc : process(m_axi_DATA_DONE_BVALID, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            DATA_DONE_blk_n_B <= m_axi_DATA_DONE_BVALID;
        else 
            DATA_DONE_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    DATA_DONE_blk_n_W_assign_proc : process(m_axi_DATA_DONE_WREADY, ap_CS_fsm_state89)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            DATA_DONE_blk_n_W <= m_axi_DATA_DONE_WREADY;
        else 
            DATA_DONE_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    DATA_FC6_B_I_ARVALID_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_b5_fu_1290_m_axi_in_r_ARVALID, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_FC6_B_I_ARVALID <= grp_copy_b5_fu_1290_m_axi_in_r_ARVALID;
        else 
            DATA_FC6_B_I_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_B_I_RREADY_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_b5_fu_1290_m_axi_in_r_RREADY, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_FC6_B_I_RREADY <= grp_copy_b5_fu_1290_m_axi_in_r_RREADY;
        else 
            DATA_FC6_B_I_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_O_O_AWVALID_assign_proc : process(ap_CS_fsm_state88, tmp_18_reg_3173, ap_CS_fsm_state69, exitcond1_i4_fu_2882_p2, grp_copy_out_fu_1314_m_axi_out_r_AWVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_1 = exitcond1_i4_fu_2882_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state88) and (ap_const_lv1_1 = tmp_18_reg_3173)))) then 
            DATA_FC6_O_O_AWVALID <= grp_copy_out_fu_1314_m_axi_out_r_AWVALID;
        else 
            DATA_FC6_O_O_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_O_O_BREADY_assign_proc : process(ap_CS_fsm_state88, tmp_18_reg_3173, ap_CS_fsm_state69, exitcond1_i4_fu_2882_p2, grp_copy_out_fu_1314_m_axi_out_r_BREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_1 = exitcond1_i4_fu_2882_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state88) and (ap_const_lv1_1 = tmp_18_reg_3173)))) then 
            DATA_FC6_O_O_BREADY <= grp_copy_out_fu_1314_m_axi_out_r_BREADY;
        else 
            DATA_FC6_O_O_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_O_O_WVALID_assign_proc : process(ap_CS_fsm_state88, tmp_18_reg_3173, ap_CS_fsm_state69, exitcond1_i4_fu_2882_p2, grp_copy_out_fu_1314_m_axi_out_r_WVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_1 = exitcond1_i4_fu_2882_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state88) and (ap_const_lv1_1 = tmp_18_reg_3173)))) then 
            DATA_FC6_O_O_WVALID <= grp_copy_out_fu_1314_m_axi_out_r_WVALID;
        else 
            DATA_FC6_O_O_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_W_I_ARVALID_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_w5_fu_1258_m_axi_in_r_ARVALID, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_FC6_W_I_ARVALID <= grp_copy_w5_fu_1258_m_axi_in_r_ARVALID;
        else 
            DATA_FC6_W_I_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_W_I_RREADY_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_w5_fu_1258_m_axi_in_r_RREADY, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_FC6_W_I_RREADY <= grp_copy_w5_fu_1258_m_axi_in_r_RREADY;
        else 
            DATA_FC6_W_I_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_IMAGE_IN_I_ARVALID_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_i_fu_1282_m_axi_in_r_ARVALID, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_IMAGE_IN_I_ARVALID <= grp_copy_i_fu_1282_m_axi_in_r_ARVALID;
        else 
            DATA_IMAGE_IN_I_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_IMAGE_IN_I_RREADY_assign_proc : process(tmp_18_fu_2022_p2, ap_CS_fsm_state28, grp_copy_i_fu_1282_m_axi_in_r_RREADY, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_18_fu_2022_p2)))) then 
            DATA_IMAGE_IN_I_RREADY <= grp_copy_i_fu_1282_m_axi_in_r_RREADY;
        else 
            DATA_IMAGE_IN_I_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_START_ARVALID_assign_proc : process(ap_CS_fsm_state20, tmp_17_fu_2016_p2, ap_reg_ioackin_DATA_START_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_17_fu_2016_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_DATA_START_ARREADY))) then 
            DATA_START_ARVALID <= ap_const_logic_1;
        else 
            DATA_START_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_START_RREADY_assign_proc : process(ap_CS_fsm_state27, DATA_START_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (DATA_START_RVALID = ap_const_logic_1))) then 
            DATA_START_RREADY <= ap_const_logic_1;
        else 
            DATA_START_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_START_blk_n_AR_assign_proc : process(m_axi_DATA_START_ARREADY, ap_CS_fsm_state20, tmp_17_fu_2016_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_17_fu_2016_p2 = ap_const_lv1_1))) then 
            DATA_START_blk_n_AR <= m_axi_DATA_START_ARREADY;
        else 
            DATA_START_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_START_blk_n_R_assign_proc : process(m_axi_DATA_START_RVALID, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            DATA_START_blk_n_R <= m_axi_DATA_START_RVALID;
        else 
            DATA_START_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);

    ap_block_state20_io_assign_proc : process(tmp_17_fu_2016_p2, ap_sig_ioackin_DATA_START_ARREADY)
    begin
                ap_block_state20_io <= ((tmp_17_fu_2016_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_DATA_START_ARREADY));
    end process;


    ap_block_state29_on_subcall_done_assign_proc : process(grp_copy_w5_fu_1258_ap_done, grp_copy_w3_fu_1266_ap_done, grp_copy_w1_fu_1274_ap_done, grp_copy_i_fu_1282_ap_done, grp_copy_b5_fu_1290_ap_done, grp_copy_b3_fu_1298_ap_done, grp_copy_b1_fu_1306_ap_done)
    begin
                ap_block_state29_on_subcall_done <= ((ap_const_logic_0 = grp_copy_i_fu_1282_ap_done) or (ap_const_logic_0 = grp_copy_w1_fu_1274_ap_done) or (ap_const_logic_0 = grp_copy_b1_fu_1306_ap_done) or (ap_const_logic_0 = grp_copy_w3_fu_1266_ap_done) or (ap_const_logic_0 = grp_copy_b3_fu_1298_ap_done) or (ap_const_logic_0 = grp_copy_w5_fu_1258_ap_done) or (ap_const_logic_0 = grp_copy_b5_fu_1290_ap_done));
    end process;


    ap_block_state88_on_subcall_done_assign_proc : process(tmp_18_reg_3173, grp_copy_out_fu_1314_ap_done)
    begin
                ap_block_state88_on_subcall_done <= ((ap_const_lv1_1 = tmp_18_reg_3173) and (ap_const_logic_0 = grp_copy_out_fu_1314_ap_done));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state94, DATA_DONE_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) and (DATA_DONE_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state94, DATA_DONE_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) and (DATA_DONE_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_DATA_DONE_AWREADY_assign_proc : process(DATA_DONE_AWREADY, ap_reg_ioackin_DATA_DONE_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_DATA_DONE_AWREADY)) then 
            ap_sig_ioackin_DATA_DONE_AWREADY <= DATA_DONE_AWREADY;
        else 
            ap_sig_ioackin_DATA_DONE_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_DONE_WREADY_assign_proc : process(DATA_DONE_WREADY, ap_reg_ioackin_DATA_DONE_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_DATA_DONE_WREADY)) then 
            ap_sig_ioackin_DATA_DONE_WREADY <= DATA_DONE_WREADY;
        else 
            ap_sig_ioackin_DATA_DONE_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_START_ARREADY_assign_proc : process(DATA_START_ARREADY, ap_reg_ioackin_DATA_START_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_DATA_START_ARREADY)) then 
            ap_sig_ioackin_DATA_START_ARREADY <= DATA_START_ARREADY;
        else 
            ap_sig_ioackin_DATA_START_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    c1_b_address0_assign_proc : process(ap_CS_fsm_state7, grp_convolution1_fu_1223_conv1_b_address0, grp_copy_b1_fu_1306_out_r_address0, ap_CS_fsm_state29, ap_CS_fsm_state36, invdar6_cast_fu_1617_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c1_b_address0 <= invdar6_cast_fu_1617_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c1_b_address0 <= grp_copy_b1_fu_1306_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c1_b_address0 <= grp_convolution1_fu_1223_conv1_b_address0;
        else 
            c1_b_address0 <= "XXX";
        end if; 
    end process;


    c1_b_ce0_assign_proc : process(ap_CS_fsm_state7, grp_convolution1_fu_1223_conv1_b_ce0, grp_copy_b1_fu_1306_out_r_ce0, ap_CS_fsm_state29, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c1_b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c1_b_ce0 <= grp_copy_b1_fu_1306_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c1_b_ce0 <= grp_convolution1_fu_1223_conv1_b_ce0;
        else 
            c1_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_b_d0_assign_proc : process(ap_CS_fsm_state7, grp_copy_b1_fu_1306_out_r_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c1_b_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c1_b_d0 <= grp_copy_b1_fu_1306_out_r_d0;
        else 
            c1_b_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c1_b_we0_assign_proc : process(ap_CS_fsm_state7, grp_copy_b1_fu_1306_out_r_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c1_b_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c1_b_we0 <= grp_copy_b1_fu_1306_out_r_we0;
        else 
            c1_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_o_1_address0_assign_proc : process(ap_CS_fsm_state39, grp_convolution1_fu_1223_output_r_address0, ap_CS_fsm_state36, tmp_108_cast_fu_2232_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            c1_o_1_address0 <= tmp_108_cast_fu_2232_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c1_o_1_address0 <= grp_convolution1_fu_1223_output_r_address0;
        else 
            c1_o_1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    c1_o_1_ce0_assign_proc : process(ap_CS_fsm_state39, grp_convolution1_fu_1223_output_r_ce0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            c1_o_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c1_o_1_ce0 <= grp_convolution1_fu_1223_output_r_ce0;
        else 
            c1_o_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_o_1_we0_assign_proc : process(grp_convolution1_fu_1223_output_r_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c1_o_1_we0 <= grp_convolution1_fu_1223_output_r_we0;
        else 
            c1_o_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_o_2_address0_assign_proc : process(c1_o_2_addr_reg_3262, grp_max_pooling2_fu_1242_c1_o_2_address0, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            c1_o_2_address0 <= c1_o_2_addr_reg_3262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            c1_o_2_address0 <= grp_max_pooling2_fu_1242_c1_o_2_address0;
        else 
            c1_o_2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    c1_o_2_ce0_assign_proc : process(grp_max_pooling2_fu_1242_c1_o_2_ce0, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            c1_o_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            c1_o_2_ce0 <= grp_max_pooling2_fu_1242_c1_o_2_ce0;
        else 
            c1_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c1_o_2_d0 <= 
        c1_o_1_load_reg_3275 when (tmp_25_fu_2285_p2(0) = '1') else 
        ap_const_lv32_0;

    c1_o_2_we0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            c1_o_2_we0 <= ap_const_logic_1;
        else 
            c1_o_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_w_0_address0_assign_proc : process(ap_CS_fsm_state6, grp_convolution1_fu_1223_conv1_w_0_address0, grp_copy_w1_fu_1274_out_0_address0, ap_CS_fsm_state29, ap_CS_fsm_state36, tmp_63_cast_fu_1588_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c1_w_0_address0 <= tmp_63_cast_fu_1588_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c1_w_0_address0 <= grp_copy_w1_fu_1274_out_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c1_w_0_address0 <= grp_convolution1_fu_1223_conv1_w_0_address0;
        else 
            c1_w_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c1_w_0_ce0_assign_proc : process(ap_CS_fsm_state6, grp_convolution1_fu_1223_conv1_w_0_ce0, grp_copy_w1_fu_1274_out_0_ce0, ap_CS_fsm_state29, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c1_w_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c1_w_0_ce0 <= grp_copy_w1_fu_1274_out_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            c1_w_0_ce0 <= grp_convolution1_fu_1223_conv1_w_0_ce0;
        else 
            c1_w_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_w_0_d0_assign_proc : process(ap_CS_fsm_state6, grp_copy_w1_fu_1274_out_0_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c1_w_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c1_w_0_d0 <= grp_copy_w1_fu_1274_out_0_d0;
        else 
            c1_w_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c1_w_0_we0_assign_proc : process(ap_CS_fsm_state6, grp_copy_w1_fu_1274_out_0_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c1_w_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c1_w_0_we0 <= grp_copy_w1_fu_1274_out_0_we0;
        else 
            c1_w_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_b_address0_assign_proc : process(ap_CS_fsm_state12, grp_convolution3_fu_1213_conv3_b_address0, grp_copy_b3_fu_1298_out_r_address0, ap_CS_fsm_state29, ap_CS_fsm_state50, invdar10_cast_fu_1778_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c3_b_address0 <= invdar10_cast_fu_1778_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c3_b_address0 <= grp_copy_b3_fu_1298_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c3_b_address0 <= grp_convolution3_fu_1213_conv3_b_address0;
        else 
            c3_b_address0 <= "XXXX";
        end if; 
    end process;


    c3_b_ce0_assign_proc : process(ap_CS_fsm_state12, grp_convolution3_fu_1213_conv3_b_ce0, grp_copy_b3_fu_1298_out_r_ce0, ap_CS_fsm_state29, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c3_b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c3_b_ce0 <= grp_copy_b3_fu_1298_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c3_b_ce0 <= grp_convolution3_fu_1213_conv3_b_ce0;
        else 
            c3_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_b_d0_assign_proc : process(ap_CS_fsm_state12, grp_copy_b3_fu_1298_out_r_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c3_b_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c3_b_d0 <= grp_copy_b3_fu_1298_out_r_d0;
        else 
            c3_b_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c3_b_we0_assign_proc : process(ap_CS_fsm_state12, grp_copy_b3_fu_1298_out_r_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c3_b_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c3_b_we0 <= grp_copy_b3_fu_1298_out_r_we0;
        else 
            c3_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_o_1_address0_assign_proc : process(ap_CS_fsm_state53, grp_convolution3_fu_1213_output_r_address0, ap_CS_fsm_state50, tmp_119_cast_fu_2568_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            c3_o_1_address0 <= tmp_119_cast_fu_2568_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c3_o_1_address0 <= grp_convolution3_fu_1213_output_r_address0;
        else 
            c3_o_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    c3_o_1_ce0_assign_proc : process(ap_CS_fsm_state53, grp_convolution3_fu_1213_output_r_ce0, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            c3_o_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c3_o_1_ce0 <= grp_convolution3_fu_1213_output_r_ce0;
        else 
            c3_o_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_o_1_we0_assign_proc : process(grp_convolution3_fu_1213_output_r_we0, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c3_o_1_we0 <= grp_convolution3_fu_1213_output_r_we0;
        else 
            c3_o_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_o_2_address0_assign_proc : process(c3_o_2_addr_reg_3369, grp_max_pooling4_fu_1250_c3_o_2_address0, ap_CS_fsm_state56, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            c3_o_2_address0 <= c3_o_2_addr_reg_3369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            c3_o_2_address0 <= grp_max_pooling4_fu_1250_c3_o_2_address0;
        else 
            c3_o_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    c3_o_2_ce0_assign_proc : process(grp_max_pooling4_fu_1250_c3_o_2_ce0, ap_CS_fsm_state56, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            c3_o_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            c3_o_2_ce0 <= grp_max_pooling4_fu_1250_c3_o_2_ce0;
        else 
            c3_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c3_o_2_d0 <= 
        c3_o_1_load_reg_3387 when (tmp_40_fu_2621_p2(0) = '1') else 
        ap_const_lv32_0;

    c3_o_2_we0_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            c3_o_2_we0 <= ap_const_logic_1;
        else 
            c3_o_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_w_address0_assign_proc : process(ap_CS_fsm_state11, grp_convolution3_fu_1213_conv3_w_address0, grp_copy_w3_fu_1266_out_r_address0, ap_CS_fsm_state29, ap_CS_fsm_state50, tmp_73_cast_fu_1743_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            c3_w_address0 <= tmp_73_cast_fu_1743_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c3_w_address0 <= grp_copy_w3_fu_1266_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c3_w_address0 <= grp_convolution3_fu_1213_conv3_w_address0;
        else 
            c3_w_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    c3_w_ce0_assign_proc : process(ap_CS_fsm_state11, grp_convolution3_fu_1213_conv3_w_ce0, grp_copy_w3_fu_1266_out_r_ce0, ap_CS_fsm_state29, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            c3_w_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c3_w_ce0 <= grp_copy_w3_fu_1266_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c3_w_ce0 <= grp_convolution3_fu_1213_conv3_w_ce0;
        else 
            c3_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_w_d0_assign_proc : process(ap_CS_fsm_state11, grp_copy_w3_fu_1266_out_r_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            c3_w_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c3_w_d0 <= grp_copy_w3_fu_1266_out_r_d0;
        else 
            c3_w_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c3_w_we0_assign_proc : process(ap_CS_fsm_state11, grp_copy_w3_fu_1266_out_r_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            c3_w_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c3_w_we0 <= grp_copy_w3_fu_1266_out_r_we0;
        else 
            c3_w_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_b_address0_assign_proc : process(ap_CS_fsm_state17, grp_convolution5_fu_1232_conv5_b_address0, grp_copy_b5_fu_1290_out_r_address0, ap_CS_fsm_state29, ap_CS_fsm_state64, invdar15_cast_fu_1920_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c5_b_address0 <= invdar15_cast_fu_1920_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c5_b_address0 <= grp_copy_b5_fu_1290_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            c5_b_address0 <= grp_convolution5_fu_1232_conv5_b_address0;
        else 
            c5_b_address0 <= "XXXXXXX";
        end if; 
    end process;


    c5_b_ce0_assign_proc : process(ap_CS_fsm_state17, grp_convolution5_fu_1232_conv5_b_ce0, grp_copy_b5_fu_1290_out_r_ce0, ap_CS_fsm_state29, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c5_b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c5_b_ce0 <= grp_copy_b5_fu_1290_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            c5_b_ce0 <= grp_convolution5_fu_1232_conv5_b_ce0;
        else 
            c5_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_b_d0_assign_proc : process(ap_CS_fsm_state17, grp_copy_b5_fu_1290_out_r_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c5_b_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c5_b_d0 <= grp_copy_b5_fu_1290_out_r_d0;
        else 
            c5_b_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c5_b_we0_assign_proc : process(ap_CS_fsm_state17, grp_copy_b5_fu_1290_out_r_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c5_b_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c5_b_we0 <= grp_copy_b5_fu_1290_out_r_we0;
        else 
            c5_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_o_1_0_0_address0_assign_proc : process(i_i6_cast3_fu_2782_p1, ap_CS_fsm_state65, grp_convolution5_fu_1232_output_0_0_address0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            c5_o_1_0_0_address0 <= i_i6_cast3_fu_2782_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            c5_o_1_0_0_address0 <= grp_convolution5_fu_1232_output_0_0_address0;
        else 
            c5_o_1_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    c5_o_1_0_0_ce0_assign_proc : process(ap_CS_fsm_state65, grp_convolution5_fu_1232_output_0_0_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            c5_o_1_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            c5_o_1_0_0_ce0 <= grp_convolution5_fu_1232_output_0_0_ce0;
        else 
            c5_o_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_o_1_0_0_we0_assign_proc : process(grp_convolution5_fu_1232_output_0_0_we0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            c5_o_1_0_0_we0 <= grp_convolution5_fu_1232_output_0_0_we0;
        else 
            c5_o_1_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_o_2_0_0_address0_assign_proc : process(i_i6_cast3_reg_3455, ap_CS_fsm_state70, ap_CS_fsm_state68, c_i_cast1_fu_2894_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            c5_o_2_0_0_address0 <= c_i_cast1_fu_2894_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            c5_o_2_0_0_address0 <= i_i6_cast3_reg_3455(7 - 1 downto 0);
        else 
            c5_o_2_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    c5_o_2_0_0_ce0_assign_proc : process(ap_CS_fsm_state70, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            c5_o_2_0_0_ce0 <= ap_const_logic_1;
        else 
            c5_o_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c5_o_2_0_0_d0 <= 
        c5_o_1_0_0_load_reg_3473 when (tmp_35_fu_2834_p2(0) = '1') else 
        ap_const_lv32_0;

    c5_o_2_0_0_we0_assign_proc : process(ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            c5_o_2_0_0_we0 <= ap_const_logic_1;
        else 
            c5_o_2_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_w_address0_assign_proc : process(ap_CS_fsm_state16, grp_convolution5_fu_1232_conv5_w_address0, grp_copy_w5_fu_1258_out_r_address0, ap_CS_fsm_state29, ap_CS_fsm_state64, tmp_81_cast_fu_1885_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c5_w_address0 <= tmp_81_cast_fu_1885_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c5_w_address0 <= grp_copy_w5_fu_1258_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            c5_w_address0 <= grp_convolution5_fu_1232_conv5_w_address0;
        else 
            c5_w_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c5_w_ce0_assign_proc : process(ap_CS_fsm_state16, grp_convolution5_fu_1232_conv5_w_ce0, grp_copy_w5_fu_1258_out_r_ce0, ap_CS_fsm_state29, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c5_w_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c5_w_ce0 <= grp_copy_w5_fu_1258_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            c5_w_ce0 <= grp_convolution5_fu_1232_conv5_w_ce0;
        else 
            c5_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_w_d0_assign_proc : process(ap_CS_fsm_state16, grp_copy_w5_fu_1258_out_r_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c5_w_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c5_w_d0 <= grp_copy_w5_fu_1258_out_r_d0;
        else 
            c5_w_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c5_w_we0_assign_proc : process(ap_CS_fsm_state16, grp_copy_w5_fu_1258_out_r_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c5_w_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            c5_w_we0 <= grp_copy_w5_fu_1258_out_r_we0;
        else 
            c5_w_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_2919_p2 <= std_logic_vector(unsigned(c_i_reg_1202) + unsigned(ap_const_lv7_1));
    c_i_cast1_cast_fu_2899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_reg_1202),12));
    c_i_cast1_fu_2894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_reg_1202),32));
    done1_fu_1357_p4 <= done(31 downto 2);
    exitcond1_i1_fu_2383_p2 <= "1" when (j_i2_reg_1080 = ap_const_lv4_E) else "0";
    exitcond1_i2_fu_2547_p2 <= "1" when (j_i3_reg_1113 = ap_const_lv4_A) else "0";
    exitcond1_i3_fu_2695_p2 <= "1" when (j_i4_reg_1146 = ap_const_lv3_5) else "0";
    exitcond1_i4_fu_2882_p2 <= "1" when (n_i_reg_1179 = ap_const_lv4_A) else "0";
    exitcond1_i_fu_2211_p2 <= "1" when (j_i1_reg_1047 = ap_const_lv5_1C) else "0";
    exitcond2_i1_fu_2160_p2 <= "1" when (i_i2_reg_1036 = ap_const_lv3_6) else "0";
    exitcond2_i2_fu_2332_p2 <= "1" when (i_i3_reg_1069 = ap_const_lv3_6) else "0";
    exitcond2_i3_fu_2500_p2 <= "1" when (i_i4_reg_1102 = ap_const_lv5_10) else "0";
    exitcond2_i4_fu_2656_p2 <= "1" when (i_i5_reg_1135 = ap_const_lv5_10) else "0";
    exitcond2_i_fu_2083_p2 <= "1" when (j_i_reg_1001 = ap_const_lv4_A) else "0";
    exitcond3_i_fu_2057_p2 <= "1" when (i_i_reg_990 = ap_const_lv7_78) else "0";
    exitcond_i1_fu_2114_p2 <= "1" when (i_i1_reg_1025 = ap_const_lv4_A) else "0";
    exitcond_i2_fu_2238_p2 <= "1" when (k_i_reg_1058 = ap_const_lv5_1C) else "0";
    exitcond_i3_fu_2410_p2 <= "1" when (k_i1_reg_1091 = ap_const_lv4_E) else "0";
    exitcond_i4_fu_2787_p2 <= "1" when (i_i6_reg_1168 = ap_const_lv7_78) else "0";
    exitcond_i5_fu_2574_p2 <= "1" when (k_i2_reg_1124 = ap_const_lv4_A) else "0";
    exitcond_i6_fu_2722_p2 <= "1" when (k_i3_reg_1157 = ap_const_lv3_5) else "0";
    exitcond_i7_fu_2913_p2 <= "1" when (c_i_reg_1202 = ap_const_lv7_78) else "0";

    fc6_b_address0_assign_proc : process(ap_CS_fsm_state20, i_i1_cast_reg_3213, n_i_cast2_reg_3485, ap_CS_fsm_state70, ap_CS_fsm_state35, invdar18_cast_fu_2005_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            fc6_b_address0 <= n_i_cast2_reg_3485(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            fc6_b_address0 <= i_i1_cast_reg_3213(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            fc6_b_address0 <= invdar18_cast_fu_2005_p1(4 - 1 downto 0);
        else 
            fc6_b_address0 <= "XXXX";
        end if; 
    end process;


    fc6_b_ce0_assign_proc : process(ap_CS_fsm_state20, ap_block_state20_io, ap_CS_fsm_state70, ap_CS_fsm_state35)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            fc6_b_ce0 <= ap_const_logic_1;
        else 
            fc6_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_b_d0_assign_proc : process(fc6_b_i_q0, ap_CS_fsm_state20, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            fc6_b_d0 <= fc6_b_i_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            fc6_b_d0 <= ap_const_lv32_0;
        else 
            fc6_b_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    fc6_b_i_address0 <= i_i1_cast_fu_2109_p1(4 - 1 downto 0);

    fc6_b_i_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            fc6_b_i_ce0 <= ap_const_logic_1;
        else 
            fc6_b_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_b_we0_assign_proc : process(ap_CS_fsm_state20, ap_block_state20_io, ap_CS_fsm_state35)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            fc6_b_we0 <= ap_const_logic_1;
        else 
            fc6_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_o_address0_assign_proc : process(ap_CS_fsm_state88, tmp_18_reg_3173, fc6_o_addr_reg_3503, grp_copy_out_fu_1314_fc6_o_address0, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            fc6_o_address0 <= fc6_o_addr_reg_3503;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) and (ap_const_lv1_1 = tmp_18_reg_3173))) then 
            fc6_o_address0 <= grp_copy_out_fu_1314_fc6_o_address0;
        else 
            fc6_o_address0 <= "XXXX";
        end if; 
    end process;


    fc6_o_ce0_assign_proc : process(ap_CS_fsm_state88, tmp_18_reg_3173, grp_copy_out_fu_1314_fc6_o_ce0, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            fc6_o_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) and (ap_const_lv1_1 = tmp_18_reg_3173))) then 
            fc6_o_ce0 <= grp_copy_out_fu_1314_fc6_o_ce0;
        else 
            fc6_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_o_we0_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            fc6_o_we0 <= ap_const_logic_1;
        else 
            fc6_o_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_w_0_0_address0_assign_proc : process(ap_CS_fsm_state19, fc6_w_0_0_addr_1_reg_3195, ap_CS_fsm_state70, ap_CS_fsm_state33, tmp_85_cast_fu_1982_p1, tmp_124_cast_fu_2908_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            fc6_w_0_0_address0 <= tmp_124_cast_fu_2908_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fc6_w_0_0_address0 <= fc6_w_0_0_addr_1_reg_3195;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fc6_w_0_0_address0 <= tmp_85_cast_fu_1982_p1(11 - 1 downto 0);
        else 
            fc6_w_0_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc6_w_0_0_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state70, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            fc6_w_0_0_ce0 <= ap_const_logic_1;
        else 
            fc6_w_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_w_0_0_d0_assign_proc : process(fc6_w_i_q0, ap_CS_fsm_state19, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fc6_w_0_0_d0 <= fc6_w_i_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fc6_w_0_0_d0 <= ap_const_lv32_0;
        else 
            fc6_w_0_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc6_w_0_0_we0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            fc6_w_0_0_we0 <= ap_const_logic_1;
        else 
            fc6_w_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc6_w_i_address0 <= tmp_93_cast_fu_2104_p1(11 - 1 downto 0);

    fc6_w_i_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fc6_w_i_ce0 <= ap_const_logic_1;
        else 
            fc6_w_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolution1_fu_1223_ap_start <= ap_reg_grp_convolution1_fu_1223_ap_start;
    grp_convolution3_fu_1213_ap_start <= ap_reg_grp_convolution3_fu_1213_ap_start;
    grp_convolution5_fu_1232_ap_start <= ap_reg_grp_convolution5_fu_1232_ap_start;
    grp_copy_b1_fu_1306_ap_start <= ap_reg_grp_copy_b1_fu_1306_ap_start;
    grp_copy_b3_fu_1298_ap_start <= ap_reg_grp_copy_b3_fu_1298_ap_start;
    grp_copy_b5_fu_1290_ap_start <= ap_reg_grp_copy_b5_fu_1290_ap_start;
    grp_copy_i_fu_1282_ap_start <= ap_reg_grp_copy_i_fu_1282_ap_start;
    grp_copy_out_fu_1314_ap_start <= ap_reg_grp_copy_out_fu_1314_ap_start;
    grp_copy_w1_fu_1274_ap_start <= ap_reg_grp_copy_w1_fu_1274_ap_start;
    grp_copy_w3_fu_1266_ap_start <= ap_reg_grp_copy_w3_fu_1266_ap_start;
    grp_copy_w5_fu_1258_ap_start <= ap_reg_grp_copy_w5_fu_1258_ap_start;

    grp_fu_1323_p1_assign_proc : process(tmp_19_i_reg_3541, fc6_b_load_reg_3551, ap_CS_fsm_state76, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_1323_p1 <= fc6_b_load_reg_3551;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_1323_p1 <= tmp_19_i_reg_3541;
        else 
            grp_fu_1323_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1332_p0_assign_proc : process(c1_o_1_load_reg_3275, ap_CS_fsm_state41, p2_o_1_load_reg_3331, ap_CS_fsm_state48, c3_o_1_load_reg_3387, ap_CS_fsm_state55, p4_o_1_load_reg_3443, ap_CS_fsm_state62, c5_o_1_0_0_load_reg_3473, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_1332_p0 <= c5_o_1_0_0_load_reg_3473;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_1332_p0 <= p4_o_1_load_reg_3443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_1332_p0 <= c3_o_1_load_reg_3387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1332_p0 <= p2_o_1_load_reg_3331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_1332_p0 <= c1_o_1_load_reg_3275;
        else 
            grp_fu_1332_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_max_pooling2_fu_1242_ap_start <= ap_reg_grp_max_pooling2_fu_1242_ap_start;
    grp_max_pooling4_fu_1250_ap_start <= ap_reg_grp_max_pooling4_fu_1250_ap_start;
    i_3_fu_2063_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(i_i_reg_990));
    i_4_fu_2166_p2 <= std_logic_vector(unsigned(i_i2_reg_1036) + unsigned(ap_const_lv3_1));
    i_5_fu_2338_p2 <= std_logic_vector(unsigned(i_i3_reg_1069) + unsigned(ap_const_lv3_1));
    i_6_fu_2506_p2 <= std_logic_vector(unsigned(i_i4_reg_1102) + unsigned(ap_const_lv5_1));
    i_7_fu_2793_p2 <= std_logic_vector(unsigned(i_i6_reg_1168) + unsigned(ap_const_lv7_1));
    i_8_fu_2662_p2 <= std_logic_vector(unsigned(i_i5_reg_1135) + unsigned(ap_const_lv5_1));
    i_fu_2120_p2 <= std_logic_vector(unsigned(i_i1_reg_1025) + unsigned(ap_const_lv4_1));
    i_i1_cast_fu_2109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_1025),32));
    i_i5_cast6_cast_fu_2634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_1135),8));
    i_i6_cast3_fu_2782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i6_reg_1168),32));

    image_in_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_convolution1_fu_1223_input_0_address0, grp_copy_i_fu_1282_out_0_address0, ap_CS_fsm_state29, ap_CS_fsm_state36, tmp_50_fu_1491_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_in_0_address0 <= tmp_50_fu_1491_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            image_in_0_address0 <= grp_copy_i_fu_1282_out_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            image_in_0_address0 <= grp_convolution1_fu_1223_input_0_address0;
        else 
            image_in_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    image_in_0_ce0_assign_proc : process(ap_CS_fsm_state3, grp_convolution1_fu_1223_input_0_ce0, grp_copy_i_fu_1282_out_0_ce0, ap_CS_fsm_state29, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_in_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            image_in_0_ce0 <= grp_copy_i_fu_1282_out_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            image_in_0_ce0 <= grp_convolution1_fu_1223_input_0_ce0;
        else 
            image_in_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_in_0_d0_assign_proc : process(ap_CS_fsm_state3, grp_copy_i_fu_1282_out_0_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_in_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            image_in_0_d0 <= grp_copy_i_fu_1282_out_0_d0;
        else 
            image_in_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_in_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_copy_i_fu_1282_out_0_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_in_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            image_in_0_we0 <= grp_copy_i_fu_1282_out_0_we0;
        else 
            image_in_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    indvarinc10_fu_1783_p2 <= std_logic_vector(unsigned(invdar10_reg_887) + unsigned(ap_const_lv4_1));
    indvarinc11_fu_1795_p2 <= std_logic_vector(unsigned(invdar11_reg_898) + unsigned(ap_const_lv7_1));
    indvarinc12_fu_1833_p2 <= std_logic_vector(unsigned(invdar12_reg_910) + unsigned(ap_const_lv4_1));
    indvarinc13_fu_1870_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(invdar13_reg_922));
    indvarinc14_fu_1890_p2 <= std_logic_vector(unsigned(invdar14_reg_934) + unsigned(ap_const_lv3_1));
    indvarinc15_fu_1925_p2 <= std_logic_vector(unsigned(invdar15_reg_945) + unsigned(ap_const_lv7_1));
    indvarinc16_fu_1967_p2 <= std_logic_vector(unsigned(invdar16_reg_956) + unsigned(ap_const_lv4_1));
    indvarinc17_fu_1987_p2 <= std_logic_vector(unsigned(invdar17_reg_968) + unsigned(ap_const_lv7_1));
    indvarinc18_fu_2010_p2 <= std_logic_vector(unsigned(invdar18_reg_979) + unsigned(ap_const_lv4_1));
    indvarinc1_fu_1536_p2 <= std_logic_vector(unsigned(invdar1_reg_794) + unsigned(ap_const_lv3_1));
    indvarinc2_fu_1748_p2 <= std_logic_vector(unsigned(invdar2_reg_876) + unsigned(ap_const_lv3_1));
    indvarinc3_fu_1573_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(invdar4_reg_806));
    indvarinc4_fu_1477_p2 <= std_logic_vector(unsigned(invdar3_reg_771) + unsigned(ap_const_lv5_1));
    indvarinc5_fu_1593_p2 <= std_logic_vector(unsigned(invdar5_reg_818) + unsigned(ap_const_lv3_1));
    indvarinc6_fu_1622_p2 <= std_logic_vector(unsigned(invdar6_reg_829) + unsigned(ap_const_lv3_1));
    indvarinc7_fu_1664_p2 <= std_logic_vector(unsigned(invdar8_reg_840) + unsigned(ap_const_lv4_1));
    indvarinc8_fu_1496_p2 <= std_logic_vector(unsigned(invdar7_reg_783) + unsigned(ap_const_lv5_1));
    indvarinc9_fu_1691_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(invdar9_reg_852));
    indvarinc_fu_1728_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(invdar_reg_864));
    input_assign_2_to_in_fu_2422_p1 <= p2_o_1_load_reg_3331;
    input_assign_4_to_in_fu_2799_p1 <= c5_o_1_0_0_load_reg_3473;
    input_assign_6_to_in_fu_2586_p1 <= c3_o_1_load_reg_3387;
    input_assign_8_to_in_fu_2734_p1 <= p4_o_1_load_reg_3443;
    input_assign_to_int_fu_2250_p1 <= c1_o_1_load_reg_3275;
    invdar10_cast_fu_1778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar10_reg_887),32));
    invdar13_cast_fu_1839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar13_reg_922),32));
    invdar14_cast_cast_fu_1876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar14_reg_934),17));
    invdar15_cast_fu_1920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar15_reg_945),32));
    invdar17_cast_cast_fu_1973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar17_reg_968),12));
    invdar18_cast_fu_2005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar18_reg_979),32));
    invdar1_cast_fu_1514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_794),32));
    invdar2_cast_cast_fu_1734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar2_reg_876),13));
    invdar4_cast_fu_1542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar4_reg_806),32));
    invdar5_cast_cast_fu_1579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar5_reg_818),9));
    invdar6_cast_fu_1617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar6_reg_829),32));
    invdar9_cast_fu_1670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar9_reg_852),32));
    invdar_cast_fu_1697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_864),32));
    j_3_fu_2217_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(j_i1_reg_1047));
    j_4_fu_2389_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(j_i2_reg_1080));
    j_5_fu_2553_p2 <= std_logic_vector(unsigned(j_i3_reg_1113) + unsigned(ap_const_lv4_1));
    j_6_fu_2701_p2 <= std_logic_vector(unsigned(j_i4_reg_1146) + unsigned(ap_const_lv3_1));
    j_fu_2089_p2 <= std_logic_vector(unsigned(j_i_reg_1001) + unsigned(ap_const_lv4_1));
    j_i1_cast_cast_fu_2172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i1_reg_1047),10));
    j_i2_cast_cast_fu_2344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i2_reg_1080),9));
    j_i3_cast8_cast_fu_2512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i3_reg_1113),9));
    j_i4_cast5_cast_fu_2668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i4_reg_1146),8));
    j_i_cast_cast_fu_2069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_1001),12));
    k_1_fu_2416_p2 <= std_logic_vector(unsigned(k_i1_reg_1091) + unsigned(ap_const_lv4_1));
    k_2_fu_2580_p2 <= std_logic_vector(unsigned(k_i2_reg_1124) + unsigned(ap_const_lv4_1));
    k_3_fu_2728_p2 <= std_logic_vector(unsigned(k_i3_reg_1157) + unsigned(ap_const_lv3_1));
    k_fu_2244_p2 <= std_logic_vector(unsigned(k_i_reg_1058) + unsigned(ap_const_lv5_1));
    k_i1_cast_cast_fu_2395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i1_reg_1091),12));
    k_i2_cast7_cast_fu_2559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i2_reg_1124),12));
    k_i3_cast4_cast_fu_2707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i3_reg_1157),10));
    k_i_cast_cast_fu_2223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i_reg_1058),14));
    l_i_cast_cast_fu_2095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_i_reg_1012),12));
    l_i_phi_fu_1017_p4 <= l_i_reg_1012;
    n_fu_2888_p2 <= std_logic_vector(unsigned(n_i_reg_1179) + unsigned(ap_const_lv4_1));
    n_i_cast2_fu_2847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_i_reg_1179),32));
    notlhs1_fu_2439_p2 <= "0" when (tmp_26_fu_2425_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_2816_p2 <= "0" when (tmp_31_fu_2802_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_2603_p2 <= "0" when (tmp_36_fu_2589_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_2751_p2 <= "0" when (tmp_41_fu_2737_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_2267_p2 <= "0" when (tmp_21_fu_2253_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_2445_p2 <= "1" when (tmp_112_fu_2435_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_2822_p2 <= "1" when (tmp_116_fu_2812_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_2609_p2 <= "1" when (tmp_117_fu_2599_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_2757_p2 <= "1" when (tmp_122_fu_2747_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_2273_p2 <= "1" when (tmp_105_fu_2263_p1 = ap_const_lv23_0) else "0";

    p2_o_1_address0_assign_proc : process(ap_CS_fsm_state46, grp_max_pooling2_fu_1242_output_r_address0, ap_CS_fsm_state43, tmp_115_cast_fu_2404_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            p2_o_1_address0 <= tmp_115_cast_fu_2404_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            p2_o_1_address0 <= grp_max_pooling2_fu_1242_output_r_address0;
        else 
            p2_o_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    p2_o_1_ce0_assign_proc : process(ap_CS_fsm_state46, grp_max_pooling2_fu_1242_output_r_ce0, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            p2_o_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            p2_o_1_ce0 <= grp_max_pooling2_fu_1242_output_r_ce0;
        else 
            p2_o_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p2_o_1_we0_assign_proc : process(grp_max_pooling2_fu_1242_output_r_we0, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            p2_o_1_we0 <= grp_max_pooling2_fu_1242_output_r_we0;
        else 
            p2_o_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p2_o_2_address0_assign_proc : process(p2_o_2_addr_reg_3313, grp_convolution3_fu_1213_p2_o_2_address0, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p2_o_2_address0 <= p2_o_2_addr_reg_3313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            p2_o_2_address0 <= grp_convolution3_fu_1213_p2_o_2_address0;
        else 
            p2_o_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    p2_o_2_ce0_assign_proc : process(grp_convolution3_fu_1213_p2_o_2_ce0, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p2_o_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            p2_o_2_ce0 <= grp_convolution3_fu_1213_p2_o_2_ce0;
        else 
            p2_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p2_o_2_d0 <= 
        p2_o_1_load_reg_3331 when (tmp_30_fu_2457_p2(0) = '1') else 
        ap_const_lv32_0;

    p2_o_2_we0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            p2_o_2_we0 <= ap_const_logic_1;
        else 
            p2_o_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p4_o_1_address0_assign_proc : process(ap_CS_fsm_state60, grp_max_pooling4_fu_1250_output_r_address0, ap_CS_fsm_state57, tmp_123_cast_fu_2716_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            p4_o_1_address0 <= tmp_123_cast_fu_2716_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            p4_o_1_address0 <= grp_max_pooling4_fu_1250_output_r_address0;
        else 
            p4_o_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    p4_o_1_ce0_assign_proc : process(ap_CS_fsm_state60, grp_max_pooling4_fu_1250_output_r_ce0, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            p4_o_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            p4_o_1_ce0 <= grp_max_pooling4_fu_1250_output_r_ce0;
        else 
            p4_o_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p4_o_1_we0_assign_proc : process(grp_max_pooling4_fu_1250_output_r_we0, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            p4_o_1_we0 <= grp_max_pooling4_fu_1250_output_r_we0;
        else 
            p4_o_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p4_o_2_address0_assign_proc : process(p4_o_2_addr_reg_3425, grp_convolution5_fu_1232_p4_o_2_address0, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            p4_o_2_address0 <= p4_o_2_addr_reg_3425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            p4_o_2_address0 <= grp_convolution5_fu_1232_p4_o_2_address0;
        else 
            p4_o_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    p4_o_2_ce0_assign_proc : process(grp_convolution5_fu_1232_p4_o_2_ce0, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            p4_o_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            p4_o_2_ce0 <= grp_convolution5_fu_1232_p4_o_2_ce0;
        else 
            p4_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p4_o_2_d0 <= 
        p4_o_1_load_reg_3443 when (tmp_45_fu_2769_p2(0) = '1') else 
        ap_const_lv32_0;

    p4_o_2_we0_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            p4_o_2_we0 <= ap_const_logic_1;
        else 
            p4_o_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_2031_p3 <= (tmp_82_fu_2027_p1 & ap_const_lv7_0);
    p_shl11_cast_fu_2047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_2039_p3),12));
    p_shl12_cast_fu_2134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_2126_p3),9));
    p_shl13_cast_fu_2146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_2138_p3),9));
    p_shl14_cast_fu_2306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_2298_p3),8));
    p_shl15_cast_fu_2318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_2310_p3),8));
    p_shl16_cast_fu_2185_p3 <= (tmp_94_fu_2181_p1 & ap_const_lv5_0);
        p_shl17_cast_fu_2201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_95_fu_2193_p3),14));

    p_shl18_cast_fu_2478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_2470_p3),9));
    p_shl19_cast_fu_2490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_2482_p3),9));
    p_shl1_cast_fu_1559_p3 <= (tmp_55_fu_1555_p1 & ap_const_lv2_0);
    p_shl20_cast_fu_2357_p3 <= (tmp_101_fu_2353_p1 & ap_const_lv4_0);
        p_shl21_cast_fu_2373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_102_fu_2365_p3),12));

    p_shl22_cast_fu_2646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_2638_p3),8));
    p_shl23_cast_fu_2521_p3 <= (tmp_108_fu_2516_p2 & ap_const_lv3_0);
    p_shl24_cast_fu_2537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_2529_p3),12));
    p_shl25_cast_fu_2681_p3 <= (tmp_113_fu_2672_p2 & ap_const_lv2_0);
    p_shl26_cast_fu_2860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_2852_p3),12));
    p_shl27_cast_fu_2872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_fu_2864_p3),12));
    p_shl2_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_1634_p3),32));
    p_shl3_fu_1654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_1646_p3),32));
    p_shl5_cast_fu_1714_p3 <= (tmp_66_fu_1710_p1 & ap_const_lv2_0);
    p_shl6_fu_1823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_1813_p4),32));
    p_shl7_cast_fu_1856_p3 <= (tmp_75_fu_1852_p1 & ap_const_lv2_0);
    p_shl8_cast_fu_1945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_1937_p3),12));
    p_shl9_cast_fu_1957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_1949_p3),12));
    p_shl_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1518_p3),32));
    start1_fu_1337_p4 <= start(31 downto 2);
    tmp_100_fu_2348_p2 <= std_logic_vector(signed(tmp_96_cast_reg_3287) + signed(j_i2_cast_cast_fu_2344_p1));
    tmp_101_fu_2353_p1 <= tmp_100_fu_2348_p2(8 - 1 downto 0);
    tmp_102_fu_2365_p3 <= (tmp_100_fu_2348_p2 & ap_const_lv1_0);
    tmp_103_fu_2377_p2 <= std_logic_vector(unsigned(p_shl20_cast_fu_2357_p3) - unsigned(p_shl21_cast_fu_2373_p1));
    tmp_104_fu_2227_p2 <= std_logic_vector(unsigned(tmp_96_reg_3244) + unsigned(k_i_cast_cast_fu_2223_p1));
    tmp_105_fu_2263_p1 <= input_assign_to_int_fu_2250_p1(23 - 1 downto 0);
    tmp_106_fu_2638_p3 <= (i_i5_reg_1135 & ap_const_lv2_0);
    tmp_107_fu_2650_p2 <= std_logic_vector(unsigned(i_i5_cast6_cast_fu_2634_p1) + unsigned(p_shl22_cast_fu_2646_p1));
    tmp_108_cast_fu_2232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_2227_p2),32));
    tmp_108_fu_2516_p2 <= std_logic_vector(unsigned(j_i3_cast8_cast_fu_2512_p1) + unsigned(tmp_99_reg_3343));
    tmp_109_fu_2529_p3 <= (tmp_108_fu_2516_p2 & ap_const_lv1_0);
    tmp_10_fu_1896_p2 <= "1" when (invdar14_reg_934 = ap_const_lv3_4) else "0";
    tmp_110_fu_2541_p2 <= std_logic_vector(unsigned(p_shl23_cast_fu_2521_p3) + unsigned(p_shl24_cast_fu_2537_p1));
    tmp_111_fu_2399_p2 <= std_logic_vector(unsigned(tmp_103_reg_3300) + unsigned(k_i1_cast_cast_fu_2395_p1));
    tmp_112_fu_2435_p1 <= input_assign_2_to_in_fu_2422_p1(23 - 1 downto 0);
    tmp_113_fu_2672_p2 <= std_logic_vector(unsigned(tmp_107_reg_3399) + unsigned(j_i4_cast5_cast_fu_2668_p1));
    tmp_114_fu_2689_p2 <= std_logic_vector(unsigned(tmp_116_cast_fu_2677_p1) + unsigned(p_shl25_cast_fu_2681_p3));
    tmp_115_cast_fu_2404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_fu_2399_p2),32));
    tmp_115_fu_2563_p2 <= std_logic_vector(unsigned(tmp_110_reg_3356) + unsigned(k_i2_cast7_cast_fu_2559_p1));
    tmp_116_cast_fu_2677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_fu_2672_p2),10));
    tmp_116_fu_2812_p1 <= input_assign_4_to_in_fu_2799_p1(23 - 1 downto 0);
    tmp_117_fu_2599_p1 <= input_assign_6_to_in_fu_2586_p1(23 - 1 downto 0);
    tmp_118_fu_2852_p3 <= (n_i_reg_1179 & ap_const_lv7_0);
    tmp_119_cast_fu_2568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_fu_2563_p2),32));
    tmp_119_fu_2864_p3 <= (n_i_reg_1179 & ap_const_lv3_0);
    tmp_11_fu_1902_p2 <= "1" when (invdar13_reg_922 = ap_const_lv3_4) else "0";
    tmp_120_fu_2876_p2 <= std_logic_vector(unsigned(p_shl26_cast_fu_2860_p1) - unsigned(p_shl27_cast_fu_2872_p1));
    tmp_121_fu_2711_p2 <= std_logic_vector(unsigned(tmp_114_reg_3412) + unsigned(k_i3_cast4_cast_fu_2707_p1));
    tmp_122_fu_2747_p1 <= input_assign_8_to_in_fu_2734_p1(23 - 1 downto 0);
    tmp_123_cast_fu_2716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_2711_p2),32));
    tmp_123_fu_2903_p2 <= std_logic_vector(unsigned(tmp_120_reg_3490) + unsigned(c_i_cast1_cast_fu_2899_p1));
        tmp_124_cast_fu_2908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_123_fu_2903_p2),32));

    tmp_12_fu_1908_p2 <= "1" when (invdar12_reg_910 = ap_const_lv4_F) else "0";
    tmp_13_fu_1914_p2 <= "1" when (invdar11_reg_898 = ap_const_lv7_77) else "0";
    tmp_14_fu_1931_p2 <= "1" when (invdar15_reg_945 = ap_const_lv7_77) else "0";
    tmp_15_fu_1993_p2 <= "1" when (invdar17_reg_968 = ap_const_lv7_77) else "0";
    tmp_16_fu_1999_p2 <= "1" when (invdar16_reg_956 = ap_const_lv4_9) else "0";
    tmp_17_fu_2016_p2 <= "1" when (invdar18_reg_979 = ap_const_lv4_9) else "0";
    tmp_18_fu_2022_p2 <= "1" when (DATA_START_addr_read_reg_3168 = ap_const_lv32_1) else "0";
    tmp_1_fu_1628_p2 <= "1" when (invdar6_reg_829 = ap_const_lv3_5) else "0";
    tmp_21_fu_2253_p4 <= input_assign_to_int_fu_2250_p1(30 downto 23);
    tmp_23_fu_2279_p2 <= (notrhs_fu_2273_p2 or notlhs_fu_2267_p2);
    tmp_25_fu_2285_p2 <= (tmp_23_fu_2279_p2 and tmp_24_reg_3282);
    tmp_26_fu_2425_p4 <= input_assign_2_to_in_fu_2422_p1(30 downto 23);
    tmp_28_fu_2451_p2 <= (notrhs1_fu_2445_p2 or notlhs1_fu_2439_p2);
    tmp_2_fu_1754_p2 <= "1" when (invdar2_reg_876 = ap_const_lv3_4) else "0";
    tmp_30_fu_2457_p2 <= (tmp_28_fu_2451_p2 and tmp_29_reg_3338);
    tmp_31_fu_2802_p4 <= input_assign_4_to_in_fu_2799_p1(30 downto 23);
    tmp_33_fu_2828_p2 <= (notrhs2_fu_2822_p2 or notlhs2_fu_2816_p2);
    tmp_35_fu_2834_p2 <= (tmp_33_fu_2828_p2 and tmp_34_reg_3480);
    tmp_36_fu_2589_p4 <= input_assign_6_to_in_fu_2586_p1(30 downto 23);
    tmp_38_fu_2615_p2 <= (notrhs3_fu_2609_p2 or notlhs3_fu_2603_p2);
    tmp_3_fu_1760_p2 <= "1" when (invdar_reg_864 = ap_const_lv3_4) else "0";
    tmp_40_fu_2621_p2 <= (tmp_38_fu_2615_p2 and tmp_39_reg_3394);
    tmp_41_fu_2737_p4 <= input_assign_8_to_in_fu_2734_p1(30 downto 23);
    tmp_42_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start1_fu_1337_p4),32));
    tmp_43_fu_2763_p2 <= (notrhs4_fu_2757_p2 or notlhs4_fu_2751_p2);
    tmp_45_fu_2769_p2 <= (tmp_43_fu_2763_p2 and tmp_44_reg_3450);
    tmp_46_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(done1_fu_1357_p4),32));
    tmp_49_fu_1483_p3 <= (invdar3_reg_771 & invdar7_reg_783);
    tmp_4_fu_1766_p2 <= "1" when (invdar9_reg_852 = ap_const_lv3_5) else "0";
    tmp_50_fu_1491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1483_p3),32));
    tmp_51_fu_1518_p3 <= (invdar1_reg_794 & ap_const_lv2_0);
    tmp_52_fu_1530_p2 <= std_logic_vector(unsigned(p_shl_fu_1526_p1) + unsigned(invdar1_cast_fu_1514_p1));
    tmp_53_fu_1546_p2 <= std_logic_vector(unsigned(tmp_52_reg_2992) + unsigned(invdar4_cast_fu_1542_p1));
    tmp_54_fu_1551_p1 <= tmp_53_fu_1546_p2(9 - 1 downto 0);
    tmp_55_fu_1555_p1 <= tmp_53_fu_1546_p2(7 - 1 downto 0);
    tmp_56_fu_1567_p2 <= std_logic_vector(unsigned(tmp_54_fu_1551_p1) + unsigned(p_shl1_cast_fu_1559_p3));
    tmp_57_fu_1583_p2 <= std_logic_vector(unsigned(tmp_56_reg_3002) + unsigned(invdar5_cast_cast_fu_1579_p1));
    tmp_58_fu_1634_p3 <= (invdar8_reg_840 & ap_const_lv3_0);
    tmp_59_fu_1646_p3 <= (invdar8_reg_840 & ap_const_lv1_0);
    tmp_5_fu_1772_p2 <= "1" when (invdar8_reg_840 = ap_const_lv4_F) else "0";
    tmp_60_fu_1658_p2 <= std_logic_vector(unsigned(p_shl2_fu_1642_p1) - unsigned(p_shl3_fu_1654_p1));
    tmp_61_fu_1674_p2 <= std_logic_vector(unsigned(tmp_60_reg_3034) + unsigned(invdar9_cast_fu_1670_p1));
    tmp_62_fu_1679_p2 <= std_logic_vector(shift_left(unsigned(tmp_61_fu_1674_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_63_cast_fu_1588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_1583_p2),32));
    tmp_63_fu_1685_p2 <= std_logic_vector(unsigned(tmp_61_fu_1674_p2) + unsigned(tmp_62_fu_1679_p2));
    tmp_64_fu_1701_p2 <= std_logic_vector(unsigned(tmp_63_reg_3044) + unsigned(invdar_cast_fu_1697_p1));
    tmp_65_fu_1706_p1 <= tmp_64_fu_1701_p2(13 - 1 downto 0);
    tmp_66_fu_1710_p1 <= tmp_64_fu_1701_p2(11 - 1 downto 0);
    tmp_67_fu_1722_p2 <= std_logic_vector(unsigned(tmp_65_fu_1706_p1) + unsigned(p_shl5_cast_fu_1714_p3));
    tmp_68_fu_1738_p2 <= std_logic_vector(unsigned(tmp_67_reg_3054) + unsigned(invdar2_cast_cast_fu_1734_p1));
    tmp_69_fu_1801_p3 <= (invdar11_reg_898 & invdar12_reg_910);
    tmp_6_fu_1599_p2 <= "1" when (invdar5_reg_818 = ap_const_lv3_4) else "0";
    tmp_70_fu_1809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_1801_p3),32));
    tmp_71_fu_1813_p4 <= ((invdar11_reg_898 & invdar12_reg_910) & ap_const_lv2_0);
    tmp_72_fu_1827_p2 <= std_logic_vector(unsigned(p_shl6_fu_1823_p1) + unsigned(tmp_70_fu_1809_p1));
    tmp_73_cast_fu_1743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_1738_p2),32));
    tmp_73_fu_1843_p2 <= std_logic_vector(unsigned(tmp_72_reg_3094) + unsigned(invdar13_cast_fu_1839_p1));
    tmp_74_fu_1848_p1 <= tmp_73_fu_1843_p2(17 - 1 downto 0);
    tmp_75_fu_1852_p1 <= tmp_73_fu_1843_p2(15 - 1 downto 0);
    tmp_76_fu_1864_p2 <= std_logic_vector(unsigned(tmp_74_fu_1848_p1) + unsigned(p_shl7_cast_fu_1856_p3));
    tmp_77_fu_1880_p2 <= std_logic_vector(unsigned(tmp_76_reg_3104) + unsigned(invdar14_cast_cast_fu_1876_p1));
    tmp_78_fu_1937_p3 <= (invdar16_reg_956 & ap_const_lv7_0);
    tmp_79_fu_1949_p3 <= (invdar16_reg_956 & ap_const_lv3_0);
    tmp_7_fu_1605_p2 <= "1" when (invdar4_reg_806 = ap_const_lv3_4) else "0";
    tmp_80_fu_1961_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_1945_p1) - unsigned(p_shl9_cast_fu_1957_p1));
    tmp_81_cast_fu_1885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_1880_p2),32));
    tmp_81_fu_1977_p2 <= std_logic_vector(unsigned(tmp_80_reg_3139) + unsigned(invdar17_cast_cast_fu_1973_p1));
    tmp_82_fu_2027_p1 <= i_i_reg_990(5 - 1 downto 0);
    tmp_83_fu_2039_p3 <= (i_i_reg_990 & ap_const_lv3_0);
    tmp_84_fu_2051_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_2031_p3) - unsigned(p_shl11_cast_fu_2047_p1));
    tmp_85_cast_fu_1982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_1977_p2),32));
    tmp_85_fu_2073_p2 <= std_logic_vector(unsigned(tmp_84_reg_3177) + unsigned(j_i_cast_cast_fu_2069_p1));
    tmp_86_fu_2126_p3 <= (i_i2_reg_1036 & ap_const_lv5_0);
    tmp_87_fu_2138_p3 <= (i_i2_reg_1036 & ap_const_lv2_0);
    tmp_88_fu_2150_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_2134_p1) - unsigned(p_shl13_cast_fu_2146_p1));
        tmp_89_cast_fu_2078_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_85_fu_2073_p2),32));

    tmp_89_fu_2099_p2 <= std_logic_vector(unsigned(tmp_85_reg_3190) + unsigned(l_i_cast_cast_fu_2095_p1));
    tmp_8_fu_1789_p2 <= "1" when (invdar10_reg_887 = ap_const_lv4_F) else "0";
    tmp_90_fu_2298_p3 <= (i_i3_reg_1069 & ap_const_lv4_0);
    tmp_91_fu_2310_p3 <= (i_i3_reg_1069 & ap_const_lv1_0);
        tmp_92_cast_fu_2156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_2150_p2),10));

    tmp_92_fu_2322_p2 <= std_logic_vector(unsigned(p_shl14_cast_fu_2306_p1) - unsigned(p_shl15_cast_fu_2318_p1));
        tmp_93_cast_fu_2104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_89_fu_2099_p2),32));

    tmp_93_fu_2176_p2 <= std_logic_vector(signed(tmp_92_cast_reg_3231) + signed(j_i1_cast_cast_fu_2172_p1));
    tmp_94_fu_2181_p1 <= tmp_93_fu_2176_p2(9 - 1 downto 0);
    tmp_95_fu_2193_p3 <= (tmp_93_fu_2176_p2 & ap_const_lv2_0);
        tmp_96_cast_fu_2328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_92_fu_2322_p2),9));

    tmp_96_fu_2205_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_2185_p3) - unsigned(p_shl17_cast_fu_2201_p1));
    tmp_97_fu_2470_p3 <= (i_i4_reg_1102 & ap_const_lv3_0);
    tmp_98_fu_2482_p3 <= (i_i4_reg_1102 & ap_const_lv1_0);
    tmp_99_fu_2494_p2 <= std_logic_vector(unsigned(p_shl19_cast_fu_2490_p1) + unsigned(p_shl18_cast_fu_2478_p1));
    tmp_9_fu_1611_p2 <= "1" when (invdar1_reg_794 = ap_const_lv3_5) else "0";
    tmp_fu_1502_p2 <= "1" when (invdar7_reg_783 = ap_const_lv5_1F) else "0";
    tmp_s_fu_1508_p2 <= "1" when (invdar3_reg_771 = ap_const_lv5_1F) else "0";
end behav;
