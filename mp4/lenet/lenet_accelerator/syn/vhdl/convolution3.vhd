-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv3_w_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv3_w_ce0 : OUT STD_LOGIC;
    conv3_w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv3_b_ce0 : OUT STD_LOGIC;
    conv3_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p2_o_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p2_o_2_ce0 : OUT STD_LOGIC;
    p2_o_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_166_cast_fu_280_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_166_cast_reg_602 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_158_fu_284_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_158_reg_607 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_2_fu_296_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_2_reg_615 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv3_b_addr_reg_620 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast3_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast3_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_160_fu_335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_160_reg_630 : STD_LOGIC_VECTOR (11 downto 0);
    signal h_fu_347_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_reg_638 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast2_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast2_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_addr_reg_653 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_fu_387_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_661 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_81_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_81_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_149_fu_414_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_149_reg_679 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_150_fu_418_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_150_reg_684 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_1_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_18_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_152_fu_476_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_152_reg_702 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_153_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_153_reg_707 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_154_fu_524_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_reg_712 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_171_fu_528_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_171_reg_717 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_2_fu_538_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ci_2_reg_726 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_13_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_w_load_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p2_o_2_load_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal conv3_b_load_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_20_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal co_reg_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i17_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal j12_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_212 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal co_cast4_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_174_cast_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_181_cast_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_189_cast_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_155_fu_250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_156_fu_262_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_258_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_270_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_157_fu_274_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast3_cast_fu_306_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_159_fu_310_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_148_fu_323_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_315_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_331_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast2_cast_fu_367_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_161_fu_371_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_393_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ci_cast1_cast_fu_439_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_162_fu_443_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_151_fu_452_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_175_cast_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_163_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_164_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_167_fu_484_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_168_fu_496_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl8_cast_fu_492_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_cast_fu_504_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_169_fu_508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_184_cast_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_170_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl10_cast_fu_544_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_165_fu_551_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_166_fu_556_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_566_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_573_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_172_fu_580_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_173_fu_586_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component lenet_wrapper_fadbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fmucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lenet_wrapper_fadbkb_x_U30 : component lenet_wrapper_fadbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_235_p0,
        din1 => grp_fu_235_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    lenet_wrapper_fmucud_x_U31 : component lenet_wrapper_fmucud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv3_w_load_reg_746,
        din1 => p2_o_2_load_reg_751,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_21_fu_422_p2 = ap_const_lv1_1))) then 
                ci_reg_212 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                ci_reg_212 <= ci_2_reg_726;
            end if; 
        end if;
    end process;

    co_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_341_p2 = ap_const_lv1_1))) then 
                co_reg_112 <= co_2_reg_615;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_112 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i17_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_381_p2))) then 
                i17_reg_145 <= i_cast3_reg_625;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_21_fu_422_p2))) then 
                i17_reg_145 <= i_18_fu_433_p2;
            end if; 
        end if;
    end process;

    i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_381_p2 = ap_const_lv1_1))) then 
                i_reg_123 <= h_reg_638;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_290_p2 = ap_const_lv1_0))) then 
                i_reg_123 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j12_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_19_fu_403_p2))) then 
                j12_reg_179 <= j_cast2_reg_648;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_reg_722 = ap_const_lv1_1))) then 
                j12_reg_179 <= j_13_fu_596_p2;
            end if; 
        end if;
    end process;

    j_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_341_p2))) then 
                j_reg_134 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j_reg_134 <= w_reg_661;
            end if; 
        end if;
    end process;

    m_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_381_p2))) then 
                m_reg_155 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_21_fu_422_p2))) then 
                m_reg_155 <= m_1_reg_674;
            end if; 
        end if;
    end process;

    n_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_19_fu_403_p2))) then 
                n_reg_189 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_reg_722 = ap_const_lv1_1))) then 
                n_reg_189 <= n_1_reg_692;
            end if; 
        end if;
    end process;

    sum_1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_19_fu_403_p2))) then 
                sum_1_reg_200 <= sum_reg_167;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_reg_722 = ap_const_lv1_1))) then 
                sum_1_reg_200 <= sum_2_reg_223;
            end if; 
        end if;
    end process;

    sum_2_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_21_fu_422_p2 = ap_const_lv1_1))) then 
                sum_2_reg_223 <= sum_1_reg_200;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sum_2_reg_223 <= grp_fu_235_p2;
            end if; 
        end if;
    end process;

    sum_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_381_p2))) then 
                sum_reg_167 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_21_fu_422_p2))) then 
                sum_reg_167 <= sum_1_reg_200;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ci_2_reg_726 <= ci_2_fu_538_p2;
                exitcond_reg_722 <= exitcond_fu_532_p2;
                tmp_152_reg_702 <= tmp_152_fu_476_p1;
                tmp_153_reg_707 <= tmp_153_fu_480_p1;
                tmp_154_reg_712 <= tmp_154_fu_524_p1;
                tmp_171_reg_717 <= tmp_171_fu_528_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_2_reg_615 <= co_2_fu_296_p2;
                    tmp_158_reg_607(8 downto 1) <= tmp_158_fu_284_p2(8 downto 1);
                    tmp_166_cast_reg_602(9 downto 1) <= tmp_166_cast_fu_280_p1(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_290_p2 = ap_const_lv1_0))) then
                conv3_b_addr_reg_620 <= co_cast4_fu_245_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                conv3_b_load_reg_766 <= conv3_b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                conv3_w_load_reg_746 <= conv3_w_q0;
                p2_o_2_load_reg_751 <= p2_o_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_reg_638 <= h_fu_347_p2;
                    i_cast3_reg_625(3 downto 0) <= i_cast3_fu_302_p1(3 downto 0);
                    tmp_160_reg_630(11 downto 1) <= tmp_160_fu_335_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    j_cast2_reg_648(3 downto 0) <= j_cast2_fu_363_p1(3 downto 0);
                output_addr_reg_653 <= tmp_174_cast_fu_376_p1(11 - 1 downto 0);
                w_reg_661 <= w_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_674 <= m_1_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_692 <= n_1_fu_427_p2;
                tmp_149_reg_679 <= tmp_149_fu_414_p1;
                tmp_150_reg_684 <= tmp_150_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_20_reg_771 <= grp_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_22_reg_756 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_381_p2))) then
                    tmp_cast_81_reg_666(3 downto 0) <= tmp_cast_81_fu_399_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_341_p2))) then
                    tmp_cast_reg_643(3 downto 0) <= tmp_cast_fu_359_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_166_cast_reg_602(0) <= '0';
    tmp_158_reg_607(0) <= '0';
    i_cast3_reg_625(31 downto 4) <= "0000000000000000000000000000";
    tmp_160_reg_630(0) <= '0';
    tmp_cast_reg_643(31 downto 4) <= "0000000000000000000000000000";
    j_cast2_reg_648(31 downto 4) <= "0000000000000000000000000000";
    tmp_cast_81_reg_666(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_290_p2, ap_CS_fsm_state3, exitcond2_fu_341_p2, ap_CS_fsm_state4, exitcond1_fu_381_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_21_fu_422_p2, exitcond_reg_722, ap_CS_fsm_state8, tmp_19_fu_403_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_290_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_341_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_381_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_19_fu_403_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_21_fu_422_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_reg_722 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_290_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_290_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_290_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_290_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ci_2_fu_538_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ci_reg_212));
    ci_cast1_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_212),10));
    co_2_fu_296_p2 <= std_logic_vector(unsigned(co_reg_112) + unsigned(ap_const_lv5_1));
    co_cast4_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_112),32));
    conv3_b_address0 <= conv3_b_addr_reg_620;

    conv3_b_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv3_b_ce0 <= ap_const_logic_1;
        else 
            conv3_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3_w_address0 <= tmp_181_cast_fu_561_p1(12 - 1 downto 0);

    conv3_w_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv3_w_ce0 <= ap_const_logic_1;
        else 
            conv3_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_381_p2 <= "1" when (j_reg_134 = ap_const_lv4_A) else "0";
    exitcond2_fu_341_p2 <= "1" when (i_reg_123 = ap_const_lv4_A) else "0";
    exitcond3_fu_290_p2 <= "1" when (co_reg_112 = ap_const_lv5_10) else "0";
    exitcond_fu_532_p2 <= "1" when (ci_reg_212 = ap_const_lv3_6) else "0";

    grp_fu_235_p0_assign_proc : process(sum_reg_167, sum_2_reg_223, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_235_p0 <= sum_reg_167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_235_p0 <= sum_2_reg_223;
        else 
            grp_fu_235_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_235_p1_assign_proc : process(tmp_22_reg_756, conv3_b_load_reg_766, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_235_p1 <= conv3_b_load_reg_766;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_235_p1 <= tmp_22_reg_756;
        else 
            grp_fu_235_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_347_p2 <= std_logic_vector(unsigned(i_reg_123) + unsigned(ap_const_lv4_1));
    i_18_fu_433_p2 <= std_logic_vector(unsigned(i17_reg_145) + unsigned(ap_const_lv32_1));
    i_cast3_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_123),9));
    i_cast3_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_123),32));
    j_13_fu_596_p2 <= std_logic_vector(unsigned(j12_reg_179) + unsigned(ap_const_lv32_1));
    j_cast2_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_134),12));
    j_cast2_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_134),32));
    m_1_fu_408_p2 <= std_logic_vector(unsigned(m_reg_155) + unsigned(ap_const_lv32_1));
    n_1_fu_427_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(n_reg_189));
    output_r_address0 <= output_addr_reg_653;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_20_reg_771;

    output_r_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p2_o_2_address0 <= tmp_189_cast_fu_591_p1(11 - 1 downto 0);

    p2_o_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p2_o_2_ce0 <= ap_const_logic_1;
        else 
            p2_o_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_544_p3 <= (tmp_153_reg_707 & ap_const_lv2_0);
    p_shl2_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_fu_250_p3),9));
    p_shl3_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_262_p3),9));
    p_shl4_cast_fu_315_p3 <= (tmp_159_fu_310_p2 & ap_const_lv3_0);
    p_shl5_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_323_p3),12));
    p_shl6_cast_fu_566_p3 <= (tmp_154_reg_712 & ap_const_lv4_0);
    p_shl7_cast_fu_573_p3 <= (tmp_171_reg_717 & ap_const_lv1_0);
    p_shl8_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_167_fu_484_p3),8));
    p_shl9_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_168_fu_496_p3),8));
        p_shl_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_151_fu_452_p3),32));

    tmp_148_fu_323_p3 <= (tmp_159_fu_310_p2 & ap_const_lv1_0);
    tmp_149_fu_414_p1 <= j12_reg_179(12 - 1 downto 0);
    tmp_150_fu_418_p1 <= n_reg_189(13 - 1 downto 0);
    tmp_151_fu_452_p3 <= (tmp_162_fu_443_p2 & ap_const_lv2_0);
    tmp_152_fu_476_p1 <= tmp_164_fu_470_p2(13 - 1 downto 0);
    tmp_153_fu_480_p1 <= tmp_164_fu_470_p2(11 - 1 downto 0);
    tmp_154_fu_524_p1 <= tmp_170_fu_518_p2(8 - 1 downto 0);
    tmp_155_fu_250_p3 <= (co_reg_112 & ap_const_lv3_0);
    tmp_156_fu_262_p3 <= (co_reg_112 & ap_const_lv1_0);
    tmp_157_fu_274_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_258_p1) - unsigned(p_shl3_cast_fu_270_p1));
    tmp_158_fu_284_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_270_p1) + unsigned(p_shl2_cast_fu_258_p1));
    tmp_159_fu_310_p2 <= std_logic_vector(unsigned(i_cast3_cast_fu_306_p1) + unsigned(tmp_158_reg_607));
    tmp_160_fu_335_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_315_p3) + unsigned(p_shl5_cast_fu_331_p1));
    tmp_161_fu_371_p2 <= std_logic_vector(unsigned(tmp_160_reg_630) + unsigned(j_cast2_cast_fu_367_p1));
    tmp_162_fu_443_p2 <= std_logic_vector(unsigned(ci_cast1_cast_fu_439_p1) + unsigned(tmp_166_cast_reg_602));
    tmp_163_fu_464_p2 <= std_logic_vector(signed(p_shl_fu_460_p1) + signed(tmp_175_cast_fu_448_p1));
    tmp_164_fu_470_p2 <= std_logic_vector(unsigned(m_reg_155) + unsigned(tmp_163_fu_464_p2));
    tmp_165_fu_551_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_544_p3) + unsigned(tmp_152_reg_702));
        tmp_166_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_157_fu_274_p2),10));

    tmp_166_fu_556_p2 <= std_logic_vector(unsigned(tmp_150_reg_684) + unsigned(tmp_165_fu_551_p2));
    tmp_167_fu_484_p3 <= (ci_reg_212 & ap_const_lv4_0);
    tmp_168_fu_496_p3 <= (ci_reg_212 & ap_const_lv1_0);
    tmp_169_fu_508_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_492_p1) - unsigned(p_shl9_cast_fu_504_p1));
    tmp_170_fu_518_p2 <= std_logic_vector(unsigned(i17_reg_145) + unsigned(tmp_184_cast_fu_514_p1));
    tmp_171_fu_528_p1 <= tmp_170_fu_518_p2(11 - 1 downto 0);
    tmp_172_fu_580_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_566_p3) - unsigned(p_shl7_cast_fu_573_p3));
    tmp_173_fu_586_p2 <= std_logic_vector(unsigned(tmp_149_reg_679) + unsigned(tmp_172_fu_580_p2));
    tmp_174_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_161_fu_371_p2),32));
        tmp_175_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_162_fu_443_p2),32));

    tmp_181_cast_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_166_fu_556_p2),32));
        tmp_184_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_169_fu_508_p2),32));

    tmp_189_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_fu_586_p2),32));
    tmp_19_fu_403_p2 <= "1" when (signed(i17_reg_145) < signed(tmp_cast_reg_643)) else "0";
    tmp_21_fu_422_p2 <= "1" when (signed(j12_reg_179) < signed(tmp_cast_81_reg_666)) else "0";
    tmp_cast_81_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_393_p2),32));
    tmp_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_353_p2),32));
    tmp_fu_353_p2 <= std_logic_vector(unsigned(i_reg_123) + unsigned(ap_const_lv4_5));
    tmp_s_fu_393_p2 <= std_logic_vector(unsigned(j_reg_134) + unsigned(ap_const_lv4_5));
    w_fu_387_p2 <= std_logic_vector(unsigned(j_reg_134) + unsigned(ap_const_lv4_1));
end behav;
