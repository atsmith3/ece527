-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_w_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv1_w_0_ce0 : OUT STD_LOGIC;
    conv1_w_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_b_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv1_b_ce0 : OUT STD_LOGIC;
    conv1_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_191_cast_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_191_cast_reg_485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_194_cast_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_194_cast_reg_490 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_3_fu_265_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal co_3_reg_498 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv1_b_addr_reg_503 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast2_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast2_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_179_fu_308_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_179_reg_513 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_521 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast1_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast1_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_addr_reg_536 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_fu_368_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_544 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_85_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_85_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_201_cast_fu_388_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_201_cast_reg_554 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_185_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_185_reg_559 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_2_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_2_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_2_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_15_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_15_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_20_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_w_0_load_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_0_load_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal conv1_b_load_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_24_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal co_reg_94 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_105 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i19_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal j14_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal co_cast3_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_199_cast_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_205_cast_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_206_cast_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_174_fu_211_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_cast3_cast_fu_207_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast1_fu_219_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_175_fu_227_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_176_fu_237_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_223_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_177_fu_249_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast2_cast_fu_275_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_178_fu_279_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_172_fu_284_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_173_fu_296_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_288_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_304_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_cast_fu_314_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_330_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast1_cast_fu_344_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_180_fu_348_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_cast_fu_358_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_374_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_181_fu_384_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_182_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_184_fu_405_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_183_fu_401_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_409_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_186_fu_434_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_188_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_187_fu_438_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_189_fu_452_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component lenet_wrapper_fadbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_wrapper_fmucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lenet_wrapper_fadbkb_U21 : component lenet_wrapper_fadbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        din1 => grp_fu_192_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p2);

    lenet_wrapper_fmucud_U22 : component lenet_wrapper_fmucud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv1_w_0_load_reg_600,
        din1 => input_0_load_reg_605,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_318_p2 = ap_const_lv1_1))) then 
                co_reg_94 <= co_3_reg_498;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_94 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i19_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_362_p2))) then 
                i19_reg_127 <= i_cast2_reg_508;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_25_fu_462_p2))) then 
                i19_reg_127 <= i_20_fu_479_p2;
            end if; 
        end if;
    end process;

    i_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_362_p2 = ap_const_lv1_1))) then 
                i_reg_105 <= h_reg_521;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_259_p2 = ap_const_lv1_0))) then 
                i_reg_105 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j14_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_23_fu_423_p2))) then 
                j14_reg_160 <= j_cast1_reg_531;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j14_reg_160 <= j_15_reg_590;
            end if; 
        end if;
    end process;

    j_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_318_p2))) then 
                j_reg_116 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_reg_116 <= w_reg_544;
            end if; 
        end if;
    end process;

    m_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_362_p2))) then 
                m_reg_137 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_25_fu_462_p2))) then 
                m_reg_137 <= m_2_reg_567;
            end if; 
        end if;
    end process;

    n_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_23_fu_423_p2))) then 
                n_reg_169 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                n_reg_169 <= n_2_reg_585;
            end if; 
        end if;
    end process;

    sum_1_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_23_fu_423_p2))) then 
                sum_1_reg_180 <= sum_reg_148;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_1_reg_180 <= grp_fu_192_p2;
            end if; 
        end if;
    end process;

    sum_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_362_p2))) then 
                sum_reg_148 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_25_fu_462_p2))) then 
                sum_reg_148 <= sum_1_reg_180;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_3_reg_498 <= co_3_fu_265_p2;
                    tmp_191_cast_reg_485(5 downto 0) <= tmp_191_cast_fu_233_p1(5 downto 0);
                    tmp_194_cast_reg_490(9 downto 2) <= tmp_194_cast_fu_255_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_259_p2 = ap_const_lv1_0))) then
                conv1_b_addr_reg_503 <= co_cast3_fu_202_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                conv1_b_load_reg_620 <= conv1_b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                conv1_w_0_load_reg_600 <= conv1_w_0_q0;
                input_0_load_reg_605 <= input_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_reg_521 <= h_fu_324_p2;
                    i_cast2_reg_508(4 downto 0) <= i_cast2_fu_271_p1(4 downto 0);
                    tmp_179_reg_513(13 downto 2) <= tmp_179_fu_308_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_fu_462_p2 = ap_const_lv1_1))) then
                j_15_reg_590 <= j_15_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    j_cast1_reg_531(4 downto 0) <= j_cast1_fu_340_p1(4 downto 0);
                output_addr_reg_536 <= tmp_199_cast_fu_353_p1(13 - 1 downto 0);
                w_reg_544 <= w_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_2_reg_567 <= m_2_fu_428_p2;
                tmp_185_reg_559 <= tmp_185_fu_417_p2;
                    tmp_201_cast_reg_554(11 downto 5) <= tmp_201_cast_fu_388_p3(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_2_reg_585 <= n_2_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_24_reg_625 <= grp_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_26_reg_610 <= grp_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_362_p2))) then
                    tmp_cast_85_reg_549(5 downto 0) <= tmp_cast_85_fu_380_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_318_p2))) then
                    tmp_cast_reg_526(5 downto 0) <= tmp_cast_fu_336_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_191_cast_reg_485(31 downto 6) <= "00000000000000000000000000";
    tmp_194_cast_reg_490(1 downto 0) <= "00";
    i_cast2_reg_508(31 downto 5) <= "000000000000000000000000000";
    tmp_179_reg_513(1 downto 0) <= "00";
    tmp_cast_reg_526(31 downto 6) <= "00000000000000000000000000";
    j_cast1_reg_531(31 downto 5) <= "000000000000000000000000000";
    tmp_cast_85_reg_549(31 downto 6) <= "00000000000000000000000000";
    tmp_201_cast_reg_554(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_259_p2, ap_CS_fsm_state3, exitcond1_fu_318_p2, ap_CS_fsm_state4, exitcond_fu_362_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_25_fu_462_p2, tmp_23_fu_423_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_259_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_318_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_362_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_23_fu_423_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_25_fu_462_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_259_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_259_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_259_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_259_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    co_3_fu_265_p2 <= std_logic_vector(unsigned(co_reg_94) + unsigned(ap_const_lv3_1));
    co_cast3_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_94),6));
    co_cast3_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_94),32));
    conv1_b_address0 <= conv1_b_addr_reg_503;

    conv1_b_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_b_ce0 <= ap_const_logic_1;
        else 
            conv1_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_w_0_address0 <= tmp_206_cast_fu_457_p1(8 - 1 downto 0);

    conv1_w_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_w_0_ce0 <= ap_const_logic_1;
        else 
            conv1_w_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_318_p2 <= "1" when (i_reg_105 = ap_const_lv5_1C) else "0";
    exitcond2_fu_259_p2 <= "1" when (co_reg_94 = ap_const_lv3_6) else "0";
    exitcond_fu_362_p2 <= "1" when (j_reg_116 = ap_const_lv5_1C) else "0";

    grp_fu_192_p0_assign_proc : process(sum_reg_148, sum_1_reg_180, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_192_p0 <= sum_reg_148;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_192_p0 <= sum_1_reg_180;
        else 
            grp_fu_192_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_192_p1_assign_proc : process(tmp_26_reg_610, conv1_b_load_reg_620, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_192_p1 <= conv1_b_load_reg_620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_192_p1 <= tmp_26_reg_610;
        else 
            grp_fu_192_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_324_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_reg_105));
    i_20_fu_479_p2 <= std_logic_vector(unsigned(i19_reg_127) + unsigned(ap_const_lv32_1));
    i_cast2_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_105),10));
    i_cast2_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_105),32));
    i_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_105),6));
    input_0_address0 <= tmp_205_cast_fu_447_p1(10 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_15_fu_473_p2 <= std_logic_vector(unsigned(j14_reg_160) + unsigned(ap_const_lv32_1));
    j_cast1_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_116),14));
    j_cast1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_116),32));
    j_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_116),6));
    m_2_fu_428_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(m_reg_137));
    n_2_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(n_reg_169));
    output_r_address0 <= output_addr_reg_536;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_24_reg_625;

    output_r_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast1_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_174_fu_211_p3),6));
    p_shl2_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_174_fu_211_p3),9));
    p_shl3_cast_fu_288_p3 <= (tmp_172_fu_284_p1 & ap_const_lv5_0);
        p_shl4_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_173_fu_296_p3),14));

    p_shl5_cast_fu_409_p3 <= (tmp_184_fu_405_p1 & ap_const_lv2_0);
    p_shl_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_176_fu_237_p3),9));
    tmp_172_fu_284_p1 <= tmp_178_fu_279_p2(9 - 1 downto 0);
    tmp_173_fu_296_p3 <= (tmp_178_fu_279_p2 & ap_const_lv2_0);
    tmp_174_fu_211_p3 <= (co_reg_94 & ap_const_lv2_0);
    tmp_175_fu_227_p2 <= std_logic_vector(unsigned(co_cast3_cast_fu_207_p1) + unsigned(p_shl2_cast1_fu_219_p1));
    tmp_176_fu_237_p3 <= (co_reg_94 & ap_const_lv5_0);
    tmp_177_fu_249_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_245_p1) - unsigned(p_shl2_cast_fu_223_p1));
    tmp_178_fu_279_p2 <= std_logic_vector(signed(tmp_194_cast_reg_490) + signed(i_cast2_cast_fu_275_p1));
    tmp_179_fu_308_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_288_p3) - unsigned(p_shl4_cast_fu_304_p1));
    tmp_180_fu_348_p2 <= std_logic_vector(unsigned(tmp_179_reg_513) + unsigned(j_cast1_cast_fu_344_p1));
    tmp_181_fu_384_p1 <= i19_reg_127(7 - 1 downto 0);
    tmp_182_fu_396_p2 <= std_logic_vector(unsigned(tmp_191_cast_reg_485) + unsigned(m_reg_137));
    tmp_183_fu_401_p1 <= tmp_182_fu_396_p2(9 - 1 downto 0);
    tmp_184_fu_405_p1 <= tmp_182_fu_396_p2(7 - 1 downto 0);
    tmp_185_fu_417_p2 <= std_logic_vector(unsigned(tmp_183_fu_401_p1) + unsigned(p_shl5_cast_fu_409_p3));
    tmp_186_fu_434_p1 <= j14_reg_160(12 - 1 downto 0);
    tmp_187_fu_438_p1 <= n_reg_169(9 - 1 downto 0);
    tmp_188_fu_442_p2 <= std_logic_vector(unsigned(tmp_186_fu_434_p1) + unsigned(tmp_201_cast_reg_554));
    tmp_189_fu_452_p2 <= std_logic_vector(unsigned(tmp_187_fu_438_p1) + unsigned(tmp_185_reg_559));
    tmp_191_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_175_fu_227_p2),32));
        tmp_194_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_177_fu_249_p2),10));

    tmp_199_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_180_fu_348_p2),32));
    tmp_201_cast_fu_388_p3 <= (tmp_181_fu_384_p1 & ap_const_lv5_0);
    tmp_205_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_188_fu_442_p2),32));
    tmp_206_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_fu_452_p2),32));
    tmp_23_fu_423_p2 <= "1" when (signed(i19_reg_127) < signed(tmp_cast_reg_526)) else "0";
    tmp_25_fu_462_p2 <= "1" when (signed(j14_reg_160) < signed(tmp_cast_85_reg_549)) else "0";
    tmp_cast_85_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_374_p2),32));
    tmp_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_330_p2),32));
    tmp_fu_330_p2 <= std_logic_vector(unsigned(i_cast_fu_314_p1) + unsigned(ap_const_lv6_5));
    tmp_s_fu_374_p2 <= std_logic_vector(unsigned(j_cast_fu_358_p1) + unsigned(ap_const_lv6_5));
    w_fu_368_p2 <= std_logic_vector(unsigned(j_reg_116) + unsigned(ap_const_lv5_1));
end behav;
