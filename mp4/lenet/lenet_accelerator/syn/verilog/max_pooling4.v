// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        c3_o_2_address0,
        c3_o_2_ce0,
        c3_o_2_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [10:0] c3_o_2_address0;
output   c3_o_2_ce0;
input  [31:0] c3_o_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg c3_o_2_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] tmp_4_fu_179_p2;
reg   [7:0] tmp_4_reg_500;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_16_cast_fu_215_p1;
reg   [31:0] tmp_16_cast_reg_505;
wire   [4:0] c_1_fu_225_p2;
reg   [4:0] c_1_reg_513;
wire   [9:0] tmp_16_fu_252_p2;
reg   [9:0] tmp_16_reg_518;
wire    ap_CS_fsm_state3;
wire   [2:0] h_1_fu_264_p2;
reg   [2:0] h_1_reg_526;
wire   [31:0] i_cast_fu_278_p1;
reg   [31:0] i_cast_reg_531;
wire   [0:0] exitcond1_fu_258_p2;
wire   [31:0] tmp_7_cast_fu_288_p1;
reg   [31:0] tmp_7_cast_reg_536;
reg   [8:0] output_addr_reg_541;
wire    ap_CS_fsm_state4;
wire   [2:0] w_1_fu_312_p2;
reg   [2:0] w_1_reg_549;
wire   [31:0] j_cast_fu_326_p1;
reg   [31:0] j_cast_reg_554;
wire   [0:0] exitcond_fu_306_p2;
wire   [31:0] tmp_cast_fu_336_p1;
reg   [31:0] tmp_cast_reg_559;
wire   [11:0] tmp_21_fu_369_p2;
reg   [11:0] tmp_21_reg_564;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] j_1_fu_399_p2;
reg   [31:0] j_1_reg_580;
wire   [0:0] tmp_s_fu_394_p2;
wire   [31:0] i_1_fu_405_p2;
reg   [31:0] c3_o_2_load_reg_590;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_10_fu_158_p2;
reg   [0:0] tmp_10_reg_597;
wire    ap_CS_fsm_state8;
wire   [31:0] max_value_2_fu_493_p3;
wire    ap_CS_fsm_state9;
reg   [4:0] c_reg_81;
reg   [2:0] h_reg_92;
wire   [0:0] exitcond2_fu_219_p2;
reg   [2:0] w_reg_103;
wire   [0:0] tmp_9_fu_375_p2;
reg   [31:0] i6_reg_114;
reg   [31:0] max_value_reg_124;
reg   [31:0] j5_reg_137;
reg   [31:0] max_value_1_reg_146;
wire   [31:0] tmp_20_cast_fu_301_p1;
wire   [31:0] tmp_25_cast_fu_389_p1;
wire   [6:0] tmp_2_fu_167_p3;
wire   [7:0] c_cast3_cast_fu_163_p1;
wire   [7:0] p_shl2_cast_fu_175_p1;
wire   [7:0] tmp_12_fu_185_p3;
wire   [5:0] tmp_13_fu_197_p3;
wire   [8:0] p_shl1_cast_fu_205_p1;
wire   [8:0] p_shl_cast_fu_193_p1;
wire   [8:0] tmp_14_fu_209_p2;
wire   [7:0] h_cast2_cast_fu_231_p1;
wire   [7:0] tmp_15_fu_235_p2;
wire   [9:0] tmp_17_cast_fu_240_p1;
wire   [9:0] p_shl3_cast_fu_244_p3;
wire   [3:0] i_fu_270_p3;
wire   [3:0] tmp_7_fu_282_p2;
wire   [9:0] w_cast1_cast_fu_292_p1;
wire   [9:0] tmp_17_fu_296_p2;
wire   [3:0] j_fu_318_p3;
wire   [3:0] tmp_fu_330_p2;
wire   [31:0] tmp_18_fu_340_p2;
wire   [8:0] tmp_19_fu_345_p1;
wire   [10:0] tmp_20_fu_357_p1;
wire   [11:0] p_shl5_cast_fu_361_p3;
wire   [11:0] p_shl4_cast_fu_349_p3;
wire   [11:0] tmp_22_fu_380_p1;
wire   [11:0] tmp_23_fu_384_p2;
wire   [31:0] max_value_1_to_int_fu_411_p1;
wire   [31:0] c3_o_2_load_to_int_fu_429_p1;
wire   [7:0] tmp_1_fu_415_p4;
wire   [22:0] tmp_24_fu_425_p1;
wire   [0:0] notrhs_fu_452_p2;
wire   [0:0] notlhs_fu_446_p2;
wire   [7:0] tmp_3_fu_432_p4;
wire   [22:0] tmp_25_fu_442_p1;
wire   [0:0] notrhs5_fu_470_p2;
wire   [0:0] notlhs4_fu_464_p2;
wire   [0:0] tmp_5_fu_458_p2;
wire   [0:0] tmp_6_fu_476_p2;
wire   [0:0] tmp_8_fu_482_p2;
wire   [0:0] tmp_11_fu_488_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

lenet_wrapper_fcmdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_wrapper_fcmdEe_x_U36(
    .din0(max_value_1_reg_146),
    .din1(c3_o_2_load_reg_590),
    .opcode(5'd2),
    .dout(tmp_10_fu_158_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_258_p2 == 1'd1))) begin
        c_reg_81 <= c_1_reg_513;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_81 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_219_p2))) begin
        h_reg_92 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_306_p2 == 1'd1))) begin
        h_reg_92 <= h_1_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_s_fu_394_p2))) begin
        i6_reg_114 <= i_1_fu_405_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_306_p2))) begin
        i6_reg_114 <= i_cast_reg_531;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_9_fu_375_p2))) begin
        j5_reg_137 <= j_cast_reg_554;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j5_reg_137 <= j_1_reg_580;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_9_fu_375_p2))) begin
        max_value_1_reg_146 <= max_value_reg_124;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_value_1_reg_146 <= max_value_2_fu_493_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_s_fu_394_p2))) begin
        max_value_reg_124 <= max_value_1_reg_146;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_306_p2))) begin
        max_value_reg_124 <= 32'd3546862757;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_258_p2 == 1'd0))) begin
        w_reg_103 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_9_fu_375_p2))) begin
        w_reg_103 <= w_1_reg_549;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c3_o_2_load_reg_590 <= c3_o_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_1_reg_513 <= c_1_fu_225_p2;
        tmp_16_cast_reg_505[8 : 1] <= tmp_16_cast_fu_215_p1[8 : 1];
        tmp_4_reg_500 <= tmp_4_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_1_reg_526 <= h_1_fu_264_p2;
        tmp_16_reg_518 <= tmp_16_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_258_p2 == 1'd0))) begin
        i_cast_reg_531[3 : 1] <= i_cast_fu_278_p1[3 : 1];
        tmp_7_cast_reg_536[3 : 1] <= tmp_7_cast_fu_288_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_s_fu_394_p2 == 1'd1))) begin
        j_1_reg_580 <= j_1_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_306_p2))) begin
        j_cast_reg_554[3 : 1] <= j_cast_fu_326_p1[3 : 1];
        tmp_cast_reg_559[3 : 1] <= tmp_cast_fu_336_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_addr_reg_541 <= tmp_20_cast_fu_301_p1;
        w_1_reg_549 <= w_1_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_10_reg_597 <= tmp_10_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_21_reg_564[11 : 1] <= tmp_21_fu_369_p2[11 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_219_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_219_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c3_o_2_ce0 = 1'b1;
    end else begin
        c3_o_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_9_fu_375_p2))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_219_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_9_fu_375_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_s_fu_394_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c3_o_2_address0 = tmp_25_cast_fu_389_p1;

assign c3_o_2_load_to_int_fu_429_p1 = c3_o_2_load_reg_590;

assign c_1_fu_225_p2 = (c_reg_81 + 5'd1);

assign c_cast3_cast_fu_163_p1 = c_reg_81;

assign exitcond1_fu_258_p2 = ((h_reg_92 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_219_p2 = ((c_reg_81 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_306_p2 = ((w_reg_103 == 3'd5) ? 1'b1 : 1'b0);

assign h_1_fu_264_p2 = (h_reg_92 + 3'd1);

assign h_cast2_cast_fu_231_p1 = h_reg_92;

assign i_1_fu_405_p2 = (i6_reg_114 + 32'd1);

assign i_cast_fu_278_p1 = i_fu_270_p3;

assign i_fu_270_p3 = {{h_reg_92}, {1'd0}};

assign j_1_fu_399_p2 = (32'd1 + j5_reg_137);

assign j_cast_fu_326_p1 = j_fu_318_p3;

assign j_fu_318_p3 = {{w_reg_103}, {1'd0}};

assign max_value_1_to_int_fu_411_p1 = max_value_1_reg_146;

assign max_value_2_fu_493_p3 = ((tmp_11_fu_488_p2[0:0] === 1'b1) ? max_value_1_reg_146 : c3_o_2_load_reg_590);

assign notlhs4_fu_464_p2 = ((tmp_3_fu_432_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_446_p2 = ((tmp_1_fu_415_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs5_fu_470_p2 = ((tmp_25_fu_442_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_452_p2 = ((tmp_24_fu_425_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = output_addr_reg_541;

assign output_r_d0 = max_value_reg_124;

assign p_shl1_cast_fu_205_p1 = tmp_13_fu_197_p3;

assign p_shl2_cast_fu_175_p1 = tmp_2_fu_167_p3;

assign p_shl3_cast_fu_244_p3 = {{tmp_15_fu_235_p2}, {2'd0}};

assign p_shl4_cast_fu_349_p3 = {{tmp_19_fu_345_p1}, {3'd0}};

assign p_shl5_cast_fu_361_p3 = {{tmp_20_fu_357_p1}, {1'd0}};

assign p_shl_cast_fu_193_p1 = tmp_12_fu_185_p3;

assign tmp_11_fu_488_p2 = (tmp_8_fu_482_p2 & tmp_10_reg_597);

assign tmp_12_fu_185_p3 = {{c_reg_81}, {3'd0}};

assign tmp_13_fu_197_p3 = {{c_reg_81}, {1'd0}};

assign tmp_14_fu_209_p2 = (p_shl1_cast_fu_205_p1 + p_shl_cast_fu_193_p1);

assign tmp_15_fu_235_p2 = (tmp_4_reg_500 + h_cast2_cast_fu_231_p1);

assign tmp_16_cast_fu_215_p1 = tmp_14_fu_209_p2;

assign tmp_16_fu_252_p2 = (tmp_17_cast_fu_240_p1 + p_shl3_cast_fu_244_p3);

assign tmp_17_cast_fu_240_p1 = tmp_15_fu_235_p2;

assign tmp_17_fu_296_p2 = (tmp_16_reg_518 + w_cast1_cast_fu_292_p1);

assign tmp_18_fu_340_p2 = (tmp_16_cast_reg_505 + i6_reg_114);

assign tmp_19_fu_345_p1 = tmp_18_fu_340_p2[8:0];

assign tmp_1_fu_415_p4 = {{max_value_1_to_int_fu_411_p1[30:23]}};

assign tmp_20_cast_fu_301_p1 = tmp_17_fu_296_p2;

assign tmp_20_fu_357_p1 = tmp_18_fu_340_p2[10:0];

assign tmp_21_fu_369_p2 = (p_shl5_cast_fu_361_p3 + p_shl4_cast_fu_349_p3);

assign tmp_22_fu_380_p1 = j5_reg_137[11:0];

assign tmp_23_fu_384_p2 = (tmp_22_fu_380_p1 + tmp_21_reg_564);

assign tmp_24_fu_425_p1 = max_value_1_to_int_fu_411_p1[22:0];

assign tmp_25_cast_fu_389_p1 = tmp_23_fu_384_p2;

assign tmp_25_fu_442_p1 = c3_o_2_load_to_int_fu_429_p1[22:0];

assign tmp_2_fu_167_p3 = {{c_reg_81}, {2'd0}};

assign tmp_3_fu_432_p4 = {{c3_o_2_load_to_int_fu_429_p1[30:23]}};

assign tmp_4_fu_179_p2 = (c_cast3_cast_fu_163_p1 + p_shl2_cast_fu_175_p1);

assign tmp_5_fu_458_p2 = (notrhs_fu_452_p2 | notlhs_fu_446_p2);

assign tmp_6_fu_476_p2 = (notrhs5_fu_470_p2 | notlhs4_fu_464_p2);

assign tmp_7_cast_fu_288_p1 = tmp_7_fu_282_p2;

assign tmp_7_fu_282_p2 = (i_fu_270_p3 + 4'd2);

assign tmp_8_fu_482_p2 = (tmp_5_fu_458_p2 & tmp_6_fu_476_p2);

assign tmp_9_fu_375_p2 = (($signed(i6_reg_114) < $signed(tmp_7_cast_reg_536)) ? 1'b1 : 1'b0);

assign tmp_cast_fu_336_p1 = tmp_fu_330_p2;

assign tmp_fu_330_p2 = (j_fu_318_p3 + 4'd2);

assign tmp_s_fu_394_p2 = (($signed(j5_reg_137) < $signed(tmp_cast_reg_559)) ? 1'b1 : 1'b0);

assign w_1_fu_312_p2 = (w_reg_103 + 3'd1);

assign w_cast1_cast_fu_292_p1 = w_reg_103;

always @ (posedge ap_clk) begin
    tmp_16_cast_reg_505[0] <= 1'b0;
    tmp_16_cast_reg_505[31:9] <= 23'b00000000000000000000000;
    i_cast_reg_531[0] <= 1'b0;
    i_cast_reg_531[31:4] <= 28'b0000000000000000000000000000;
    tmp_7_cast_reg_536[0] <= 1'b0;
    tmp_7_cast_reg_536[31:4] <= 28'b0000000000000000000000000000;
    j_cast_reg_554[0] <= 1'b0;
    j_cast_reg_554[31:4] <= 28'b0000000000000000000000000000;
    tmp_cast_reg_559[0] <= 1'b0;
    tmp_cast_reg_559[31:4] <= 28'b0000000000000000000000000000;
    tmp_21_reg_564[0] <= 1'b0;
end

endmodule //max_pooling4
