// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        c1_o_2_address0,
        c1_o_2_ce0,
        c1_o_2_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [12:0] c1_o_2_address0;
output   c1_o_2_ce0;
input  [31:0] c1_o_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg c1_o_2_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [8:0] tmp_28_cast_fu_199_p1;
reg  signed [8:0] tmp_28_cast_reg_530;
wire    ap_CS_fsm_state2;
wire  signed [31:0] tmp_31_cast_fu_233_p1;
reg  signed [31:0] tmp_31_cast_reg_535;
wire   [2:0] c_2_fu_243_p2;
reg   [2:0] c_2_reg_543;
wire   [11:0] tmp_33_fu_282_p2;
reg   [11:0] tmp_33_reg_548;
wire    ap_CS_fsm_state3;
wire   [3:0] h_2_fu_294_p2;
reg   [3:0] h_2_reg_556;
wire   [31:0] i_cast_fu_308_p1;
reg   [31:0] i_cast_reg_561;
wire   [0:0] exitcond1_fu_288_p2;
wire   [31:0] tmp_cast_fu_318_p1;
reg   [31:0] tmp_cast_reg_566;
reg   [10:0] output_addr_reg_571;
wire    ap_CS_fsm_state4;
wire   [3:0] w_2_fu_342_p2;
reg   [3:0] w_2_reg_579;
wire   [31:0] j_cast_fu_356_p1;
reg   [31:0] j_cast_reg_584;
wire   [0:0] exitcond_fu_336_p2;
wire   [31:0] tmp_cast_9_fu_366_p1;
reg   [31:0] tmp_cast_9_reg_589;
wire   [13:0] tmp_38_fu_399_p2;
reg   [13:0] tmp_38_reg_594;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] j_2_fu_429_p2;
reg   [31:0] j_2_reg_610;
wire   [0:0] tmp_3_fu_424_p2;
wire   [31:0] i_2_fu_435_p2;
reg   [31:0] c1_o_2_load_reg_620;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_19_fu_164_p2;
reg   [0:0] tmp_19_reg_627;
wire    ap_CS_fsm_state8;
wire   [31:0] max_value_3_fu_523_p3;
wire    ap_CS_fsm_state9;
reg   [2:0] c_reg_87;
reg   [3:0] h_reg_98;
wire   [0:0] exitcond2_fu_237_p2;
reg   [3:0] w_reg_109;
wire   [0:0] tmp_2_fu_405_p2;
reg   [31:0] i8_reg_120;
reg   [31:0] max_value_reg_130;
reg   [31:0] j7_reg_143;
reg   [31:0] max_value_1_reg_152;
wire   [31:0] tmp_36_cast_fu_331_p1;
wire   [31:0] tmp_41_cast_fu_419_p1;
wire   [6:0] tmp_24_fu_169_p3;
wire   [3:0] tmp_25_fu_181_p3;
wire   [7:0] p_shl2_cast_fu_177_p1;
wire   [7:0] p_shl3_cast_fu_189_p1;
wire   [7:0] tmp_26_fu_193_p2;
wire   [7:0] tmp_27_fu_203_p3;
wire   [4:0] tmp_28_fu_215_p3;
wire   [8:0] p_shl_cast_fu_211_p1;
wire   [8:0] p_shl1_cast_fu_223_p1;
wire   [8:0] tmp_29_fu_227_p2;
wire   [8:0] h_cast2_cast_fu_249_p1;
wire   [8:0] tmp_30_fu_253_p2;
wire   [7:0] tmp_31_fu_258_p1;
wire   [9:0] tmp_32_fu_270_p3;
wire   [11:0] p_shl4_cast_fu_262_p3;
wire  signed [11:0] p_shl5_cast_fu_278_p1;
wire   [4:0] i_fu_300_p3;
wire   [4:0] tmp_s_fu_312_p2;
wire   [11:0] w_cast1_cast_fu_322_p1;
wire   [11:0] tmp_34_fu_326_p2;
wire   [4:0] j_fu_348_p3;
wire   [4:0] tmp_fu_360_p2;
wire   [31:0] tmp_35_fu_370_p2;
wire   [8:0] tmp_36_fu_375_p1;
wire   [11:0] tmp_37_fu_387_p1;
wire   [13:0] p_shl6_cast_fu_379_p3;
wire   [13:0] p_shl7_cast_fu_391_p3;
wire   [13:0] tmp_39_fu_410_p1;
wire   [13:0] tmp_40_fu_414_p2;
wire   [31:0] max_value_1_to_int_fu_441_p1;
wire   [31:0] c1_o_2_load_to_int_fu_459_p1;
wire   [7:0] tmp_12_fu_445_p4;
wire   [22:0] tmp_41_fu_455_p1;
wire   [0:0] notrhs_fu_482_p2;
wire   [0:0] notlhs_fu_476_p2;
wire   [7:0] tmp_14_fu_462_p4;
wire   [22:0] tmp_42_fu_472_p1;
wire   [0:0] notrhs5_fu_500_p2;
wire   [0:0] notlhs4_fu_494_p2;
wire   [0:0] tmp_16_fu_488_p2;
wire   [0:0] tmp_17_fu_506_p2;
wire   [0:0] tmp_18_fu_512_p2;
wire   [0:0] tmp_20_fu_518_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

lenet_wrapper_fcmdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_wrapper_fcmdEe_U27(
    .din0(max_value_1_reg_152),
    .din1(c1_o_2_load_reg_620),
    .opcode(5'd2),
    .dout(tmp_19_fu_164_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_288_p2 == 1'd1))) begin
        c_reg_87 <= c_2_reg_543;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_87 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_237_p2))) begin
        h_reg_98 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_336_p2 == 1'd1))) begin
        h_reg_98 <= h_2_reg_556;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_3_fu_424_p2))) begin
        i8_reg_120 <= i_2_fu_435_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_336_p2))) begin
        i8_reg_120 <= i_cast_reg_561;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_fu_405_p2))) begin
        j7_reg_143 <= j_cast_reg_584;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j7_reg_143 <= j_2_reg_610;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_2_fu_405_p2))) begin
        max_value_1_reg_152 <= max_value_reg_130;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_value_1_reg_152 <= max_value_3_fu_523_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_3_fu_424_p2))) begin
        max_value_reg_130 <= max_value_1_reg_152;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_336_p2))) begin
        max_value_reg_130 <= 32'd3546862757;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_288_p2 == 1'd0))) begin
        w_reg_109 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_2_fu_405_p2))) begin
        w_reg_109 <= w_2_reg_579;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c1_o_2_load_reg_620 <= c1_o_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_2_reg_543 <= c_2_fu_243_p2;
        tmp_28_cast_reg_530[8 : 1] <= tmp_28_cast_fu_199_p1[8 : 1];
        tmp_31_cast_reg_535[31 : 2] <= tmp_31_cast_fu_233_p1[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_2_reg_556 <= h_2_fu_294_p2;
        tmp_33_reg_548[11 : 1] <= tmp_33_fu_282_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_288_p2 == 1'd0))) begin
        i_cast_reg_561[4 : 1] <= i_cast_fu_308_p1[4 : 1];
        tmp_cast_reg_566[4 : 1] <= tmp_cast_fu_318_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_424_p2 == 1'd1))) begin
        j_2_reg_610 <= j_2_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_336_p2))) begin
        j_cast_reg_584[4 : 1] <= j_cast_fu_356_p1[4 : 1];
        tmp_cast_9_reg_589[4 : 1] <= tmp_cast_9_fu_366_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_addr_reg_571 <= tmp_36_cast_fu_331_p1;
        w_2_reg_579 <= w_2_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_19_reg_627 <= tmp_19_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_38_reg_594[13 : 2] <= tmp_38_fu_399_p2[13 : 2];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_237_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_237_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_o_2_ce0 = 1'b1;
    end else begin
        c1_o_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_2_fu_405_p2))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_237_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_288_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_336_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_2_fu_405_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_3_fu_424_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c1_o_2_address0 = tmp_41_cast_fu_419_p1;

assign c1_o_2_load_to_int_fu_459_p1 = c1_o_2_load_reg_620;

assign c_2_fu_243_p2 = (c_reg_87 + 3'd1);

assign exitcond1_fu_288_p2 = ((h_reg_98 == 4'd14) ? 1'b1 : 1'b0);

assign exitcond2_fu_237_p2 = ((c_reg_87 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_336_p2 = ((w_reg_109 == 4'd14) ? 1'b1 : 1'b0);

assign h_2_fu_294_p2 = (4'd1 + h_reg_98);

assign h_cast2_cast_fu_249_p1 = h_reg_98;

assign i_2_fu_435_p2 = (i8_reg_120 + 32'd1);

assign i_cast_fu_308_p1 = i_fu_300_p3;

assign i_fu_300_p3 = {{h_reg_98}, {1'd0}};

assign j_2_fu_429_p2 = (32'd1 + j7_reg_143);

assign j_cast_fu_356_p1 = j_fu_348_p3;

assign j_fu_348_p3 = {{w_reg_109}, {1'd0}};

assign max_value_1_to_int_fu_441_p1 = max_value_1_reg_152;

assign max_value_3_fu_523_p3 = ((tmp_20_fu_518_p2[0:0] === 1'b1) ? max_value_1_reg_152 : c1_o_2_load_reg_620);

assign notlhs4_fu_494_p2 = ((tmp_14_fu_462_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_476_p2 = ((tmp_12_fu_445_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs5_fu_500_p2 = ((tmp_42_fu_472_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_482_p2 = ((tmp_41_fu_455_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = output_addr_reg_571;

assign output_r_d0 = max_value_reg_130;

assign p_shl1_cast_fu_223_p1 = tmp_28_fu_215_p3;

assign p_shl2_cast_fu_177_p1 = tmp_24_fu_169_p3;

assign p_shl3_cast_fu_189_p1 = tmp_25_fu_181_p3;

assign p_shl4_cast_fu_262_p3 = {{tmp_31_fu_258_p1}, {4'd0}};

assign p_shl5_cast_fu_278_p1 = $signed(tmp_32_fu_270_p3);

assign p_shl6_cast_fu_379_p3 = {{tmp_36_fu_375_p1}, {5'd0}};

assign p_shl7_cast_fu_391_p3 = {{tmp_37_fu_387_p1}, {2'd0}};

assign p_shl_cast_fu_211_p1 = tmp_27_fu_203_p3;

assign tmp_12_fu_445_p4 = {{max_value_1_to_int_fu_441_p1[30:23]}};

assign tmp_14_fu_462_p4 = {{c1_o_2_load_to_int_fu_459_p1[30:23]}};

assign tmp_16_fu_488_p2 = (notrhs_fu_482_p2 | notlhs_fu_476_p2);

assign tmp_17_fu_506_p2 = (notrhs5_fu_500_p2 | notlhs4_fu_494_p2);

assign tmp_18_fu_512_p2 = (tmp_16_fu_488_p2 & tmp_17_fu_506_p2);

assign tmp_20_fu_518_p2 = (tmp_18_fu_512_p2 & tmp_19_reg_627);

assign tmp_24_fu_169_p3 = {{c_reg_87}, {4'd0}};

assign tmp_25_fu_181_p3 = {{c_reg_87}, {1'd0}};

assign tmp_26_fu_193_p2 = (p_shl2_cast_fu_177_p1 - p_shl3_cast_fu_189_p1);

assign tmp_27_fu_203_p3 = {{c_reg_87}, {5'd0}};

assign tmp_28_cast_fu_199_p1 = $signed(tmp_26_fu_193_p2);

assign tmp_28_fu_215_p3 = {{c_reg_87}, {2'd0}};

assign tmp_29_fu_227_p2 = (p_shl_cast_fu_211_p1 - p_shl1_cast_fu_223_p1);

assign tmp_2_fu_405_p2 = (($signed(i8_reg_120) < $signed(tmp_cast_reg_566)) ? 1'b1 : 1'b0);

assign tmp_30_fu_253_p2 = ($signed(tmp_28_cast_reg_530) + $signed(h_cast2_cast_fu_249_p1));

assign tmp_31_cast_fu_233_p1 = $signed(tmp_29_fu_227_p2);

assign tmp_31_fu_258_p1 = tmp_30_fu_253_p2[7:0];

assign tmp_32_fu_270_p3 = {{tmp_30_fu_253_p2}, {1'd0}};

assign tmp_33_fu_282_p2 = ($signed(p_shl4_cast_fu_262_p3) - $signed(p_shl5_cast_fu_278_p1));

assign tmp_34_fu_326_p2 = (tmp_33_reg_548 + w_cast1_cast_fu_322_p1);

assign tmp_35_fu_370_p2 = ($signed(tmp_31_cast_reg_535) + $signed(i8_reg_120));

assign tmp_36_cast_fu_331_p1 = tmp_34_fu_326_p2;

assign tmp_36_fu_375_p1 = tmp_35_fu_370_p2[8:0];

assign tmp_37_fu_387_p1 = tmp_35_fu_370_p2[11:0];

assign tmp_38_fu_399_p2 = (p_shl6_cast_fu_379_p3 - p_shl7_cast_fu_391_p3);

assign tmp_39_fu_410_p1 = j7_reg_143[13:0];

assign tmp_3_fu_424_p2 = (($signed(j7_reg_143) < $signed(tmp_cast_9_reg_589)) ? 1'b1 : 1'b0);

assign tmp_40_fu_414_p2 = (tmp_39_fu_410_p1 + tmp_38_reg_594);

assign tmp_41_cast_fu_419_p1 = tmp_40_fu_414_p2;

assign tmp_41_fu_455_p1 = max_value_1_to_int_fu_441_p1[22:0];

assign tmp_42_fu_472_p1 = c1_o_2_load_to_int_fu_459_p1[22:0];

assign tmp_cast_9_fu_366_p1 = tmp_fu_360_p2;

assign tmp_cast_fu_318_p1 = tmp_s_fu_312_p2;

assign tmp_fu_360_p2 = (j_fu_348_p3 + 5'd2);

assign tmp_s_fu_312_p2 = (i_fu_300_p3 + 5'd2);

assign w_2_fu_342_p2 = (w_reg_109 + 4'd1);

assign w_cast1_cast_fu_322_p1 = w_reg_109;

always @ (posedge ap_clk) begin
    tmp_28_cast_reg_530[0] <= 1'b0;
    tmp_31_cast_reg_535[1:0] <= 2'b00;
    tmp_33_reg_548[0] <= 1'b0;
    i_cast_reg_561[0] <= 1'b0;
    i_cast_reg_561[31:5] <= 27'b000000000000000000000000000;
    tmp_cast_reg_566[0] <= 1'b0;
    tmp_cast_reg_566[31:5] <= 27'b000000000000000000000000000;
    j_cast_reg_584[0] <= 1'b0;
    j_cast_reg_584[31:5] <= 27'b000000000000000000000000000;
    tmp_cast_9_reg_589[0] <= 1'b0;
    tmp_cast_9_reg_589[31:5] <= 27'b000000000000000000000000000;
    tmp_38_reg_594[1:0] <= 2'b00;
end

endmodule //max_pooling2
