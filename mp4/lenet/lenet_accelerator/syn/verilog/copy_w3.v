// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_w3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY,
        m_axi_in_r_AWADDR,
        m_axi_in_r_AWID,
        m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID,
        m_axi_in_r_WREADY,
        m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST,
        m_axi_in_r_WID,
        m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY,
        m_axi_in_r_ARADDR,
        m_axi_in_r_ARID,
        m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID,
        m_axi_in_r_RREADY,
        m_axi_in_r_RDATA,
        m_axi_in_r_RLAST,
        m_axi_in_r_RID,
        m_axi_in_r_RUSER,
        m_axi_in_r_RRESP,
        m_axi_in_r_BVALID,
        m_axi_in_r_BREADY,
        m_axi_in_r_BRESP,
        m_axi_in_r_BID,
        m_axi_in_r_BUSER,
        c3_w_i7,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_in_r_AWVALID;
input   m_axi_in_r_AWREADY;
output  [31:0] m_axi_in_r_AWADDR;
output  [0:0] m_axi_in_r_AWID;
output  [31:0] m_axi_in_r_AWLEN;
output  [2:0] m_axi_in_r_AWSIZE;
output  [1:0] m_axi_in_r_AWBURST;
output  [1:0] m_axi_in_r_AWLOCK;
output  [3:0] m_axi_in_r_AWCACHE;
output  [2:0] m_axi_in_r_AWPROT;
output  [3:0] m_axi_in_r_AWQOS;
output  [3:0] m_axi_in_r_AWREGION;
output  [0:0] m_axi_in_r_AWUSER;
output   m_axi_in_r_WVALID;
input   m_axi_in_r_WREADY;
output  [31:0] m_axi_in_r_WDATA;
output  [3:0] m_axi_in_r_WSTRB;
output   m_axi_in_r_WLAST;
output  [0:0] m_axi_in_r_WID;
output  [0:0] m_axi_in_r_WUSER;
output   m_axi_in_r_ARVALID;
input   m_axi_in_r_ARREADY;
output  [31:0] m_axi_in_r_ARADDR;
output  [0:0] m_axi_in_r_ARID;
output  [31:0] m_axi_in_r_ARLEN;
output  [2:0] m_axi_in_r_ARSIZE;
output  [1:0] m_axi_in_r_ARBURST;
output  [1:0] m_axi_in_r_ARLOCK;
output  [3:0] m_axi_in_r_ARCACHE;
output  [2:0] m_axi_in_r_ARPROT;
output  [3:0] m_axi_in_r_ARQOS;
output  [3:0] m_axi_in_r_ARREGION;
output  [0:0] m_axi_in_r_ARUSER;
input   m_axi_in_r_RVALID;
output   m_axi_in_r_RREADY;
input  [31:0] m_axi_in_r_RDATA;
input   m_axi_in_r_RLAST;
input  [0:0] m_axi_in_r_RID;
input  [0:0] m_axi_in_r_RUSER;
input  [1:0] m_axi_in_r_RRESP;
input   m_axi_in_r_BVALID;
output   m_axi_in_r_BREADY;
input  [1:0] m_axi_in_r_BRESP;
input  [0:0] m_axi_in_r_BID;
input  [0:0] m_axi_in_r_BUSER;
input  [29:0] c3_w_i7;
output  [11:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_in_r_ARVALID;
reg m_axi_in_r_RREADY;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_r_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    in_r_blk_n_R;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_284_p2;
wire   [31:0] c3_w_i7_cast_fu_137_p1;
reg   [31:0] c3_w_i7_cast_reg_296;
wire  signed [9:0] tmp_134_cast_fu_171_p1;
reg  signed [9:0] tmp_134_cast_reg_301;
wire    ap_CS_fsm_state2;
wire   [4:0] i_10_fu_181_p2;
reg   [4:0] i_10_reg_309;
wire   [31:0] tmp_132_fu_212_p2;
reg   [31:0] tmp_132_reg_314;
wire    ap_CS_fsm_state3;
wire   [2:0] j_8_fu_224_p2;
reg   [2:0] j_8_reg_322;
wire   [31:0] tmp_135_fu_245_p2;
reg   [31:0] tmp_135_reg_327;
wire    ap_CS_fsm_state4;
wire   [2:0] k_5_fu_257_p2;
reg   [2:0] k_5_reg_335;
wire   [31:0] tmp_136_fu_263_p2;
reg   [31:0] tmp_136_reg_340;
wire   [0:0] exitcond1_fu_251_p2;
reg    ap_sig_ioackin_m_axi_in_r_ARREADY;
reg   [11:0] out_addr_reg_351;
reg    ap_block_state12;
wire   [2:0] l_2_fu_290_p2;
reg   [2:0] l_2_reg_359;
reg   [31:0] in_addr_read_reg_364;
reg   [4:0] i_reg_93;
wire   [0:0] exitcond2_fu_218_p2;
reg   [2:0] j_reg_104;
wire   [0:0] exitcond3_fu_175_p2;
reg   [2:0] k_reg_115;
reg   [2:0] l_reg_126;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_137_fu_278_p2;
reg    ap_reg_ioackin_m_axi_in_r_ARREADY;
wire   [7:0] tmp_fu_141_p3;
wire   [5:0] tmp_s_fu_153_p3;
wire   [8:0] p_shl_cast_fu_149_p1;
wire   [8:0] p_shl1_cast_fu_161_p1;
wire   [8:0] tmp_130_fu_165_p2;
wire   [9:0] j_cast3_cast_fu_187_p1;
wire   [9:0] tmp_131_fu_191_p2;
wire   [11:0] tmp_129_fu_200_p3;
wire  signed [31:0] tmp_135_cast_fu_196_p1;
wire  signed [31:0] p_shl2_fu_208_p1;
wire   [31:0] k_cast2_fu_230_p1;
wire   [31:0] tmp_133_fu_234_p2;
wire   [31:0] tmp_134_fu_239_p2;
wire   [31:0] l_cast1_fu_274_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_reg_ioackin_m_axi_in_r_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_in_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_in_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_in_r_ARREADY <= 1'b0;
            end else if ((1'b1 == m_axi_in_r_ARREADY)) begin
                ap_reg_ioackin_m_axi_in_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_218_p2 == 1'd1))) begin
        i_reg_93 <= i_10_reg_309;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_93 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond3_fu_175_p2))) begin
        j_reg_104 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_251_p2 == 1'd1))) begin
        j_reg_104 <= j_8_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_218_p2))) begin
        k_reg_115 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & ~((1'd0 == exitcond_fu_284_p2) & (1'b0 == m_axi_in_r_RVALID)) & (exitcond_fu_284_p2 == 1'd1))) begin
        k_reg_115 <= k_5_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        l_reg_126 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        l_reg_126 <= l_2_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c3_w_i7_cast_reg_296[29 : 0] <= c3_w_i7_cast_fu_137_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_10_reg_309 <= i_10_fu_181_p2;
        tmp_134_cast_reg_301[9 : 1] <= tmp_134_cast_fu_171_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond_fu_284_p2) & ~((1'd0 == exitcond_fu_284_p2) & (1'b0 == m_axi_in_r_RVALID)))) begin
        in_addr_read_reg_364 <= m_axi_in_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_8_reg_322 <= j_8_fu_224_p2;
        tmp_132_reg_314 <= tmp_132_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_5_reg_335 <= k_5_fu_257_p2;
        tmp_135_reg_327 <= tmp_135_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~((1'd0 == exitcond_fu_284_p2) & (1'b0 == m_axi_in_r_RVALID)))) begin
        l_2_reg_359 <= l_2_fu_290_p2;
        out_addr_reg_351 <= tmp_137_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_251_p2))) begin
        tmp_136_reg_340 <= tmp_136_fu_263_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond3_fu_175_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond3_fu_175_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_in_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_in_r_ARREADY = m_axi_in_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_in_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_blk_n_AR = m_axi_in_r_ARREADY;
    end else begin
        in_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond_fu_284_p2))) begin
        in_r_blk_n_R = m_axi_in_r_RVALID;
    end else begin
        in_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_reg_ioackin_m_axi_in_r_ARREADY))) begin
        m_axi_in_r_ARVALID = 1'b1;
    end else begin
        m_axi_in_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond_fu_284_p2) & ~((1'd0 == exitcond_fu_284_p2) & (1'b0 == m_axi_in_r_RVALID)))) begin
        m_axi_in_r_RREADY = 1'b1;
    end else begin
        m_axi_in_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond3_fu_175_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_218_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_251_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_m_axi_in_r_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & ~((1'd0 == exitcond_fu_284_p2) & (1'b0 == m_axi_in_r_RVALID)) & (exitcond_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond_fu_284_p2) & ~((1'd0 == exitcond_fu_284_p2) & (1'b0 == m_axi_in_r_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state12 = ((1'd0 == exitcond_fu_284_p2) & (1'b0 == m_axi_in_r_RVALID));
end

assign c3_w_i7_cast_fu_137_p1 = c3_w_i7;

assign exitcond1_fu_251_p2 = ((k_reg_115 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_218_p2 = ((j_reg_104 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_fu_175_p2 = ((i_reg_93 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_284_p2 = ((l_reg_126 == 3'd5) ? 1'b1 : 1'b0);

assign i_10_fu_181_p2 = (i_reg_93 + 5'd1);

assign j_8_fu_224_p2 = (j_reg_104 + 3'd1);

assign j_cast3_cast_fu_187_p1 = j_reg_104;

assign k_5_fu_257_p2 = (3'd1 + k_reg_115);

assign k_cast2_fu_230_p1 = k_reg_115;

assign l_2_fu_290_p2 = (l_reg_126 + 3'd1);

assign l_cast1_fu_274_p1 = l_reg_126;

assign m_axi_in_r_ARADDR = tmp_136_reg_340;

assign m_axi_in_r_ARBURST = 2'd0;

assign m_axi_in_r_ARCACHE = 4'd0;

assign m_axi_in_r_ARID = 1'd0;

assign m_axi_in_r_ARLEN = 32'd5;

assign m_axi_in_r_ARLOCK = 2'd0;

assign m_axi_in_r_ARPROT = 3'd0;

assign m_axi_in_r_ARQOS = 4'd0;

assign m_axi_in_r_ARREGION = 4'd0;

assign m_axi_in_r_ARSIZE = 3'd0;

assign m_axi_in_r_ARUSER = 1'd0;

assign m_axi_in_r_AWADDR = 32'd0;

assign m_axi_in_r_AWBURST = 2'd0;

assign m_axi_in_r_AWCACHE = 4'd0;

assign m_axi_in_r_AWID = 1'd0;

assign m_axi_in_r_AWLEN = 32'd0;

assign m_axi_in_r_AWLOCK = 2'd0;

assign m_axi_in_r_AWPROT = 3'd0;

assign m_axi_in_r_AWQOS = 4'd0;

assign m_axi_in_r_AWREGION = 4'd0;

assign m_axi_in_r_AWSIZE = 3'd0;

assign m_axi_in_r_AWUSER = 1'd0;

assign m_axi_in_r_AWVALID = 1'b0;

assign m_axi_in_r_BREADY = 1'b0;

assign m_axi_in_r_WDATA = 32'd0;

assign m_axi_in_r_WID = 1'd0;

assign m_axi_in_r_WLAST = 1'b0;

assign m_axi_in_r_WSTRB = 4'd0;

assign m_axi_in_r_WUSER = 1'd0;

assign m_axi_in_r_WVALID = 1'b0;

assign out_r_address0 = out_addr_reg_351;

assign out_r_d0 = in_addr_read_reg_364;

assign p_shl1_cast_fu_161_p1 = tmp_s_fu_153_p3;

assign p_shl2_fu_208_p1 = $signed(tmp_129_fu_200_p3);

assign p_shl_cast_fu_149_p1 = tmp_fu_141_p3;

assign tmp_129_fu_200_p3 = {{tmp_131_fu_191_p2}, {2'd0}};

assign tmp_130_fu_165_p2 = (p_shl_cast_fu_149_p1 - p_shl1_cast_fu_161_p1);

assign tmp_131_fu_191_p2 = ($signed(tmp_134_cast_reg_301) + $signed(j_cast3_cast_fu_187_p1));

assign tmp_132_fu_212_p2 = ($signed(tmp_135_cast_fu_196_p1) + $signed(p_shl2_fu_208_p1));

assign tmp_133_fu_234_p2 = (tmp_132_reg_314 + k_cast2_fu_230_p1);

assign tmp_134_cast_fu_171_p1 = $signed(tmp_130_fu_165_p2);

assign tmp_134_fu_239_p2 = tmp_133_fu_234_p2 << 32'd2;

assign tmp_135_cast_fu_196_p1 = $signed(tmp_131_fu_191_p2);

assign tmp_135_fu_245_p2 = (tmp_133_fu_234_p2 + tmp_134_fu_239_p2);

assign tmp_136_fu_263_p2 = (tmp_135_fu_245_p2 + c3_w_i7_cast_reg_296);

assign tmp_137_fu_278_p2 = (l_cast1_fu_274_p1 + tmp_135_reg_327);

assign tmp_fu_141_p3 = {{i_reg_93}, {3'd0}};

assign tmp_s_fu_153_p3 = {{i_reg_93}, {1'd0}};

always @ (posedge ap_clk) begin
    c3_w_i7_cast_reg_296[31:30] <= 2'b00;
    tmp_134_cast_reg_301[0] <= 1'b0;
end

endmodule //copy_w3
