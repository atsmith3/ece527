// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        conv1_w_0_address0,
        conv1_w_0_ce0,
        conv1_w_0_q0,
        conv1_b_address0,
        conv1_b_ce0,
        conv1_b_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [7:0] conv1_w_0_address0;
output   conv1_w_0_ce0;
input  [31:0] conv1_w_0_q0;
output  [2:0] conv1_b_address0;
output   conv1_b_ce0;
input  [31:0] conv1_b_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg conv1_w_0_ce0;
reg conv1_b_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_191_cast_fu_233_p1;
reg   [31:0] tmp_191_cast_reg_485;
wire    ap_CS_fsm_state2;
wire  signed [9:0] tmp_194_cast_fu_255_p1;
reg  signed [9:0] tmp_194_cast_reg_490;
wire   [2:0] co_3_fu_265_p2;
reg   [2:0] co_3_reg_498;
reg   [2:0] conv1_b_addr_reg_503;
wire   [0:0] exitcond2_fu_259_p2;
wire   [31:0] i_cast2_fu_271_p1;
reg   [31:0] i_cast2_reg_508;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_179_fu_308_p2;
reg   [13:0] tmp_179_reg_513;
wire   [4:0] h_fu_324_p2;
reg   [4:0] h_reg_521;
wire   [31:0] tmp_cast_fu_336_p1;
reg   [31:0] tmp_cast_reg_526;
wire   [0:0] exitcond1_fu_318_p2;
wire   [31:0] j_cast1_fu_340_p1;
reg   [31:0] j_cast1_reg_531;
wire    ap_CS_fsm_state4;
reg   [12:0] output_addr_reg_536;
wire   [4:0] w_fu_368_p2;
reg   [4:0] w_reg_544;
wire   [31:0] tmp_cast_85_fu_380_p1;
reg   [31:0] tmp_cast_85_reg_549;
wire   [0:0] exitcond_fu_362_p2;
wire   [11:0] tmp_201_cast_fu_388_p3;
reg   [11:0] tmp_201_cast_reg_554;
wire    ap_CS_fsm_state5;
wire   [8:0] tmp_185_fu_417_p2;
reg   [8:0] tmp_185_reg_559;
wire   [31:0] m_2_fu_428_p2;
reg   [31:0] m_2_reg_567;
wire    ap_CS_fsm_state6;
wire   [31:0] n_2_fu_467_p2;
reg   [31:0] n_2_reg_585;
wire   [31:0] j_15_fu_473_p2;
reg   [31:0] j_15_reg_590;
wire   [0:0] tmp_25_fu_462_p2;
wire   [31:0] i_20_fu_479_p2;
reg   [31:0] conv1_w_0_load_reg_600;
wire    ap_CS_fsm_state7;
reg   [31:0] input_0_load_reg_605;
wire   [31:0] grp_fu_198_p2;
reg   [31:0] tmp_26_reg_610;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_192_p2;
wire    ap_CS_fsm_state16;
reg   [31:0] conv1_b_load_reg_620;
wire    ap_CS_fsm_state17;
reg   [31:0] tmp_24_reg_625;
wire    ap_CS_fsm_state22;
reg   [2:0] co_reg_94;
reg   [4:0] i_reg_105;
reg   [4:0] j_reg_116;
wire    ap_CS_fsm_state23;
reg   [31:0] i19_reg_127;
reg   [31:0] m_reg_137;
reg   [31:0] sum_reg_148;
reg   [31:0] j14_reg_160;
wire   [0:0] tmp_23_fu_423_p2;
reg   [31:0] n_reg_169;
reg   [31:0] sum_1_reg_180;
wire   [31:0] co_cast3_fu_202_p1;
wire   [31:0] tmp_199_cast_fu_353_p1;
wire   [31:0] tmp_205_cast_fu_447_p1;
wire   [31:0] tmp_206_cast_fu_457_p1;
reg   [31:0] grp_fu_192_p0;
reg   [31:0] grp_fu_192_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state8;
wire   [4:0] tmp_174_fu_211_p3;
wire   [5:0] co_cast3_cast_fu_207_p1;
wire   [5:0] p_shl2_cast1_fu_219_p1;
wire   [5:0] tmp_175_fu_227_p2;
wire   [7:0] tmp_176_fu_237_p3;
wire   [8:0] p_shl_cast_fu_245_p1;
wire   [8:0] p_shl2_cast_fu_223_p1;
wire   [8:0] tmp_177_fu_249_p2;
wire   [9:0] i_cast2_cast_fu_275_p1;
wire   [9:0] tmp_178_fu_279_p2;
wire   [8:0] tmp_172_fu_284_p1;
wire   [11:0] tmp_173_fu_296_p3;
wire   [13:0] p_shl3_cast_fu_288_p3;
wire  signed [13:0] p_shl4_cast_fu_304_p1;
wire   [5:0] i_cast_fu_314_p1;
wire   [5:0] tmp_fu_330_p2;
wire   [13:0] j_cast1_cast_fu_344_p1;
wire   [13:0] tmp_180_fu_348_p2;
wire   [5:0] j_cast_fu_358_p1;
wire   [5:0] tmp_s_fu_374_p2;
wire   [6:0] tmp_181_fu_384_p1;
wire   [31:0] tmp_182_fu_396_p2;
wire   [6:0] tmp_184_fu_405_p1;
wire   [8:0] tmp_183_fu_401_p1;
wire   [8:0] p_shl5_cast_fu_409_p3;
wire   [11:0] tmp_186_fu_434_p1;
wire   [11:0] tmp_188_fu_442_p2;
wire   [8:0] tmp_187_fu_438_p1;
wire   [8:0] tmp_189_fu_452_p2;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

lenet_wrapper_fadbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_wrapper_fadbkb_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_192_p0),
    .din1(grp_fu_192_p1),
    .ce(1'b1),
    .dout(grp_fu_192_p2)
);

lenet_wrapper_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_wrapper_fmucud_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv1_w_0_load_reg_600),
    .din1(input_0_load_reg_605),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_318_p2 == 1'd1))) begin
        co_reg_94 <= co_3_reg_498;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_94 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_362_p2))) begin
        i19_reg_127 <= i_cast2_reg_508;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_25_fu_462_p2))) begin
        i19_reg_127 <= i_20_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_362_p2 == 1'd1))) begin
        i_reg_105 <= h_reg_521;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_259_p2 == 1'd0))) begin
        i_reg_105 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_23_fu_423_p2))) begin
        j14_reg_160 <= j_cast1_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        j14_reg_160 <= j_15_reg_590;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_318_p2))) begin
        j_reg_116 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        j_reg_116 <= w_reg_544;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_362_p2))) begin
        m_reg_137 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_25_fu_462_p2))) begin
        m_reg_137 <= m_2_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_23_fu_423_p2))) begin
        n_reg_169 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        n_reg_169 <= n_2_reg_585;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_23_fu_423_p2))) begin
        sum_1_reg_180 <= sum_reg_148;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_1_reg_180 <= grp_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_362_p2))) begin
        sum_reg_148 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_25_fu_462_p2))) begin
        sum_reg_148 <= sum_1_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_3_reg_498 <= co_3_fu_265_p2;
        tmp_191_cast_reg_485[5 : 0] <= tmp_191_cast_fu_233_p1[5 : 0];
        tmp_194_cast_reg_490[9 : 2] <= tmp_194_cast_fu_255_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_259_p2 == 1'd0))) begin
        conv1_b_addr_reg_503 <= co_cast3_fu_202_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv1_b_load_reg_620 <= conv1_b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv1_w_0_load_reg_600 <= conv1_w_0_q0;
        input_0_load_reg_605 <= input_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_521 <= h_fu_324_p2;
        i_cast2_reg_508[4 : 0] <= i_cast2_fu_271_p1[4 : 0];
        tmp_179_reg_513[13 : 2] <= tmp_179_fu_308_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_25_fu_462_p2 == 1'd1))) begin
        j_15_reg_590 <= j_15_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_cast1_reg_531[4 : 0] <= j_cast1_fu_340_p1[4 : 0];
        output_addr_reg_536 <= tmp_199_cast_fu_353_p1;
        w_reg_544 <= w_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_2_reg_567 <= m_2_fu_428_p2;
        tmp_185_reg_559 <= tmp_185_fu_417_p2;
        tmp_201_cast_reg_554[11 : 5] <= tmp_201_cast_fu_388_p3[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_2_reg_585 <= n_2_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_24_reg_625 <= grp_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_26_reg_610 <= grp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_362_p2))) begin
        tmp_cast_85_reg_549[5 : 0] <= tmp_cast_85_fu_380_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_318_p2))) begin
        tmp_cast_reg_526[5 : 0] <= tmp_cast_fu_336_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_259_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_259_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv1_b_ce0 = 1'b1;
    end else begin
        conv1_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_w_0_ce0 = 1'b1;
    end else begin
        conv1_w_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_192_p0 = sum_reg_148;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_192_p0 = sum_1_reg_180;
    end else begin
        grp_fu_192_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_192_p1 = conv1_b_load_reg_620;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_192_p1 = tmp_26_reg_610;
    end else begin
        grp_fu_192_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_259_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_318_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_362_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_23_fu_423_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_25_fu_462_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign co_3_fu_265_p2 = (co_reg_94 + 3'd1);

assign co_cast3_cast_fu_207_p1 = co_reg_94;

assign co_cast3_fu_202_p1 = co_reg_94;

assign conv1_b_address0 = conv1_b_addr_reg_503;

assign conv1_w_0_address0 = tmp_206_cast_fu_457_p1;

assign exitcond1_fu_318_p2 = ((i_reg_105 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond2_fu_259_p2 = ((co_reg_94 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_362_p2 = ((j_reg_116 == 5'd28) ? 1'b1 : 1'b0);

assign h_fu_324_p2 = (5'd1 + i_reg_105);

assign i_20_fu_479_p2 = (i19_reg_127 + 32'd1);

assign i_cast2_cast_fu_275_p1 = i_reg_105;

assign i_cast2_fu_271_p1 = i_reg_105;

assign i_cast_fu_314_p1 = i_reg_105;

assign input_0_address0 = tmp_205_cast_fu_447_p1;

assign j_15_fu_473_p2 = (j14_reg_160 + 32'd1);

assign j_cast1_cast_fu_344_p1 = j_reg_116;

assign j_cast1_fu_340_p1 = j_reg_116;

assign j_cast_fu_358_p1 = j_reg_116;

assign m_2_fu_428_p2 = (32'd1 + m_reg_137);

assign n_2_fu_467_p2 = (32'd1 + n_reg_169);

assign output_r_address0 = output_addr_reg_536;

assign output_r_d0 = tmp_24_reg_625;

assign p_shl2_cast1_fu_219_p1 = tmp_174_fu_211_p3;

assign p_shl2_cast_fu_223_p1 = tmp_174_fu_211_p3;

assign p_shl3_cast_fu_288_p3 = {{tmp_172_fu_284_p1}, {5'd0}};

assign p_shl4_cast_fu_304_p1 = $signed(tmp_173_fu_296_p3);

assign p_shl5_cast_fu_409_p3 = {{tmp_184_fu_405_p1}, {2'd0}};

assign p_shl_cast_fu_245_p1 = tmp_176_fu_237_p3;

assign tmp_172_fu_284_p1 = tmp_178_fu_279_p2[8:0];

assign tmp_173_fu_296_p3 = {{tmp_178_fu_279_p2}, {2'd0}};

assign tmp_174_fu_211_p3 = {{co_reg_94}, {2'd0}};

assign tmp_175_fu_227_p2 = (co_cast3_cast_fu_207_p1 + p_shl2_cast1_fu_219_p1);

assign tmp_176_fu_237_p3 = {{co_reg_94}, {5'd0}};

assign tmp_177_fu_249_p2 = (p_shl_cast_fu_245_p1 - p_shl2_cast_fu_223_p1);

assign tmp_178_fu_279_p2 = ($signed(tmp_194_cast_reg_490) + $signed(i_cast2_cast_fu_275_p1));

assign tmp_179_fu_308_p2 = ($signed(p_shl3_cast_fu_288_p3) - $signed(p_shl4_cast_fu_304_p1));

assign tmp_180_fu_348_p2 = (tmp_179_reg_513 + j_cast1_cast_fu_344_p1);

assign tmp_181_fu_384_p1 = i19_reg_127[6:0];

assign tmp_182_fu_396_p2 = (tmp_191_cast_reg_485 + m_reg_137);

assign tmp_183_fu_401_p1 = tmp_182_fu_396_p2[8:0];

assign tmp_184_fu_405_p1 = tmp_182_fu_396_p2[6:0];

assign tmp_185_fu_417_p2 = (tmp_183_fu_401_p1 + p_shl5_cast_fu_409_p3);

assign tmp_186_fu_434_p1 = j14_reg_160[11:0];

assign tmp_187_fu_438_p1 = n_reg_169[8:0];

assign tmp_188_fu_442_p2 = (tmp_186_fu_434_p1 + tmp_201_cast_reg_554);

assign tmp_189_fu_452_p2 = (tmp_187_fu_438_p1 + tmp_185_reg_559);

assign tmp_191_cast_fu_233_p1 = tmp_175_fu_227_p2;

assign tmp_194_cast_fu_255_p1 = $signed(tmp_177_fu_249_p2);

assign tmp_199_cast_fu_353_p1 = tmp_180_fu_348_p2;

assign tmp_201_cast_fu_388_p3 = {{tmp_181_fu_384_p1}, {5'd0}};

assign tmp_205_cast_fu_447_p1 = tmp_188_fu_442_p2;

assign tmp_206_cast_fu_457_p1 = tmp_189_fu_452_p2;

assign tmp_23_fu_423_p2 = (($signed(i19_reg_127) < $signed(tmp_cast_reg_526)) ? 1'b1 : 1'b0);

assign tmp_25_fu_462_p2 = (($signed(j14_reg_160) < $signed(tmp_cast_85_reg_549)) ? 1'b1 : 1'b0);

assign tmp_cast_85_fu_380_p1 = tmp_s_fu_374_p2;

assign tmp_cast_fu_336_p1 = tmp_fu_330_p2;

assign tmp_fu_330_p2 = (i_cast_fu_314_p1 + 6'd5);

assign tmp_s_fu_374_p2 = (j_cast_fu_358_p1 + 6'd5);

assign w_fu_368_p2 = (j_reg_116 + 5'd1);

always @ (posedge ap_clk) begin
    tmp_191_cast_reg_485[31:6] <= 26'b00000000000000000000000000;
    tmp_194_cast_reg_490[1:0] <= 2'b00;
    i_cast2_reg_508[31:5] <= 27'b000000000000000000000000000;
    tmp_179_reg_513[1:0] <= 2'b00;
    tmp_cast_reg_526[31:6] <= 26'b00000000000000000000000000;
    j_cast1_reg_531[31:5] <= 27'b000000000000000000000000000;
    tmp_cast_85_reg_549[31:6] <= 26'b00000000000000000000000000;
    tmp_201_cast_reg_554[4:0] <= 5'b00000;
end

endmodule //convolution1
