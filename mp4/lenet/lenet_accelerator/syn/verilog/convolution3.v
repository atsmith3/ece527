// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv3_w_address0,
        conv3_w_ce0,
        conv3_w_q0,
        conv3_b_address0,
        conv3_b_ce0,
        conv3_b_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        p2_o_2_address0,
        p2_o_2_ce0,
        p2_o_2_q0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv3_w_address0;
output   conv3_w_ce0;
input  [31:0] conv3_w_q0;
output  [3:0] conv3_b_address0;
output   conv3_b_ce0;
input  [31:0] conv3_b_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [10:0] p2_o_2_address0;
output   p2_o_2_ce0;
input  [31:0] p2_o_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv3_w_ce0;
reg conv3_b_ce0;
reg output_r_ce0;
reg output_r_we0;
reg p2_o_2_ce0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [9:0] tmp_166_cast_fu_280_p1;
reg  signed [9:0] tmp_166_cast_reg_602;
wire    ap_CS_fsm_state2;
wire   [8:0] tmp_158_fu_284_p2;
reg   [8:0] tmp_158_reg_607;
wire   [4:0] co_2_fu_296_p2;
reg   [4:0] co_2_reg_615;
reg   [3:0] conv3_b_addr_reg_620;
wire   [0:0] exitcond3_fu_290_p2;
wire   [31:0] i_cast3_fu_302_p1;
reg   [31:0] i_cast3_reg_625;
wire    ap_CS_fsm_state3;
wire   [11:0] tmp_160_fu_335_p2;
reg   [11:0] tmp_160_reg_630;
wire   [3:0] h_fu_347_p2;
reg   [3:0] h_reg_638;
wire   [31:0] tmp_cast_fu_359_p1;
reg   [31:0] tmp_cast_reg_643;
wire   [0:0] exitcond2_fu_341_p2;
wire   [31:0] j_cast2_fu_363_p1;
reg   [31:0] j_cast2_reg_648;
wire    ap_CS_fsm_state4;
reg   [10:0] output_addr_reg_653;
wire   [3:0] w_fu_387_p2;
reg   [3:0] w_reg_661;
wire   [31:0] tmp_cast_81_fu_399_p1;
reg   [31:0] tmp_cast_81_reg_666;
wire   [0:0] exitcond1_fu_381_p2;
wire   [31:0] m_1_fu_408_p2;
reg   [31:0] m_1_reg_674;
wire    ap_CS_fsm_state5;
wire   [11:0] tmp_149_fu_414_p1;
reg   [11:0] tmp_149_reg_679;
wire    ap_CS_fsm_state6;
wire   [12:0] tmp_150_fu_418_p1;
reg   [12:0] tmp_150_reg_684;
wire   [31:0] n_1_fu_427_p2;
reg   [31:0] n_1_reg_692;
wire   [31:0] i_18_fu_433_p2;
wire   [0:0] tmp_21_fu_422_p2;
wire   [12:0] tmp_152_fu_476_p1;
reg   [12:0] tmp_152_reg_702;
wire    ap_CS_fsm_state7;
wire   [10:0] tmp_153_fu_480_p1;
reg   [10:0] tmp_153_reg_707;
wire   [7:0] tmp_154_fu_524_p1;
reg   [7:0] tmp_154_reg_712;
wire   [10:0] tmp_171_fu_528_p1;
reg   [10:0] tmp_171_reg_717;
wire   [0:0] exitcond_fu_532_p2;
reg   [0:0] exitcond_reg_722;
wire   [2:0] ci_2_fu_538_p2;
reg   [2:0] ci_2_reg_726;
wire    ap_CS_fsm_state8;
wire   [31:0] j_13_fu_596_p2;
reg   [31:0] conv3_w_load_reg_746;
wire    ap_CS_fsm_state9;
reg   [31:0] p2_o_2_load_reg_751;
wire   [31:0] grp_fu_241_p2;
reg   [31:0] tmp_22_reg_756;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_235_p2;
wire    ap_CS_fsm_state18;
reg   [31:0] conv3_b_load_reg_766;
wire    ap_CS_fsm_state19;
reg   [31:0] tmp_20_reg_771;
wire    ap_CS_fsm_state24;
reg   [4:0] co_reg_112;
reg   [3:0] i_reg_123;
reg   [3:0] j_reg_134;
wire    ap_CS_fsm_state25;
reg   [31:0] i17_reg_145;
reg   [31:0] m_reg_155;
reg   [31:0] sum_reg_167;
reg   [31:0] j12_reg_179;
wire   [0:0] tmp_19_fu_403_p2;
reg   [31:0] n_reg_189;
reg   [31:0] sum_1_reg_200;
reg   [2:0] ci_reg_212;
reg   [31:0] sum_2_reg_223;
wire   [31:0] co_cast4_fu_245_p1;
wire   [31:0] tmp_174_cast_fu_376_p1;
wire   [31:0] tmp_181_cast_fu_561_p1;
wire   [31:0] tmp_189_cast_fu_591_p1;
reg   [31:0] grp_fu_235_p0;
reg   [31:0] grp_fu_235_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_155_fu_250_p3;
wire   [5:0] tmp_156_fu_262_p3;
wire   [8:0] p_shl2_cast_fu_258_p1;
wire   [8:0] p_shl3_cast_fu_270_p1;
wire   [8:0] tmp_157_fu_274_p2;
wire   [8:0] i_cast3_cast_fu_306_p1;
wire   [8:0] tmp_159_fu_310_p2;
wire   [9:0] tmp_148_fu_323_p3;
wire   [11:0] p_shl4_cast_fu_315_p3;
wire   [11:0] p_shl5_cast_fu_331_p1;
wire   [3:0] tmp_fu_353_p2;
wire   [11:0] j_cast2_cast_fu_367_p1;
wire   [11:0] tmp_161_fu_371_p2;
wire   [3:0] tmp_s_fu_393_p2;
wire   [9:0] ci_cast1_cast_fu_439_p1;
wire   [9:0] tmp_162_fu_443_p2;
wire   [11:0] tmp_151_fu_452_p3;
wire  signed [31:0] p_shl_fu_460_p1;
wire  signed [31:0] tmp_175_cast_fu_448_p1;
wire   [31:0] tmp_163_fu_464_p2;
wire   [31:0] tmp_164_fu_470_p2;
wire   [6:0] tmp_167_fu_484_p3;
wire   [3:0] tmp_168_fu_496_p3;
wire   [7:0] p_shl8_cast_fu_492_p1;
wire   [7:0] p_shl9_cast_fu_504_p1;
wire   [7:0] tmp_169_fu_508_p2;
wire  signed [31:0] tmp_184_cast_fu_514_p1;
wire   [31:0] tmp_170_fu_518_p2;
wire   [12:0] p_shl10_cast_fu_544_p3;
wire   [12:0] tmp_165_fu_551_p2;
wire   [12:0] tmp_166_fu_556_p2;
wire   [11:0] p_shl6_cast_fu_566_p3;
wire   [11:0] p_shl7_cast_fu_573_p3;
wire   [11:0] tmp_172_fu_580_p2;
wire   [11:0] tmp_173_fu_586_p2;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

lenet_wrapper_fadbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_wrapper_fadbkb_x_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_235_p0),
    .din1(grp_fu_235_p1),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

lenet_wrapper_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_wrapper_fmucud_x_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv3_w_load_reg_746),
    .din1(p2_o_2_load_reg_751),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_fu_422_p2 == 1'd1))) begin
        ci_reg_212 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        ci_reg_212 <= ci_2_reg_726;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_341_p2 == 1'd1))) begin
        co_reg_112 <= co_2_reg_615;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_112 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_381_p2))) begin
        i17_reg_145 <= i_cast3_reg_625;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_21_fu_422_p2))) begin
        i17_reg_145 <= i_18_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_381_p2 == 1'd1))) begin
        i_reg_123 <= h_reg_638;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_290_p2 == 1'd0))) begin
        i_reg_123 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_19_fu_403_p2))) begin
        j12_reg_179 <= j_cast2_reg_648;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond_reg_722 == 1'd1))) begin
        j12_reg_179 <= j_13_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_341_p2))) begin
        j_reg_134 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        j_reg_134 <= w_reg_661;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_381_p2))) begin
        m_reg_155 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_21_fu_422_p2))) begin
        m_reg_155 <= m_1_reg_674;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_19_fu_403_p2))) begin
        n_reg_189 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond_reg_722 == 1'd1))) begin
        n_reg_189 <= n_1_reg_692;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_19_fu_403_p2))) begin
        sum_1_reg_200 <= sum_reg_167;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond_reg_722 == 1'd1))) begin
        sum_1_reg_200 <= sum_2_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_fu_422_p2 == 1'd1))) begin
        sum_2_reg_223 <= sum_1_reg_200;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sum_2_reg_223 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_381_p2))) begin
        sum_reg_167 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_21_fu_422_p2))) begin
        sum_reg_167 <= sum_1_reg_200;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ci_2_reg_726 <= ci_2_fu_538_p2;
        exitcond_reg_722 <= exitcond_fu_532_p2;
        tmp_152_reg_702 <= tmp_152_fu_476_p1;
        tmp_153_reg_707 <= tmp_153_fu_480_p1;
        tmp_154_reg_712 <= tmp_154_fu_524_p1;
        tmp_171_reg_717 <= tmp_171_fu_528_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_2_reg_615 <= co_2_fu_296_p2;
        tmp_158_reg_607[8 : 1] <= tmp_158_fu_284_p2[8 : 1];
        tmp_166_cast_reg_602[9 : 1] <= tmp_166_cast_fu_280_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_290_p2 == 1'd0))) begin
        conv3_b_addr_reg_620 <= co_cast4_fu_245_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv3_b_load_reg_766 <= conv3_b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv3_w_load_reg_746 <= conv3_w_q0;
        p2_o_2_load_reg_751 <= p2_o_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_638 <= h_fu_347_p2;
        i_cast3_reg_625[3 : 0] <= i_cast3_fu_302_p1[3 : 0];
        tmp_160_reg_630[11 : 1] <= tmp_160_fu_335_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_cast2_reg_648[3 : 0] <= j_cast2_fu_363_p1[3 : 0];
        output_addr_reg_653 <= tmp_174_cast_fu_376_p1;
        w_reg_661 <= w_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_674 <= m_1_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_692 <= n_1_fu_427_p2;
        tmp_149_reg_679 <= tmp_149_fu_414_p1;
        tmp_150_reg_684 <= tmp_150_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_20_reg_771 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_22_reg_756 <= grp_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_381_p2))) begin
        tmp_cast_81_reg_666[3 : 0] <= tmp_cast_81_fu_399_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_341_p2))) begin
        tmp_cast_reg_643[3 : 0] <= tmp_cast_fu_359_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_290_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_290_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv3_b_ce0 = 1'b1;
    end else begin
        conv3_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv3_w_ce0 = 1'b1;
    end else begin
        conv3_w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_235_p0 = sum_reg_167;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_235_p0 = sum_2_reg_223;
    end else begin
        grp_fu_235_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_235_p1 = conv3_b_load_reg_766;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_235_p1 = tmp_22_reg_756;
    end else begin
        grp_fu_235_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p2_o_2_ce0 = 1'b1;
    end else begin
        p2_o_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_290_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_341_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_381_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_19_fu_403_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_21_fu_422_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_reg_722 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ci_2_fu_538_p2 = (3'd1 + ci_reg_212);

assign ci_cast1_cast_fu_439_p1 = ci_reg_212;

assign co_2_fu_296_p2 = (co_reg_112 + 5'd1);

assign co_cast4_fu_245_p1 = co_reg_112;

assign conv3_b_address0 = conv3_b_addr_reg_620;

assign conv3_w_address0 = tmp_181_cast_fu_561_p1;

assign exitcond1_fu_381_p2 = ((j_reg_134 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond2_fu_341_p2 = ((i_reg_123 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_290_p2 = ((co_reg_112 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_532_p2 = ((ci_reg_212 == 3'd6) ? 1'b1 : 1'b0);

assign h_fu_347_p2 = (i_reg_123 + 4'd1);

assign i_18_fu_433_p2 = (i17_reg_145 + 32'd1);

assign i_cast3_cast_fu_306_p1 = i_reg_123;

assign i_cast3_fu_302_p1 = i_reg_123;

assign j_13_fu_596_p2 = (j12_reg_179 + 32'd1);

assign j_cast2_cast_fu_367_p1 = j_reg_134;

assign j_cast2_fu_363_p1 = j_reg_134;

assign m_1_fu_408_p2 = (m_reg_155 + 32'd1);

assign n_1_fu_427_p2 = (32'd1 + n_reg_189);

assign output_r_address0 = output_addr_reg_653;

assign output_r_d0 = tmp_20_reg_771;

assign p2_o_2_address0 = tmp_189_cast_fu_591_p1;

assign p_shl10_cast_fu_544_p3 = {{tmp_153_reg_707}, {2'd0}};

assign p_shl2_cast_fu_258_p1 = tmp_155_fu_250_p3;

assign p_shl3_cast_fu_270_p1 = tmp_156_fu_262_p3;

assign p_shl4_cast_fu_315_p3 = {{tmp_159_fu_310_p2}, {3'd0}};

assign p_shl5_cast_fu_331_p1 = tmp_148_fu_323_p3;

assign p_shl6_cast_fu_566_p3 = {{tmp_154_reg_712}, {4'd0}};

assign p_shl7_cast_fu_573_p3 = {{tmp_171_reg_717}, {1'd0}};

assign p_shl8_cast_fu_492_p1 = tmp_167_fu_484_p3;

assign p_shl9_cast_fu_504_p1 = tmp_168_fu_496_p3;

assign p_shl_fu_460_p1 = $signed(tmp_151_fu_452_p3);

assign tmp_148_fu_323_p3 = {{tmp_159_fu_310_p2}, {1'd0}};

assign tmp_149_fu_414_p1 = j12_reg_179[11:0];

assign tmp_150_fu_418_p1 = n_reg_189[12:0];

assign tmp_151_fu_452_p3 = {{tmp_162_fu_443_p2}, {2'd0}};

assign tmp_152_fu_476_p1 = tmp_164_fu_470_p2[12:0];

assign tmp_153_fu_480_p1 = tmp_164_fu_470_p2[10:0];

assign tmp_154_fu_524_p1 = tmp_170_fu_518_p2[7:0];

assign tmp_155_fu_250_p3 = {{co_reg_112}, {3'd0}};

assign tmp_156_fu_262_p3 = {{co_reg_112}, {1'd0}};

assign tmp_157_fu_274_p2 = (p_shl2_cast_fu_258_p1 - p_shl3_cast_fu_270_p1);

assign tmp_158_fu_284_p2 = (p_shl3_cast_fu_270_p1 + p_shl2_cast_fu_258_p1);

assign tmp_159_fu_310_p2 = (i_cast3_cast_fu_306_p1 + tmp_158_reg_607);

assign tmp_160_fu_335_p2 = (p_shl4_cast_fu_315_p3 + p_shl5_cast_fu_331_p1);

assign tmp_161_fu_371_p2 = (tmp_160_reg_630 + j_cast2_cast_fu_367_p1);

assign tmp_162_fu_443_p2 = ($signed(ci_cast1_cast_fu_439_p1) + $signed(tmp_166_cast_reg_602));

assign tmp_163_fu_464_p2 = ($signed(p_shl_fu_460_p1) + $signed(tmp_175_cast_fu_448_p1));

assign tmp_164_fu_470_p2 = (m_reg_155 + tmp_163_fu_464_p2);

assign tmp_165_fu_551_p2 = (p_shl10_cast_fu_544_p3 + tmp_152_reg_702);

assign tmp_166_cast_fu_280_p1 = $signed(tmp_157_fu_274_p2);

assign tmp_166_fu_556_p2 = (tmp_150_reg_684 + tmp_165_fu_551_p2);

assign tmp_167_fu_484_p3 = {{ci_reg_212}, {4'd0}};

assign tmp_168_fu_496_p3 = {{ci_reg_212}, {1'd0}};

assign tmp_169_fu_508_p2 = (p_shl8_cast_fu_492_p1 - p_shl9_cast_fu_504_p1);

assign tmp_170_fu_518_p2 = ($signed(i17_reg_145) + $signed(tmp_184_cast_fu_514_p1));

assign tmp_171_fu_528_p1 = tmp_170_fu_518_p2[10:0];

assign tmp_172_fu_580_p2 = (p_shl6_cast_fu_566_p3 - p_shl7_cast_fu_573_p3);

assign tmp_173_fu_586_p2 = (tmp_149_reg_679 + tmp_172_fu_580_p2);

assign tmp_174_cast_fu_376_p1 = tmp_161_fu_371_p2;

assign tmp_175_cast_fu_448_p1 = $signed(tmp_162_fu_443_p2);

assign tmp_181_cast_fu_561_p1 = tmp_166_fu_556_p2;

assign tmp_184_cast_fu_514_p1 = $signed(tmp_169_fu_508_p2);

assign tmp_189_cast_fu_591_p1 = tmp_173_fu_586_p2;

assign tmp_19_fu_403_p2 = (($signed(i17_reg_145) < $signed(tmp_cast_reg_643)) ? 1'b1 : 1'b0);

assign tmp_21_fu_422_p2 = (($signed(j12_reg_179) < $signed(tmp_cast_81_reg_666)) ? 1'b1 : 1'b0);

assign tmp_cast_81_fu_399_p1 = tmp_s_fu_393_p2;

assign tmp_cast_fu_359_p1 = tmp_fu_353_p2;

assign tmp_fu_353_p2 = (i_reg_123 + 4'd5);

assign tmp_s_fu_393_p2 = (j_reg_134 + 4'd5);

assign w_fu_387_p2 = (j_reg_134 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_166_cast_reg_602[0] <= 1'b0;
    tmp_158_reg_607[0] <= 1'b0;
    i_cast3_reg_625[31:4] <= 28'b0000000000000000000000000000;
    tmp_160_reg_630[0] <= 1'b0;
    tmp_cast_reg_643[31:4] <= 28'b0000000000000000000000000000;
    j_cast2_reg_648[31:4] <= 28'b0000000000000000000000000000;
    tmp_cast_81_reg_666[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //convolution3
