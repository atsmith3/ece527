// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lenet_wrapper,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=216,HLS_SYN_DSP=20,HLS_SYN_FF=19609,HLS_SYN_LUT=17918}" *)

module lenet_wrapper (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_DATA_IMAGE_IN_I_AWVALID,
        m_axi_DATA_IMAGE_IN_I_AWREADY,
        m_axi_DATA_IMAGE_IN_I_AWADDR,
        m_axi_DATA_IMAGE_IN_I_AWID,
        m_axi_DATA_IMAGE_IN_I_AWLEN,
        m_axi_DATA_IMAGE_IN_I_AWSIZE,
        m_axi_DATA_IMAGE_IN_I_AWBURST,
        m_axi_DATA_IMAGE_IN_I_AWLOCK,
        m_axi_DATA_IMAGE_IN_I_AWCACHE,
        m_axi_DATA_IMAGE_IN_I_AWPROT,
        m_axi_DATA_IMAGE_IN_I_AWQOS,
        m_axi_DATA_IMAGE_IN_I_AWREGION,
        m_axi_DATA_IMAGE_IN_I_AWUSER,
        m_axi_DATA_IMAGE_IN_I_WVALID,
        m_axi_DATA_IMAGE_IN_I_WREADY,
        m_axi_DATA_IMAGE_IN_I_WDATA,
        m_axi_DATA_IMAGE_IN_I_WSTRB,
        m_axi_DATA_IMAGE_IN_I_WLAST,
        m_axi_DATA_IMAGE_IN_I_WID,
        m_axi_DATA_IMAGE_IN_I_WUSER,
        m_axi_DATA_IMAGE_IN_I_ARVALID,
        m_axi_DATA_IMAGE_IN_I_ARREADY,
        m_axi_DATA_IMAGE_IN_I_ARADDR,
        m_axi_DATA_IMAGE_IN_I_ARID,
        m_axi_DATA_IMAGE_IN_I_ARLEN,
        m_axi_DATA_IMAGE_IN_I_ARSIZE,
        m_axi_DATA_IMAGE_IN_I_ARBURST,
        m_axi_DATA_IMAGE_IN_I_ARLOCK,
        m_axi_DATA_IMAGE_IN_I_ARCACHE,
        m_axi_DATA_IMAGE_IN_I_ARPROT,
        m_axi_DATA_IMAGE_IN_I_ARQOS,
        m_axi_DATA_IMAGE_IN_I_ARREGION,
        m_axi_DATA_IMAGE_IN_I_ARUSER,
        m_axi_DATA_IMAGE_IN_I_RVALID,
        m_axi_DATA_IMAGE_IN_I_RREADY,
        m_axi_DATA_IMAGE_IN_I_RDATA,
        m_axi_DATA_IMAGE_IN_I_RLAST,
        m_axi_DATA_IMAGE_IN_I_RID,
        m_axi_DATA_IMAGE_IN_I_RUSER,
        m_axi_DATA_IMAGE_IN_I_RRESP,
        m_axi_DATA_IMAGE_IN_I_BVALID,
        m_axi_DATA_IMAGE_IN_I_BREADY,
        m_axi_DATA_IMAGE_IN_I_BRESP,
        m_axi_DATA_IMAGE_IN_I_BID,
        m_axi_DATA_IMAGE_IN_I_BUSER,
        m_axi_DATA_C1_W_I_AWVALID,
        m_axi_DATA_C1_W_I_AWREADY,
        m_axi_DATA_C1_W_I_AWADDR,
        m_axi_DATA_C1_W_I_AWID,
        m_axi_DATA_C1_W_I_AWLEN,
        m_axi_DATA_C1_W_I_AWSIZE,
        m_axi_DATA_C1_W_I_AWBURST,
        m_axi_DATA_C1_W_I_AWLOCK,
        m_axi_DATA_C1_W_I_AWCACHE,
        m_axi_DATA_C1_W_I_AWPROT,
        m_axi_DATA_C1_W_I_AWQOS,
        m_axi_DATA_C1_W_I_AWREGION,
        m_axi_DATA_C1_W_I_AWUSER,
        m_axi_DATA_C1_W_I_WVALID,
        m_axi_DATA_C1_W_I_WREADY,
        m_axi_DATA_C1_W_I_WDATA,
        m_axi_DATA_C1_W_I_WSTRB,
        m_axi_DATA_C1_W_I_WLAST,
        m_axi_DATA_C1_W_I_WID,
        m_axi_DATA_C1_W_I_WUSER,
        m_axi_DATA_C1_W_I_ARVALID,
        m_axi_DATA_C1_W_I_ARREADY,
        m_axi_DATA_C1_W_I_ARADDR,
        m_axi_DATA_C1_W_I_ARID,
        m_axi_DATA_C1_W_I_ARLEN,
        m_axi_DATA_C1_W_I_ARSIZE,
        m_axi_DATA_C1_W_I_ARBURST,
        m_axi_DATA_C1_W_I_ARLOCK,
        m_axi_DATA_C1_W_I_ARCACHE,
        m_axi_DATA_C1_W_I_ARPROT,
        m_axi_DATA_C1_W_I_ARQOS,
        m_axi_DATA_C1_W_I_ARREGION,
        m_axi_DATA_C1_W_I_ARUSER,
        m_axi_DATA_C1_W_I_RVALID,
        m_axi_DATA_C1_W_I_RREADY,
        m_axi_DATA_C1_W_I_RDATA,
        m_axi_DATA_C1_W_I_RLAST,
        m_axi_DATA_C1_W_I_RID,
        m_axi_DATA_C1_W_I_RUSER,
        m_axi_DATA_C1_W_I_RRESP,
        m_axi_DATA_C1_W_I_BVALID,
        m_axi_DATA_C1_W_I_BREADY,
        m_axi_DATA_C1_W_I_BRESP,
        m_axi_DATA_C1_W_I_BID,
        m_axi_DATA_C1_W_I_BUSER,
        m_axi_DATA_C1_B_I_AWVALID,
        m_axi_DATA_C1_B_I_AWREADY,
        m_axi_DATA_C1_B_I_AWADDR,
        m_axi_DATA_C1_B_I_AWID,
        m_axi_DATA_C1_B_I_AWLEN,
        m_axi_DATA_C1_B_I_AWSIZE,
        m_axi_DATA_C1_B_I_AWBURST,
        m_axi_DATA_C1_B_I_AWLOCK,
        m_axi_DATA_C1_B_I_AWCACHE,
        m_axi_DATA_C1_B_I_AWPROT,
        m_axi_DATA_C1_B_I_AWQOS,
        m_axi_DATA_C1_B_I_AWREGION,
        m_axi_DATA_C1_B_I_AWUSER,
        m_axi_DATA_C1_B_I_WVALID,
        m_axi_DATA_C1_B_I_WREADY,
        m_axi_DATA_C1_B_I_WDATA,
        m_axi_DATA_C1_B_I_WSTRB,
        m_axi_DATA_C1_B_I_WLAST,
        m_axi_DATA_C1_B_I_WID,
        m_axi_DATA_C1_B_I_WUSER,
        m_axi_DATA_C1_B_I_ARVALID,
        m_axi_DATA_C1_B_I_ARREADY,
        m_axi_DATA_C1_B_I_ARADDR,
        m_axi_DATA_C1_B_I_ARID,
        m_axi_DATA_C1_B_I_ARLEN,
        m_axi_DATA_C1_B_I_ARSIZE,
        m_axi_DATA_C1_B_I_ARBURST,
        m_axi_DATA_C1_B_I_ARLOCK,
        m_axi_DATA_C1_B_I_ARCACHE,
        m_axi_DATA_C1_B_I_ARPROT,
        m_axi_DATA_C1_B_I_ARQOS,
        m_axi_DATA_C1_B_I_ARREGION,
        m_axi_DATA_C1_B_I_ARUSER,
        m_axi_DATA_C1_B_I_RVALID,
        m_axi_DATA_C1_B_I_RREADY,
        m_axi_DATA_C1_B_I_RDATA,
        m_axi_DATA_C1_B_I_RLAST,
        m_axi_DATA_C1_B_I_RID,
        m_axi_DATA_C1_B_I_RUSER,
        m_axi_DATA_C1_B_I_RRESP,
        m_axi_DATA_C1_B_I_BVALID,
        m_axi_DATA_C1_B_I_BREADY,
        m_axi_DATA_C1_B_I_BRESP,
        m_axi_DATA_C1_B_I_BID,
        m_axi_DATA_C1_B_I_BUSER,
        m_axi_DATA_C3_W_I_AWVALID,
        m_axi_DATA_C3_W_I_AWREADY,
        m_axi_DATA_C3_W_I_AWADDR,
        m_axi_DATA_C3_W_I_AWID,
        m_axi_DATA_C3_W_I_AWLEN,
        m_axi_DATA_C3_W_I_AWSIZE,
        m_axi_DATA_C3_W_I_AWBURST,
        m_axi_DATA_C3_W_I_AWLOCK,
        m_axi_DATA_C3_W_I_AWCACHE,
        m_axi_DATA_C3_W_I_AWPROT,
        m_axi_DATA_C3_W_I_AWQOS,
        m_axi_DATA_C3_W_I_AWREGION,
        m_axi_DATA_C3_W_I_AWUSER,
        m_axi_DATA_C3_W_I_WVALID,
        m_axi_DATA_C3_W_I_WREADY,
        m_axi_DATA_C3_W_I_WDATA,
        m_axi_DATA_C3_W_I_WSTRB,
        m_axi_DATA_C3_W_I_WLAST,
        m_axi_DATA_C3_W_I_WID,
        m_axi_DATA_C3_W_I_WUSER,
        m_axi_DATA_C3_W_I_ARVALID,
        m_axi_DATA_C3_W_I_ARREADY,
        m_axi_DATA_C3_W_I_ARADDR,
        m_axi_DATA_C3_W_I_ARID,
        m_axi_DATA_C3_W_I_ARLEN,
        m_axi_DATA_C3_W_I_ARSIZE,
        m_axi_DATA_C3_W_I_ARBURST,
        m_axi_DATA_C3_W_I_ARLOCK,
        m_axi_DATA_C3_W_I_ARCACHE,
        m_axi_DATA_C3_W_I_ARPROT,
        m_axi_DATA_C3_W_I_ARQOS,
        m_axi_DATA_C3_W_I_ARREGION,
        m_axi_DATA_C3_W_I_ARUSER,
        m_axi_DATA_C3_W_I_RVALID,
        m_axi_DATA_C3_W_I_RREADY,
        m_axi_DATA_C3_W_I_RDATA,
        m_axi_DATA_C3_W_I_RLAST,
        m_axi_DATA_C3_W_I_RID,
        m_axi_DATA_C3_W_I_RUSER,
        m_axi_DATA_C3_W_I_RRESP,
        m_axi_DATA_C3_W_I_BVALID,
        m_axi_DATA_C3_W_I_BREADY,
        m_axi_DATA_C3_W_I_BRESP,
        m_axi_DATA_C3_W_I_BID,
        m_axi_DATA_C3_W_I_BUSER,
        m_axi_DATA_C3_B_I_AWVALID,
        m_axi_DATA_C3_B_I_AWREADY,
        m_axi_DATA_C3_B_I_AWADDR,
        m_axi_DATA_C3_B_I_AWID,
        m_axi_DATA_C3_B_I_AWLEN,
        m_axi_DATA_C3_B_I_AWSIZE,
        m_axi_DATA_C3_B_I_AWBURST,
        m_axi_DATA_C3_B_I_AWLOCK,
        m_axi_DATA_C3_B_I_AWCACHE,
        m_axi_DATA_C3_B_I_AWPROT,
        m_axi_DATA_C3_B_I_AWQOS,
        m_axi_DATA_C3_B_I_AWREGION,
        m_axi_DATA_C3_B_I_AWUSER,
        m_axi_DATA_C3_B_I_WVALID,
        m_axi_DATA_C3_B_I_WREADY,
        m_axi_DATA_C3_B_I_WDATA,
        m_axi_DATA_C3_B_I_WSTRB,
        m_axi_DATA_C3_B_I_WLAST,
        m_axi_DATA_C3_B_I_WID,
        m_axi_DATA_C3_B_I_WUSER,
        m_axi_DATA_C3_B_I_ARVALID,
        m_axi_DATA_C3_B_I_ARREADY,
        m_axi_DATA_C3_B_I_ARADDR,
        m_axi_DATA_C3_B_I_ARID,
        m_axi_DATA_C3_B_I_ARLEN,
        m_axi_DATA_C3_B_I_ARSIZE,
        m_axi_DATA_C3_B_I_ARBURST,
        m_axi_DATA_C3_B_I_ARLOCK,
        m_axi_DATA_C3_B_I_ARCACHE,
        m_axi_DATA_C3_B_I_ARPROT,
        m_axi_DATA_C3_B_I_ARQOS,
        m_axi_DATA_C3_B_I_ARREGION,
        m_axi_DATA_C3_B_I_ARUSER,
        m_axi_DATA_C3_B_I_RVALID,
        m_axi_DATA_C3_B_I_RREADY,
        m_axi_DATA_C3_B_I_RDATA,
        m_axi_DATA_C3_B_I_RLAST,
        m_axi_DATA_C3_B_I_RID,
        m_axi_DATA_C3_B_I_RUSER,
        m_axi_DATA_C3_B_I_RRESP,
        m_axi_DATA_C3_B_I_BVALID,
        m_axi_DATA_C3_B_I_BREADY,
        m_axi_DATA_C3_B_I_BRESP,
        m_axi_DATA_C3_B_I_BID,
        m_axi_DATA_C3_B_I_BUSER,
        m_axi_DATA_FC6_W_I_AWVALID,
        m_axi_DATA_FC6_W_I_AWREADY,
        m_axi_DATA_FC6_W_I_AWADDR,
        m_axi_DATA_FC6_W_I_AWID,
        m_axi_DATA_FC6_W_I_AWLEN,
        m_axi_DATA_FC6_W_I_AWSIZE,
        m_axi_DATA_FC6_W_I_AWBURST,
        m_axi_DATA_FC6_W_I_AWLOCK,
        m_axi_DATA_FC6_W_I_AWCACHE,
        m_axi_DATA_FC6_W_I_AWPROT,
        m_axi_DATA_FC6_W_I_AWQOS,
        m_axi_DATA_FC6_W_I_AWREGION,
        m_axi_DATA_FC6_W_I_AWUSER,
        m_axi_DATA_FC6_W_I_WVALID,
        m_axi_DATA_FC6_W_I_WREADY,
        m_axi_DATA_FC6_W_I_WDATA,
        m_axi_DATA_FC6_W_I_WSTRB,
        m_axi_DATA_FC6_W_I_WLAST,
        m_axi_DATA_FC6_W_I_WID,
        m_axi_DATA_FC6_W_I_WUSER,
        m_axi_DATA_FC6_W_I_ARVALID,
        m_axi_DATA_FC6_W_I_ARREADY,
        m_axi_DATA_FC6_W_I_ARADDR,
        m_axi_DATA_FC6_W_I_ARID,
        m_axi_DATA_FC6_W_I_ARLEN,
        m_axi_DATA_FC6_W_I_ARSIZE,
        m_axi_DATA_FC6_W_I_ARBURST,
        m_axi_DATA_FC6_W_I_ARLOCK,
        m_axi_DATA_FC6_W_I_ARCACHE,
        m_axi_DATA_FC6_W_I_ARPROT,
        m_axi_DATA_FC6_W_I_ARQOS,
        m_axi_DATA_FC6_W_I_ARREGION,
        m_axi_DATA_FC6_W_I_ARUSER,
        m_axi_DATA_FC6_W_I_RVALID,
        m_axi_DATA_FC6_W_I_RREADY,
        m_axi_DATA_FC6_W_I_RDATA,
        m_axi_DATA_FC6_W_I_RLAST,
        m_axi_DATA_FC6_W_I_RID,
        m_axi_DATA_FC6_W_I_RUSER,
        m_axi_DATA_FC6_W_I_RRESP,
        m_axi_DATA_FC6_W_I_BVALID,
        m_axi_DATA_FC6_W_I_BREADY,
        m_axi_DATA_FC6_W_I_BRESP,
        m_axi_DATA_FC6_W_I_BID,
        m_axi_DATA_FC6_W_I_BUSER,
        m_axi_DATA_FC6_B_I_AWVALID,
        m_axi_DATA_FC6_B_I_AWREADY,
        m_axi_DATA_FC6_B_I_AWADDR,
        m_axi_DATA_FC6_B_I_AWID,
        m_axi_DATA_FC6_B_I_AWLEN,
        m_axi_DATA_FC6_B_I_AWSIZE,
        m_axi_DATA_FC6_B_I_AWBURST,
        m_axi_DATA_FC6_B_I_AWLOCK,
        m_axi_DATA_FC6_B_I_AWCACHE,
        m_axi_DATA_FC6_B_I_AWPROT,
        m_axi_DATA_FC6_B_I_AWQOS,
        m_axi_DATA_FC6_B_I_AWREGION,
        m_axi_DATA_FC6_B_I_AWUSER,
        m_axi_DATA_FC6_B_I_WVALID,
        m_axi_DATA_FC6_B_I_WREADY,
        m_axi_DATA_FC6_B_I_WDATA,
        m_axi_DATA_FC6_B_I_WSTRB,
        m_axi_DATA_FC6_B_I_WLAST,
        m_axi_DATA_FC6_B_I_WID,
        m_axi_DATA_FC6_B_I_WUSER,
        m_axi_DATA_FC6_B_I_ARVALID,
        m_axi_DATA_FC6_B_I_ARREADY,
        m_axi_DATA_FC6_B_I_ARADDR,
        m_axi_DATA_FC6_B_I_ARID,
        m_axi_DATA_FC6_B_I_ARLEN,
        m_axi_DATA_FC6_B_I_ARSIZE,
        m_axi_DATA_FC6_B_I_ARBURST,
        m_axi_DATA_FC6_B_I_ARLOCK,
        m_axi_DATA_FC6_B_I_ARCACHE,
        m_axi_DATA_FC6_B_I_ARPROT,
        m_axi_DATA_FC6_B_I_ARQOS,
        m_axi_DATA_FC6_B_I_ARREGION,
        m_axi_DATA_FC6_B_I_ARUSER,
        m_axi_DATA_FC6_B_I_RVALID,
        m_axi_DATA_FC6_B_I_RREADY,
        m_axi_DATA_FC6_B_I_RDATA,
        m_axi_DATA_FC6_B_I_RLAST,
        m_axi_DATA_FC6_B_I_RID,
        m_axi_DATA_FC6_B_I_RUSER,
        m_axi_DATA_FC6_B_I_RRESP,
        m_axi_DATA_FC6_B_I_BVALID,
        m_axi_DATA_FC6_B_I_BREADY,
        m_axi_DATA_FC6_B_I_BRESP,
        m_axi_DATA_FC6_B_I_BID,
        m_axi_DATA_FC6_B_I_BUSER,
        m_axi_DATA_FC6_O_O_AWVALID,
        m_axi_DATA_FC6_O_O_AWREADY,
        m_axi_DATA_FC6_O_O_AWADDR,
        m_axi_DATA_FC6_O_O_AWID,
        m_axi_DATA_FC6_O_O_AWLEN,
        m_axi_DATA_FC6_O_O_AWSIZE,
        m_axi_DATA_FC6_O_O_AWBURST,
        m_axi_DATA_FC6_O_O_AWLOCK,
        m_axi_DATA_FC6_O_O_AWCACHE,
        m_axi_DATA_FC6_O_O_AWPROT,
        m_axi_DATA_FC6_O_O_AWQOS,
        m_axi_DATA_FC6_O_O_AWREGION,
        m_axi_DATA_FC6_O_O_AWUSER,
        m_axi_DATA_FC6_O_O_WVALID,
        m_axi_DATA_FC6_O_O_WREADY,
        m_axi_DATA_FC6_O_O_WDATA,
        m_axi_DATA_FC6_O_O_WSTRB,
        m_axi_DATA_FC6_O_O_WLAST,
        m_axi_DATA_FC6_O_O_WID,
        m_axi_DATA_FC6_O_O_WUSER,
        m_axi_DATA_FC6_O_O_ARVALID,
        m_axi_DATA_FC6_O_O_ARREADY,
        m_axi_DATA_FC6_O_O_ARADDR,
        m_axi_DATA_FC6_O_O_ARID,
        m_axi_DATA_FC6_O_O_ARLEN,
        m_axi_DATA_FC6_O_O_ARSIZE,
        m_axi_DATA_FC6_O_O_ARBURST,
        m_axi_DATA_FC6_O_O_ARLOCK,
        m_axi_DATA_FC6_O_O_ARCACHE,
        m_axi_DATA_FC6_O_O_ARPROT,
        m_axi_DATA_FC6_O_O_ARQOS,
        m_axi_DATA_FC6_O_O_ARREGION,
        m_axi_DATA_FC6_O_O_ARUSER,
        m_axi_DATA_FC6_O_O_RVALID,
        m_axi_DATA_FC6_O_O_RREADY,
        m_axi_DATA_FC6_O_O_RDATA,
        m_axi_DATA_FC6_O_O_RLAST,
        m_axi_DATA_FC6_O_O_RID,
        m_axi_DATA_FC6_O_O_RUSER,
        m_axi_DATA_FC6_O_O_RRESP,
        m_axi_DATA_FC6_O_O_BVALID,
        m_axi_DATA_FC6_O_O_BREADY,
        m_axi_DATA_FC6_O_O_BRESP,
        m_axi_DATA_FC6_O_O_BID,
        m_axi_DATA_FC6_O_O_BUSER,
        m_axi_DATA_DONE_AWVALID,
        m_axi_DATA_DONE_AWREADY,
        m_axi_DATA_DONE_AWADDR,
        m_axi_DATA_DONE_AWID,
        m_axi_DATA_DONE_AWLEN,
        m_axi_DATA_DONE_AWSIZE,
        m_axi_DATA_DONE_AWBURST,
        m_axi_DATA_DONE_AWLOCK,
        m_axi_DATA_DONE_AWCACHE,
        m_axi_DATA_DONE_AWPROT,
        m_axi_DATA_DONE_AWQOS,
        m_axi_DATA_DONE_AWREGION,
        m_axi_DATA_DONE_AWUSER,
        m_axi_DATA_DONE_WVALID,
        m_axi_DATA_DONE_WREADY,
        m_axi_DATA_DONE_WDATA,
        m_axi_DATA_DONE_WSTRB,
        m_axi_DATA_DONE_WLAST,
        m_axi_DATA_DONE_WID,
        m_axi_DATA_DONE_WUSER,
        m_axi_DATA_DONE_ARVALID,
        m_axi_DATA_DONE_ARREADY,
        m_axi_DATA_DONE_ARADDR,
        m_axi_DATA_DONE_ARID,
        m_axi_DATA_DONE_ARLEN,
        m_axi_DATA_DONE_ARSIZE,
        m_axi_DATA_DONE_ARBURST,
        m_axi_DATA_DONE_ARLOCK,
        m_axi_DATA_DONE_ARCACHE,
        m_axi_DATA_DONE_ARPROT,
        m_axi_DATA_DONE_ARQOS,
        m_axi_DATA_DONE_ARREGION,
        m_axi_DATA_DONE_ARUSER,
        m_axi_DATA_DONE_RVALID,
        m_axi_DATA_DONE_RREADY,
        m_axi_DATA_DONE_RDATA,
        m_axi_DATA_DONE_RLAST,
        m_axi_DATA_DONE_RID,
        m_axi_DATA_DONE_RUSER,
        m_axi_DATA_DONE_RRESP,
        m_axi_DATA_DONE_BVALID,
        m_axi_DATA_DONE_BREADY,
        m_axi_DATA_DONE_BRESP,
        m_axi_DATA_DONE_BID,
        m_axi_DATA_DONE_BUSER,
        m_axi_DATA_START_AWVALID,
        m_axi_DATA_START_AWREADY,
        m_axi_DATA_START_AWADDR,
        m_axi_DATA_START_AWID,
        m_axi_DATA_START_AWLEN,
        m_axi_DATA_START_AWSIZE,
        m_axi_DATA_START_AWBURST,
        m_axi_DATA_START_AWLOCK,
        m_axi_DATA_START_AWCACHE,
        m_axi_DATA_START_AWPROT,
        m_axi_DATA_START_AWQOS,
        m_axi_DATA_START_AWREGION,
        m_axi_DATA_START_AWUSER,
        m_axi_DATA_START_WVALID,
        m_axi_DATA_START_WREADY,
        m_axi_DATA_START_WDATA,
        m_axi_DATA_START_WSTRB,
        m_axi_DATA_START_WLAST,
        m_axi_DATA_START_WID,
        m_axi_DATA_START_WUSER,
        m_axi_DATA_START_ARVALID,
        m_axi_DATA_START_ARREADY,
        m_axi_DATA_START_ARADDR,
        m_axi_DATA_START_ARID,
        m_axi_DATA_START_ARLEN,
        m_axi_DATA_START_ARSIZE,
        m_axi_DATA_START_ARBURST,
        m_axi_DATA_START_ARLOCK,
        m_axi_DATA_START_ARCACHE,
        m_axi_DATA_START_ARPROT,
        m_axi_DATA_START_ARQOS,
        m_axi_DATA_START_ARREGION,
        m_axi_DATA_START_ARUSER,
        m_axi_DATA_START_RVALID,
        m_axi_DATA_START_RREADY,
        m_axi_DATA_START_RDATA,
        m_axi_DATA_START_RLAST,
        m_axi_DATA_START_RID,
        m_axi_DATA_START_RUSER,
        m_axi_DATA_START_RRESP,
        m_axi_DATA_START_BVALID,
        m_axi_DATA_START_BREADY,
        m_axi_DATA_START_BRESP,
        m_axi_DATA_START_BID,
        m_axi_DATA_START_BUSER,
        fc6_w_i_address0,
        fc6_w_i_ce0,
        fc6_w_i_q0,
        fc6_b_i_address0,
        fc6_b_i_ce0,
        fc6_b_i_q0,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 94'd1;
parameter    ap_ST_fsm_state2 = 94'd2;
parameter    ap_ST_fsm_state3 = 94'd4;
parameter    ap_ST_fsm_state4 = 94'd8;
parameter    ap_ST_fsm_state5 = 94'd16;
parameter    ap_ST_fsm_state6 = 94'd32;
parameter    ap_ST_fsm_state7 = 94'd64;
parameter    ap_ST_fsm_state8 = 94'd128;
parameter    ap_ST_fsm_state9 = 94'd256;
parameter    ap_ST_fsm_state10 = 94'd512;
parameter    ap_ST_fsm_state11 = 94'd1024;
parameter    ap_ST_fsm_state12 = 94'd2048;
parameter    ap_ST_fsm_state13 = 94'd4096;
parameter    ap_ST_fsm_state14 = 94'd8192;
parameter    ap_ST_fsm_state15 = 94'd16384;
parameter    ap_ST_fsm_state16 = 94'd32768;
parameter    ap_ST_fsm_state17 = 94'd65536;
parameter    ap_ST_fsm_state18 = 94'd131072;
parameter    ap_ST_fsm_state19 = 94'd262144;
parameter    ap_ST_fsm_state20 = 94'd524288;
parameter    ap_ST_fsm_state21 = 94'd1048576;
parameter    ap_ST_fsm_state22 = 94'd2097152;
parameter    ap_ST_fsm_state23 = 94'd4194304;
parameter    ap_ST_fsm_state24 = 94'd8388608;
parameter    ap_ST_fsm_state25 = 94'd16777216;
parameter    ap_ST_fsm_state26 = 94'd33554432;
parameter    ap_ST_fsm_state27 = 94'd67108864;
parameter    ap_ST_fsm_state28 = 94'd134217728;
parameter    ap_ST_fsm_state29 = 94'd268435456;
parameter    ap_ST_fsm_state30 = 94'd536870912;
parameter    ap_ST_fsm_state31 = 94'd1073741824;
parameter    ap_ST_fsm_state32 = 94'd2147483648;
parameter    ap_ST_fsm_state33 = 94'd4294967296;
parameter    ap_ST_fsm_state34 = 94'd8589934592;
parameter    ap_ST_fsm_state35 = 94'd17179869184;
parameter    ap_ST_fsm_state36 = 94'd34359738368;
parameter    ap_ST_fsm_state37 = 94'd68719476736;
parameter    ap_ST_fsm_state38 = 94'd137438953472;
parameter    ap_ST_fsm_state39 = 94'd274877906944;
parameter    ap_ST_fsm_state40 = 94'd549755813888;
parameter    ap_ST_fsm_state41 = 94'd1099511627776;
parameter    ap_ST_fsm_state42 = 94'd2199023255552;
parameter    ap_ST_fsm_state43 = 94'd4398046511104;
parameter    ap_ST_fsm_state44 = 94'd8796093022208;
parameter    ap_ST_fsm_state45 = 94'd17592186044416;
parameter    ap_ST_fsm_state46 = 94'd35184372088832;
parameter    ap_ST_fsm_state47 = 94'd70368744177664;
parameter    ap_ST_fsm_state48 = 94'd140737488355328;
parameter    ap_ST_fsm_state49 = 94'd281474976710656;
parameter    ap_ST_fsm_state50 = 94'd562949953421312;
parameter    ap_ST_fsm_state51 = 94'd1125899906842624;
parameter    ap_ST_fsm_state52 = 94'd2251799813685248;
parameter    ap_ST_fsm_state53 = 94'd4503599627370496;
parameter    ap_ST_fsm_state54 = 94'd9007199254740992;
parameter    ap_ST_fsm_state55 = 94'd18014398509481984;
parameter    ap_ST_fsm_state56 = 94'd36028797018963968;
parameter    ap_ST_fsm_state57 = 94'd72057594037927936;
parameter    ap_ST_fsm_state58 = 94'd144115188075855872;
parameter    ap_ST_fsm_state59 = 94'd288230376151711744;
parameter    ap_ST_fsm_state60 = 94'd576460752303423488;
parameter    ap_ST_fsm_state61 = 94'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 94'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 94'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 94'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 94'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 94'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 94'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 94'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 94'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 94'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 94'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 94'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 94'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 94'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 94'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 94'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 94'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 94'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 94'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 94'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 94'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 94'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 94'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 94'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 94'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 94'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 94'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 94'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 94'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 94'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 94'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 94'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 94'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 94'd9903520314283042199192993792;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_IN_I_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_IMAGE_IN_I_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_IN_I_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_IN_I_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_IN_I_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_IN_I_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_IN_I_USER_VALUE = 0;
parameter    C_M_AXI_DATA_IMAGE_IN_I_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_IMAGE_IN_I_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_C1_W_I_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_W_I_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_C1_W_I_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_C1_W_I_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_W_I_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_W_I_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_W_I_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_W_I_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_W_I_USER_VALUE = 0;
parameter    C_M_AXI_DATA_C1_W_I_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_C1_W_I_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_C1_B_I_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_B_I_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_C1_B_I_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_C1_B_I_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_B_I_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_B_I_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_B_I_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_B_I_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C1_B_I_USER_VALUE = 0;
parameter    C_M_AXI_DATA_C1_B_I_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_C1_B_I_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_C3_W_I_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_W_I_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_C3_W_I_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_C3_W_I_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_W_I_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_W_I_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_W_I_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_W_I_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_W_I_USER_VALUE = 0;
parameter    C_M_AXI_DATA_C3_W_I_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_C3_W_I_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_C3_B_I_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_B_I_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_C3_B_I_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_C3_B_I_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_B_I_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_B_I_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_B_I_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_B_I_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C3_B_I_USER_VALUE = 0;
parameter    C_M_AXI_DATA_C3_B_I_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_C3_B_I_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_FC6_W_I_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_W_I_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_FC6_W_I_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_FC6_W_I_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_W_I_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_W_I_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_W_I_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_W_I_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_W_I_USER_VALUE = 0;
parameter    C_M_AXI_DATA_FC6_W_I_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_FC6_W_I_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_FC6_B_I_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_B_I_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_FC6_B_I_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_FC6_B_I_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_B_I_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_B_I_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_B_I_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_B_I_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_B_I_USER_VALUE = 0;
parameter    C_M_AXI_DATA_FC6_B_I_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_FC6_B_I_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_FC6_O_O_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_O_O_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_FC6_O_O_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_FC6_O_O_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_O_O_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_O_O_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_O_O_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_O_O_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_O_O_USER_VALUE = 0;
parameter    C_M_AXI_DATA_FC6_O_O_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_FC6_O_O_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_DONE_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_DONE_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_DONE_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_DONE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_DONE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_DONE_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_DONE_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_DONE_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_DONE_USER_VALUE = 0;
parameter    C_M_AXI_DATA_DONE_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_DONE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_START_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_START_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_START_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_START_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_START_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_START_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_START_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_START_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_START_USER_VALUE = 0;
parameter    C_M_AXI_DATA_START_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_START_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_IMAGE_IN_I_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_C1_W_I_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_C1_B_I_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_C3_W_I_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_C3_B_I_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_FC6_W_I_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_FC6_B_I_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_FC6_O_O_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_DONE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_START_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_DATA_IMAGE_IN_I_AWVALID;
input   m_axi_DATA_IMAGE_IN_I_AWREADY;
output  [C_M_AXI_DATA_IMAGE_IN_I_ADDR_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_AWADDR;
output  [C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_AWID;
output  [7:0] m_axi_DATA_IMAGE_IN_I_AWLEN;
output  [2:0] m_axi_DATA_IMAGE_IN_I_AWSIZE;
output  [1:0] m_axi_DATA_IMAGE_IN_I_AWBURST;
output  [1:0] m_axi_DATA_IMAGE_IN_I_AWLOCK;
output  [3:0] m_axi_DATA_IMAGE_IN_I_AWCACHE;
output  [2:0] m_axi_DATA_IMAGE_IN_I_AWPROT;
output  [3:0] m_axi_DATA_IMAGE_IN_I_AWQOS;
output  [3:0] m_axi_DATA_IMAGE_IN_I_AWREGION;
output  [C_M_AXI_DATA_IMAGE_IN_I_AWUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_AWUSER;
output   m_axi_DATA_IMAGE_IN_I_WVALID;
input   m_axi_DATA_IMAGE_IN_I_WREADY;
output  [C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_WDATA;
output  [C_M_AXI_DATA_IMAGE_IN_I_WSTRB_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_WSTRB;
output   m_axi_DATA_IMAGE_IN_I_WLAST;
output  [C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_WID;
output  [C_M_AXI_DATA_IMAGE_IN_I_WUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_WUSER;
output   m_axi_DATA_IMAGE_IN_I_ARVALID;
input   m_axi_DATA_IMAGE_IN_I_ARREADY;
output  [C_M_AXI_DATA_IMAGE_IN_I_ADDR_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_ARADDR;
output  [C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_ARID;
output  [7:0] m_axi_DATA_IMAGE_IN_I_ARLEN;
output  [2:0] m_axi_DATA_IMAGE_IN_I_ARSIZE;
output  [1:0] m_axi_DATA_IMAGE_IN_I_ARBURST;
output  [1:0] m_axi_DATA_IMAGE_IN_I_ARLOCK;
output  [3:0] m_axi_DATA_IMAGE_IN_I_ARCACHE;
output  [2:0] m_axi_DATA_IMAGE_IN_I_ARPROT;
output  [3:0] m_axi_DATA_IMAGE_IN_I_ARQOS;
output  [3:0] m_axi_DATA_IMAGE_IN_I_ARREGION;
output  [C_M_AXI_DATA_IMAGE_IN_I_ARUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_ARUSER;
input   m_axi_DATA_IMAGE_IN_I_RVALID;
output   m_axi_DATA_IMAGE_IN_I_RREADY;
input  [C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_RDATA;
input   m_axi_DATA_IMAGE_IN_I_RLAST;
input  [C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_RID;
input  [C_M_AXI_DATA_IMAGE_IN_I_RUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_RUSER;
input  [1:0] m_axi_DATA_IMAGE_IN_I_RRESP;
input   m_axi_DATA_IMAGE_IN_I_BVALID;
output   m_axi_DATA_IMAGE_IN_I_BREADY;
input  [1:0] m_axi_DATA_IMAGE_IN_I_BRESP;
input  [C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_BID;
input  [C_M_AXI_DATA_IMAGE_IN_I_BUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_IN_I_BUSER;
output   m_axi_DATA_C1_W_I_AWVALID;
input   m_axi_DATA_C1_W_I_AWREADY;
output  [C_M_AXI_DATA_C1_W_I_ADDR_WIDTH - 1:0] m_axi_DATA_C1_W_I_AWADDR;
output  [C_M_AXI_DATA_C1_W_I_ID_WIDTH - 1:0] m_axi_DATA_C1_W_I_AWID;
output  [7:0] m_axi_DATA_C1_W_I_AWLEN;
output  [2:0] m_axi_DATA_C1_W_I_AWSIZE;
output  [1:0] m_axi_DATA_C1_W_I_AWBURST;
output  [1:0] m_axi_DATA_C1_W_I_AWLOCK;
output  [3:0] m_axi_DATA_C1_W_I_AWCACHE;
output  [2:0] m_axi_DATA_C1_W_I_AWPROT;
output  [3:0] m_axi_DATA_C1_W_I_AWQOS;
output  [3:0] m_axi_DATA_C1_W_I_AWREGION;
output  [C_M_AXI_DATA_C1_W_I_AWUSER_WIDTH - 1:0] m_axi_DATA_C1_W_I_AWUSER;
output   m_axi_DATA_C1_W_I_WVALID;
input   m_axi_DATA_C1_W_I_WREADY;
output  [C_M_AXI_DATA_C1_W_I_DATA_WIDTH - 1:0] m_axi_DATA_C1_W_I_WDATA;
output  [C_M_AXI_DATA_C1_W_I_WSTRB_WIDTH - 1:0] m_axi_DATA_C1_W_I_WSTRB;
output   m_axi_DATA_C1_W_I_WLAST;
output  [C_M_AXI_DATA_C1_W_I_ID_WIDTH - 1:0] m_axi_DATA_C1_W_I_WID;
output  [C_M_AXI_DATA_C1_W_I_WUSER_WIDTH - 1:0] m_axi_DATA_C1_W_I_WUSER;
output   m_axi_DATA_C1_W_I_ARVALID;
input   m_axi_DATA_C1_W_I_ARREADY;
output  [C_M_AXI_DATA_C1_W_I_ADDR_WIDTH - 1:0] m_axi_DATA_C1_W_I_ARADDR;
output  [C_M_AXI_DATA_C1_W_I_ID_WIDTH - 1:0] m_axi_DATA_C1_W_I_ARID;
output  [7:0] m_axi_DATA_C1_W_I_ARLEN;
output  [2:0] m_axi_DATA_C1_W_I_ARSIZE;
output  [1:0] m_axi_DATA_C1_W_I_ARBURST;
output  [1:0] m_axi_DATA_C1_W_I_ARLOCK;
output  [3:0] m_axi_DATA_C1_W_I_ARCACHE;
output  [2:0] m_axi_DATA_C1_W_I_ARPROT;
output  [3:0] m_axi_DATA_C1_W_I_ARQOS;
output  [3:0] m_axi_DATA_C1_W_I_ARREGION;
output  [C_M_AXI_DATA_C1_W_I_ARUSER_WIDTH - 1:0] m_axi_DATA_C1_W_I_ARUSER;
input   m_axi_DATA_C1_W_I_RVALID;
output   m_axi_DATA_C1_W_I_RREADY;
input  [C_M_AXI_DATA_C1_W_I_DATA_WIDTH - 1:0] m_axi_DATA_C1_W_I_RDATA;
input   m_axi_DATA_C1_W_I_RLAST;
input  [C_M_AXI_DATA_C1_W_I_ID_WIDTH - 1:0] m_axi_DATA_C1_W_I_RID;
input  [C_M_AXI_DATA_C1_W_I_RUSER_WIDTH - 1:0] m_axi_DATA_C1_W_I_RUSER;
input  [1:0] m_axi_DATA_C1_W_I_RRESP;
input   m_axi_DATA_C1_W_I_BVALID;
output   m_axi_DATA_C1_W_I_BREADY;
input  [1:0] m_axi_DATA_C1_W_I_BRESP;
input  [C_M_AXI_DATA_C1_W_I_ID_WIDTH - 1:0] m_axi_DATA_C1_W_I_BID;
input  [C_M_AXI_DATA_C1_W_I_BUSER_WIDTH - 1:0] m_axi_DATA_C1_W_I_BUSER;
output   m_axi_DATA_C1_B_I_AWVALID;
input   m_axi_DATA_C1_B_I_AWREADY;
output  [C_M_AXI_DATA_C1_B_I_ADDR_WIDTH - 1:0] m_axi_DATA_C1_B_I_AWADDR;
output  [C_M_AXI_DATA_C1_B_I_ID_WIDTH - 1:0] m_axi_DATA_C1_B_I_AWID;
output  [7:0] m_axi_DATA_C1_B_I_AWLEN;
output  [2:0] m_axi_DATA_C1_B_I_AWSIZE;
output  [1:0] m_axi_DATA_C1_B_I_AWBURST;
output  [1:0] m_axi_DATA_C1_B_I_AWLOCK;
output  [3:0] m_axi_DATA_C1_B_I_AWCACHE;
output  [2:0] m_axi_DATA_C1_B_I_AWPROT;
output  [3:0] m_axi_DATA_C1_B_I_AWQOS;
output  [3:0] m_axi_DATA_C1_B_I_AWREGION;
output  [C_M_AXI_DATA_C1_B_I_AWUSER_WIDTH - 1:0] m_axi_DATA_C1_B_I_AWUSER;
output   m_axi_DATA_C1_B_I_WVALID;
input   m_axi_DATA_C1_B_I_WREADY;
output  [C_M_AXI_DATA_C1_B_I_DATA_WIDTH - 1:0] m_axi_DATA_C1_B_I_WDATA;
output  [C_M_AXI_DATA_C1_B_I_WSTRB_WIDTH - 1:0] m_axi_DATA_C1_B_I_WSTRB;
output   m_axi_DATA_C1_B_I_WLAST;
output  [C_M_AXI_DATA_C1_B_I_ID_WIDTH - 1:0] m_axi_DATA_C1_B_I_WID;
output  [C_M_AXI_DATA_C1_B_I_WUSER_WIDTH - 1:0] m_axi_DATA_C1_B_I_WUSER;
output   m_axi_DATA_C1_B_I_ARVALID;
input   m_axi_DATA_C1_B_I_ARREADY;
output  [C_M_AXI_DATA_C1_B_I_ADDR_WIDTH - 1:0] m_axi_DATA_C1_B_I_ARADDR;
output  [C_M_AXI_DATA_C1_B_I_ID_WIDTH - 1:0] m_axi_DATA_C1_B_I_ARID;
output  [7:0] m_axi_DATA_C1_B_I_ARLEN;
output  [2:0] m_axi_DATA_C1_B_I_ARSIZE;
output  [1:0] m_axi_DATA_C1_B_I_ARBURST;
output  [1:0] m_axi_DATA_C1_B_I_ARLOCK;
output  [3:0] m_axi_DATA_C1_B_I_ARCACHE;
output  [2:0] m_axi_DATA_C1_B_I_ARPROT;
output  [3:0] m_axi_DATA_C1_B_I_ARQOS;
output  [3:0] m_axi_DATA_C1_B_I_ARREGION;
output  [C_M_AXI_DATA_C1_B_I_ARUSER_WIDTH - 1:0] m_axi_DATA_C1_B_I_ARUSER;
input   m_axi_DATA_C1_B_I_RVALID;
output   m_axi_DATA_C1_B_I_RREADY;
input  [C_M_AXI_DATA_C1_B_I_DATA_WIDTH - 1:0] m_axi_DATA_C1_B_I_RDATA;
input   m_axi_DATA_C1_B_I_RLAST;
input  [C_M_AXI_DATA_C1_B_I_ID_WIDTH - 1:0] m_axi_DATA_C1_B_I_RID;
input  [C_M_AXI_DATA_C1_B_I_RUSER_WIDTH - 1:0] m_axi_DATA_C1_B_I_RUSER;
input  [1:0] m_axi_DATA_C1_B_I_RRESP;
input   m_axi_DATA_C1_B_I_BVALID;
output   m_axi_DATA_C1_B_I_BREADY;
input  [1:0] m_axi_DATA_C1_B_I_BRESP;
input  [C_M_AXI_DATA_C1_B_I_ID_WIDTH - 1:0] m_axi_DATA_C1_B_I_BID;
input  [C_M_AXI_DATA_C1_B_I_BUSER_WIDTH - 1:0] m_axi_DATA_C1_B_I_BUSER;
output   m_axi_DATA_C3_W_I_AWVALID;
input   m_axi_DATA_C3_W_I_AWREADY;
output  [C_M_AXI_DATA_C3_W_I_ADDR_WIDTH - 1:0] m_axi_DATA_C3_W_I_AWADDR;
output  [C_M_AXI_DATA_C3_W_I_ID_WIDTH - 1:0] m_axi_DATA_C3_W_I_AWID;
output  [7:0] m_axi_DATA_C3_W_I_AWLEN;
output  [2:0] m_axi_DATA_C3_W_I_AWSIZE;
output  [1:0] m_axi_DATA_C3_W_I_AWBURST;
output  [1:0] m_axi_DATA_C3_W_I_AWLOCK;
output  [3:0] m_axi_DATA_C3_W_I_AWCACHE;
output  [2:0] m_axi_DATA_C3_W_I_AWPROT;
output  [3:0] m_axi_DATA_C3_W_I_AWQOS;
output  [3:0] m_axi_DATA_C3_W_I_AWREGION;
output  [C_M_AXI_DATA_C3_W_I_AWUSER_WIDTH - 1:0] m_axi_DATA_C3_W_I_AWUSER;
output   m_axi_DATA_C3_W_I_WVALID;
input   m_axi_DATA_C3_W_I_WREADY;
output  [C_M_AXI_DATA_C3_W_I_DATA_WIDTH - 1:0] m_axi_DATA_C3_W_I_WDATA;
output  [C_M_AXI_DATA_C3_W_I_WSTRB_WIDTH - 1:0] m_axi_DATA_C3_W_I_WSTRB;
output   m_axi_DATA_C3_W_I_WLAST;
output  [C_M_AXI_DATA_C3_W_I_ID_WIDTH - 1:0] m_axi_DATA_C3_W_I_WID;
output  [C_M_AXI_DATA_C3_W_I_WUSER_WIDTH - 1:0] m_axi_DATA_C3_W_I_WUSER;
output   m_axi_DATA_C3_W_I_ARVALID;
input   m_axi_DATA_C3_W_I_ARREADY;
output  [C_M_AXI_DATA_C3_W_I_ADDR_WIDTH - 1:0] m_axi_DATA_C3_W_I_ARADDR;
output  [C_M_AXI_DATA_C3_W_I_ID_WIDTH - 1:0] m_axi_DATA_C3_W_I_ARID;
output  [7:0] m_axi_DATA_C3_W_I_ARLEN;
output  [2:0] m_axi_DATA_C3_W_I_ARSIZE;
output  [1:0] m_axi_DATA_C3_W_I_ARBURST;
output  [1:0] m_axi_DATA_C3_W_I_ARLOCK;
output  [3:0] m_axi_DATA_C3_W_I_ARCACHE;
output  [2:0] m_axi_DATA_C3_W_I_ARPROT;
output  [3:0] m_axi_DATA_C3_W_I_ARQOS;
output  [3:0] m_axi_DATA_C3_W_I_ARREGION;
output  [C_M_AXI_DATA_C3_W_I_ARUSER_WIDTH - 1:0] m_axi_DATA_C3_W_I_ARUSER;
input   m_axi_DATA_C3_W_I_RVALID;
output   m_axi_DATA_C3_W_I_RREADY;
input  [C_M_AXI_DATA_C3_W_I_DATA_WIDTH - 1:0] m_axi_DATA_C3_W_I_RDATA;
input   m_axi_DATA_C3_W_I_RLAST;
input  [C_M_AXI_DATA_C3_W_I_ID_WIDTH - 1:0] m_axi_DATA_C3_W_I_RID;
input  [C_M_AXI_DATA_C3_W_I_RUSER_WIDTH - 1:0] m_axi_DATA_C3_W_I_RUSER;
input  [1:0] m_axi_DATA_C3_W_I_RRESP;
input   m_axi_DATA_C3_W_I_BVALID;
output   m_axi_DATA_C3_W_I_BREADY;
input  [1:0] m_axi_DATA_C3_W_I_BRESP;
input  [C_M_AXI_DATA_C3_W_I_ID_WIDTH - 1:0] m_axi_DATA_C3_W_I_BID;
input  [C_M_AXI_DATA_C3_W_I_BUSER_WIDTH - 1:0] m_axi_DATA_C3_W_I_BUSER;
output   m_axi_DATA_C3_B_I_AWVALID;
input   m_axi_DATA_C3_B_I_AWREADY;
output  [C_M_AXI_DATA_C3_B_I_ADDR_WIDTH - 1:0] m_axi_DATA_C3_B_I_AWADDR;
output  [C_M_AXI_DATA_C3_B_I_ID_WIDTH - 1:0] m_axi_DATA_C3_B_I_AWID;
output  [7:0] m_axi_DATA_C3_B_I_AWLEN;
output  [2:0] m_axi_DATA_C3_B_I_AWSIZE;
output  [1:0] m_axi_DATA_C3_B_I_AWBURST;
output  [1:0] m_axi_DATA_C3_B_I_AWLOCK;
output  [3:0] m_axi_DATA_C3_B_I_AWCACHE;
output  [2:0] m_axi_DATA_C3_B_I_AWPROT;
output  [3:0] m_axi_DATA_C3_B_I_AWQOS;
output  [3:0] m_axi_DATA_C3_B_I_AWREGION;
output  [C_M_AXI_DATA_C3_B_I_AWUSER_WIDTH - 1:0] m_axi_DATA_C3_B_I_AWUSER;
output   m_axi_DATA_C3_B_I_WVALID;
input   m_axi_DATA_C3_B_I_WREADY;
output  [C_M_AXI_DATA_C3_B_I_DATA_WIDTH - 1:0] m_axi_DATA_C3_B_I_WDATA;
output  [C_M_AXI_DATA_C3_B_I_WSTRB_WIDTH - 1:0] m_axi_DATA_C3_B_I_WSTRB;
output   m_axi_DATA_C3_B_I_WLAST;
output  [C_M_AXI_DATA_C3_B_I_ID_WIDTH - 1:0] m_axi_DATA_C3_B_I_WID;
output  [C_M_AXI_DATA_C3_B_I_WUSER_WIDTH - 1:0] m_axi_DATA_C3_B_I_WUSER;
output   m_axi_DATA_C3_B_I_ARVALID;
input   m_axi_DATA_C3_B_I_ARREADY;
output  [C_M_AXI_DATA_C3_B_I_ADDR_WIDTH - 1:0] m_axi_DATA_C3_B_I_ARADDR;
output  [C_M_AXI_DATA_C3_B_I_ID_WIDTH - 1:0] m_axi_DATA_C3_B_I_ARID;
output  [7:0] m_axi_DATA_C3_B_I_ARLEN;
output  [2:0] m_axi_DATA_C3_B_I_ARSIZE;
output  [1:0] m_axi_DATA_C3_B_I_ARBURST;
output  [1:0] m_axi_DATA_C3_B_I_ARLOCK;
output  [3:0] m_axi_DATA_C3_B_I_ARCACHE;
output  [2:0] m_axi_DATA_C3_B_I_ARPROT;
output  [3:0] m_axi_DATA_C3_B_I_ARQOS;
output  [3:0] m_axi_DATA_C3_B_I_ARREGION;
output  [C_M_AXI_DATA_C3_B_I_ARUSER_WIDTH - 1:0] m_axi_DATA_C3_B_I_ARUSER;
input   m_axi_DATA_C3_B_I_RVALID;
output   m_axi_DATA_C3_B_I_RREADY;
input  [C_M_AXI_DATA_C3_B_I_DATA_WIDTH - 1:0] m_axi_DATA_C3_B_I_RDATA;
input   m_axi_DATA_C3_B_I_RLAST;
input  [C_M_AXI_DATA_C3_B_I_ID_WIDTH - 1:0] m_axi_DATA_C3_B_I_RID;
input  [C_M_AXI_DATA_C3_B_I_RUSER_WIDTH - 1:0] m_axi_DATA_C3_B_I_RUSER;
input  [1:0] m_axi_DATA_C3_B_I_RRESP;
input   m_axi_DATA_C3_B_I_BVALID;
output   m_axi_DATA_C3_B_I_BREADY;
input  [1:0] m_axi_DATA_C3_B_I_BRESP;
input  [C_M_AXI_DATA_C3_B_I_ID_WIDTH - 1:0] m_axi_DATA_C3_B_I_BID;
input  [C_M_AXI_DATA_C3_B_I_BUSER_WIDTH - 1:0] m_axi_DATA_C3_B_I_BUSER;
output   m_axi_DATA_FC6_W_I_AWVALID;
input   m_axi_DATA_FC6_W_I_AWREADY;
output  [C_M_AXI_DATA_FC6_W_I_ADDR_WIDTH - 1:0] m_axi_DATA_FC6_W_I_AWADDR;
output  [C_M_AXI_DATA_FC6_W_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_W_I_AWID;
output  [7:0] m_axi_DATA_FC6_W_I_AWLEN;
output  [2:0] m_axi_DATA_FC6_W_I_AWSIZE;
output  [1:0] m_axi_DATA_FC6_W_I_AWBURST;
output  [1:0] m_axi_DATA_FC6_W_I_AWLOCK;
output  [3:0] m_axi_DATA_FC6_W_I_AWCACHE;
output  [2:0] m_axi_DATA_FC6_W_I_AWPROT;
output  [3:0] m_axi_DATA_FC6_W_I_AWQOS;
output  [3:0] m_axi_DATA_FC6_W_I_AWREGION;
output  [C_M_AXI_DATA_FC6_W_I_AWUSER_WIDTH - 1:0] m_axi_DATA_FC6_W_I_AWUSER;
output   m_axi_DATA_FC6_W_I_WVALID;
input   m_axi_DATA_FC6_W_I_WREADY;
output  [C_M_AXI_DATA_FC6_W_I_DATA_WIDTH - 1:0] m_axi_DATA_FC6_W_I_WDATA;
output  [C_M_AXI_DATA_FC6_W_I_WSTRB_WIDTH - 1:0] m_axi_DATA_FC6_W_I_WSTRB;
output   m_axi_DATA_FC6_W_I_WLAST;
output  [C_M_AXI_DATA_FC6_W_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_W_I_WID;
output  [C_M_AXI_DATA_FC6_W_I_WUSER_WIDTH - 1:0] m_axi_DATA_FC6_W_I_WUSER;
output   m_axi_DATA_FC6_W_I_ARVALID;
input   m_axi_DATA_FC6_W_I_ARREADY;
output  [C_M_AXI_DATA_FC6_W_I_ADDR_WIDTH - 1:0] m_axi_DATA_FC6_W_I_ARADDR;
output  [C_M_AXI_DATA_FC6_W_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_W_I_ARID;
output  [7:0] m_axi_DATA_FC6_W_I_ARLEN;
output  [2:0] m_axi_DATA_FC6_W_I_ARSIZE;
output  [1:0] m_axi_DATA_FC6_W_I_ARBURST;
output  [1:0] m_axi_DATA_FC6_W_I_ARLOCK;
output  [3:0] m_axi_DATA_FC6_W_I_ARCACHE;
output  [2:0] m_axi_DATA_FC6_W_I_ARPROT;
output  [3:0] m_axi_DATA_FC6_W_I_ARQOS;
output  [3:0] m_axi_DATA_FC6_W_I_ARREGION;
output  [C_M_AXI_DATA_FC6_W_I_ARUSER_WIDTH - 1:0] m_axi_DATA_FC6_W_I_ARUSER;
input   m_axi_DATA_FC6_W_I_RVALID;
output   m_axi_DATA_FC6_W_I_RREADY;
input  [C_M_AXI_DATA_FC6_W_I_DATA_WIDTH - 1:0] m_axi_DATA_FC6_W_I_RDATA;
input   m_axi_DATA_FC6_W_I_RLAST;
input  [C_M_AXI_DATA_FC6_W_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_W_I_RID;
input  [C_M_AXI_DATA_FC6_W_I_RUSER_WIDTH - 1:0] m_axi_DATA_FC6_W_I_RUSER;
input  [1:0] m_axi_DATA_FC6_W_I_RRESP;
input   m_axi_DATA_FC6_W_I_BVALID;
output   m_axi_DATA_FC6_W_I_BREADY;
input  [1:0] m_axi_DATA_FC6_W_I_BRESP;
input  [C_M_AXI_DATA_FC6_W_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_W_I_BID;
input  [C_M_AXI_DATA_FC6_W_I_BUSER_WIDTH - 1:0] m_axi_DATA_FC6_W_I_BUSER;
output   m_axi_DATA_FC6_B_I_AWVALID;
input   m_axi_DATA_FC6_B_I_AWREADY;
output  [C_M_AXI_DATA_FC6_B_I_ADDR_WIDTH - 1:0] m_axi_DATA_FC6_B_I_AWADDR;
output  [C_M_AXI_DATA_FC6_B_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_B_I_AWID;
output  [7:0] m_axi_DATA_FC6_B_I_AWLEN;
output  [2:0] m_axi_DATA_FC6_B_I_AWSIZE;
output  [1:0] m_axi_DATA_FC6_B_I_AWBURST;
output  [1:0] m_axi_DATA_FC6_B_I_AWLOCK;
output  [3:0] m_axi_DATA_FC6_B_I_AWCACHE;
output  [2:0] m_axi_DATA_FC6_B_I_AWPROT;
output  [3:0] m_axi_DATA_FC6_B_I_AWQOS;
output  [3:0] m_axi_DATA_FC6_B_I_AWREGION;
output  [C_M_AXI_DATA_FC6_B_I_AWUSER_WIDTH - 1:0] m_axi_DATA_FC6_B_I_AWUSER;
output   m_axi_DATA_FC6_B_I_WVALID;
input   m_axi_DATA_FC6_B_I_WREADY;
output  [C_M_AXI_DATA_FC6_B_I_DATA_WIDTH - 1:0] m_axi_DATA_FC6_B_I_WDATA;
output  [C_M_AXI_DATA_FC6_B_I_WSTRB_WIDTH - 1:0] m_axi_DATA_FC6_B_I_WSTRB;
output   m_axi_DATA_FC6_B_I_WLAST;
output  [C_M_AXI_DATA_FC6_B_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_B_I_WID;
output  [C_M_AXI_DATA_FC6_B_I_WUSER_WIDTH - 1:0] m_axi_DATA_FC6_B_I_WUSER;
output   m_axi_DATA_FC6_B_I_ARVALID;
input   m_axi_DATA_FC6_B_I_ARREADY;
output  [C_M_AXI_DATA_FC6_B_I_ADDR_WIDTH - 1:0] m_axi_DATA_FC6_B_I_ARADDR;
output  [C_M_AXI_DATA_FC6_B_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_B_I_ARID;
output  [7:0] m_axi_DATA_FC6_B_I_ARLEN;
output  [2:0] m_axi_DATA_FC6_B_I_ARSIZE;
output  [1:0] m_axi_DATA_FC6_B_I_ARBURST;
output  [1:0] m_axi_DATA_FC6_B_I_ARLOCK;
output  [3:0] m_axi_DATA_FC6_B_I_ARCACHE;
output  [2:0] m_axi_DATA_FC6_B_I_ARPROT;
output  [3:0] m_axi_DATA_FC6_B_I_ARQOS;
output  [3:0] m_axi_DATA_FC6_B_I_ARREGION;
output  [C_M_AXI_DATA_FC6_B_I_ARUSER_WIDTH - 1:0] m_axi_DATA_FC6_B_I_ARUSER;
input   m_axi_DATA_FC6_B_I_RVALID;
output   m_axi_DATA_FC6_B_I_RREADY;
input  [C_M_AXI_DATA_FC6_B_I_DATA_WIDTH - 1:0] m_axi_DATA_FC6_B_I_RDATA;
input   m_axi_DATA_FC6_B_I_RLAST;
input  [C_M_AXI_DATA_FC6_B_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_B_I_RID;
input  [C_M_AXI_DATA_FC6_B_I_RUSER_WIDTH - 1:0] m_axi_DATA_FC6_B_I_RUSER;
input  [1:0] m_axi_DATA_FC6_B_I_RRESP;
input   m_axi_DATA_FC6_B_I_BVALID;
output   m_axi_DATA_FC6_B_I_BREADY;
input  [1:0] m_axi_DATA_FC6_B_I_BRESP;
input  [C_M_AXI_DATA_FC6_B_I_ID_WIDTH - 1:0] m_axi_DATA_FC6_B_I_BID;
input  [C_M_AXI_DATA_FC6_B_I_BUSER_WIDTH - 1:0] m_axi_DATA_FC6_B_I_BUSER;
output   m_axi_DATA_FC6_O_O_AWVALID;
input   m_axi_DATA_FC6_O_O_AWREADY;
output  [C_M_AXI_DATA_FC6_O_O_ADDR_WIDTH - 1:0] m_axi_DATA_FC6_O_O_AWADDR;
output  [C_M_AXI_DATA_FC6_O_O_ID_WIDTH - 1:0] m_axi_DATA_FC6_O_O_AWID;
output  [7:0] m_axi_DATA_FC6_O_O_AWLEN;
output  [2:0] m_axi_DATA_FC6_O_O_AWSIZE;
output  [1:0] m_axi_DATA_FC6_O_O_AWBURST;
output  [1:0] m_axi_DATA_FC6_O_O_AWLOCK;
output  [3:0] m_axi_DATA_FC6_O_O_AWCACHE;
output  [2:0] m_axi_DATA_FC6_O_O_AWPROT;
output  [3:0] m_axi_DATA_FC6_O_O_AWQOS;
output  [3:0] m_axi_DATA_FC6_O_O_AWREGION;
output  [C_M_AXI_DATA_FC6_O_O_AWUSER_WIDTH - 1:0] m_axi_DATA_FC6_O_O_AWUSER;
output   m_axi_DATA_FC6_O_O_WVALID;
input   m_axi_DATA_FC6_O_O_WREADY;
output  [C_M_AXI_DATA_FC6_O_O_DATA_WIDTH - 1:0] m_axi_DATA_FC6_O_O_WDATA;
output  [C_M_AXI_DATA_FC6_O_O_WSTRB_WIDTH - 1:0] m_axi_DATA_FC6_O_O_WSTRB;
output   m_axi_DATA_FC6_O_O_WLAST;
output  [C_M_AXI_DATA_FC6_O_O_ID_WIDTH - 1:0] m_axi_DATA_FC6_O_O_WID;
output  [C_M_AXI_DATA_FC6_O_O_WUSER_WIDTH - 1:0] m_axi_DATA_FC6_O_O_WUSER;
output   m_axi_DATA_FC6_O_O_ARVALID;
input   m_axi_DATA_FC6_O_O_ARREADY;
output  [C_M_AXI_DATA_FC6_O_O_ADDR_WIDTH - 1:0] m_axi_DATA_FC6_O_O_ARADDR;
output  [C_M_AXI_DATA_FC6_O_O_ID_WIDTH - 1:0] m_axi_DATA_FC6_O_O_ARID;
output  [7:0] m_axi_DATA_FC6_O_O_ARLEN;
output  [2:0] m_axi_DATA_FC6_O_O_ARSIZE;
output  [1:0] m_axi_DATA_FC6_O_O_ARBURST;
output  [1:0] m_axi_DATA_FC6_O_O_ARLOCK;
output  [3:0] m_axi_DATA_FC6_O_O_ARCACHE;
output  [2:0] m_axi_DATA_FC6_O_O_ARPROT;
output  [3:0] m_axi_DATA_FC6_O_O_ARQOS;
output  [3:0] m_axi_DATA_FC6_O_O_ARREGION;
output  [C_M_AXI_DATA_FC6_O_O_ARUSER_WIDTH - 1:0] m_axi_DATA_FC6_O_O_ARUSER;
input   m_axi_DATA_FC6_O_O_RVALID;
output   m_axi_DATA_FC6_O_O_RREADY;
input  [C_M_AXI_DATA_FC6_O_O_DATA_WIDTH - 1:0] m_axi_DATA_FC6_O_O_RDATA;
input   m_axi_DATA_FC6_O_O_RLAST;
input  [C_M_AXI_DATA_FC6_O_O_ID_WIDTH - 1:0] m_axi_DATA_FC6_O_O_RID;
input  [C_M_AXI_DATA_FC6_O_O_RUSER_WIDTH - 1:0] m_axi_DATA_FC6_O_O_RUSER;
input  [1:0] m_axi_DATA_FC6_O_O_RRESP;
input   m_axi_DATA_FC6_O_O_BVALID;
output   m_axi_DATA_FC6_O_O_BREADY;
input  [1:0] m_axi_DATA_FC6_O_O_BRESP;
input  [C_M_AXI_DATA_FC6_O_O_ID_WIDTH - 1:0] m_axi_DATA_FC6_O_O_BID;
input  [C_M_AXI_DATA_FC6_O_O_BUSER_WIDTH - 1:0] m_axi_DATA_FC6_O_O_BUSER;
output   m_axi_DATA_DONE_AWVALID;
input   m_axi_DATA_DONE_AWREADY;
output  [C_M_AXI_DATA_DONE_ADDR_WIDTH - 1:0] m_axi_DATA_DONE_AWADDR;
output  [C_M_AXI_DATA_DONE_ID_WIDTH - 1:0] m_axi_DATA_DONE_AWID;
output  [7:0] m_axi_DATA_DONE_AWLEN;
output  [2:0] m_axi_DATA_DONE_AWSIZE;
output  [1:0] m_axi_DATA_DONE_AWBURST;
output  [1:0] m_axi_DATA_DONE_AWLOCK;
output  [3:0] m_axi_DATA_DONE_AWCACHE;
output  [2:0] m_axi_DATA_DONE_AWPROT;
output  [3:0] m_axi_DATA_DONE_AWQOS;
output  [3:0] m_axi_DATA_DONE_AWREGION;
output  [C_M_AXI_DATA_DONE_AWUSER_WIDTH - 1:0] m_axi_DATA_DONE_AWUSER;
output   m_axi_DATA_DONE_WVALID;
input   m_axi_DATA_DONE_WREADY;
output  [C_M_AXI_DATA_DONE_DATA_WIDTH - 1:0] m_axi_DATA_DONE_WDATA;
output  [C_M_AXI_DATA_DONE_WSTRB_WIDTH - 1:0] m_axi_DATA_DONE_WSTRB;
output   m_axi_DATA_DONE_WLAST;
output  [C_M_AXI_DATA_DONE_ID_WIDTH - 1:0] m_axi_DATA_DONE_WID;
output  [C_M_AXI_DATA_DONE_WUSER_WIDTH - 1:0] m_axi_DATA_DONE_WUSER;
output   m_axi_DATA_DONE_ARVALID;
input   m_axi_DATA_DONE_ARREADY;
output  [C_M_AXI_DATA_DONE_ADDR_WIDTH - 1:0] m_axi_DATA_DONE_ARADDR;
output  [C_M_AXI_DATA_DONE_ID_WIDTH - 1:0] m_axi_DATA_DONE_ARID;
output  [7:0] m_axi_DATA_DONE_ARLEN;
output  [2:0] m_axi_DATA_DONE_ARSIZE;
output  [1:0] m_axi_DATA_DONE_ARBURST;
output  [1:0] m_axi_DATA_DONE_ARLOCK;
output  [3:0] m_axi_DATA_DONE_ARCACHE;
output  [2:0] m_axi_DATA_DONE_ARPROT;
output  [3:0] m_axi_DATA_DONE_ARQOS;
output  [3:0] m_axi_DATA_DONE_ARREGION;
output  [C_M_AXI_DATA_DONE_ARUSER_WIDTH - 1:0] m_axi_DATA_DONE_ARUSER;
input   m_axi_DATA_DONE_RVALID;
output   m_axi_DATA_DONE_RREADY;
input  [C_M_AXI_DATA_DONE_DATA_WIDTH - 1:0] m_axi_DATA_DONE_RDATA;
input   m_axi_DATA_DONE_RLAST;
input  [C_M_AXI_DATA_DONE_ID_WIDTH - 1:0] m_axi_DATA_DONE_RID;
input  [C_M_AXI_DATA_DONE_RUSER_WIDTH - 1:0] m_axi_DATA_DONE_RUSER;
input  [1:0] m_axi_DATA_DONE_RRESP;
input   m_axi_DATA_DONE_BVALID;
output   m_axi_DATA_DONE_BREADY;
input  [1:0] m_axi_DATA_DONE_BRESP;
input  [C_M_AXI_DATA_DONE_ID_WIDTH - 1:0] m_axi_DATA_DONE_BID;
input  [C_M_AXI_DATA_DONE_BUSER_WIDTH - 1:0] m_axi_DATA_DONE_BUSER;
output   m_axi_DATA_START_AWVALID;
input   m_axi_DATA_START_AWREADY;
output  [C_M_AXI_DATA_START_ADDR_WIDTH - 1:0] m_axi_DATA_START_AWADDR;
output  [C_M_AXI_DATA_START_ID_WIDTH - 1:0] m_axi_DATA_START_AWID;
output  [7:0] m_axi_DATA_START_AWLEN;
output  [2:0] m_axi_DATA_START_AWSIZE;
output  [1:0] m_axi_DATA_START_AWBURST;
output  [1:0] m_axi_DATA_START_AWLOCK;
output  [3:0] m_axi_DATA_START_AWCACHE;
output  [2:0] m_axi_DATA_START_AWPROT;
output  [3:0] m_axi_DATA_START_AWQOS;
output  [3:0] m_axi_DATA_START_AWREGION;
output  [C_M_AXI_DATA_START_AWUSER_WIDTH - 1:0] m_axi_DATA_START_AWUSER;
output   m_axi_DATA_START_WVALID;
input   m_axi_DATA_START_WREADY;
output  [C_M_AXI_DATA_START_DATA_WIDTH - 1:0] m_axi_DATA_START_WDATA;
output  [C_M_AXI_DATA_START_WSTRB_WIDTH - 1:0] m_axi_DATA_START_WSTRB;
output   m_axi_DATA_START_WLAST;
output  [C_M_AXI_DATA_START_ID_WIDTH - 1:0] m_axi_DATA_START_WID;
output  [C_M_AXI_DATA_START_WUSER_WIDTH - 1:0] m_axi_DATA_START_WUSER;
output   m_axi_DATA_START_ARVALID;
input   m_axi_DATA_START_ARREADY;
output  [C_M_AXI_DATA_START_ADDR_WIDTH - 1:0] m_axi_DATA_START_ARADDR;
output  [C_M_AXI_DATA_START_ID_WIDTH - 1:0] m_axi_DATA_START_ARID;
output  [7:0] m_axi_DATA_START_ARLEN;
output  [2:0] m_axi_DATA_START_ARSIZE;
output  [1:0] m_axi_DATA_START_ARBURST;
output  [1:0] m_axi_DATA_START_ARLOCK;
output  [3:0] m_axi_DATA_START_ARCACHE;
output  [2:0] m_axi_DATA_START_ARPROT;
output  [3:0] m_axi_DATA_START_ARQOS;
output  [3:0] m_axi_DATA_START_ARREGION;
output  [C_M_AXI_DATA_START_ARUSER_WIDTH - 1:0] m_axi_DATA_START_ARUSER;
input   m_axi_DATA_START_RVALID;
output   m_axi_DATA_START_RREADY;
input  [C_M_AXI_DATA_START_DATA_WIDTH - 1:0] m_axi_DATA_START_RDATA;
input   m_axi_DATA_START_RLAST;
input  [C_M_AXI_DATA_START_ID_WIDTH - 1:0] m_axi_DATA_START_RID;
input  [C_M_AXI_DATA_START_RUSER_WIDTH - 1:0] m_axi_DATA_START_RUSER;
input  [1:0] m_axi_DATA_START_RRESP;
input   m_axi_DATA_START_BVALID;
output   m_axi_DATA_START_BREADY;
input  [1:0] m_axi_DATA_START_BRESP;
input  [C_M_AXI_DATA_START_ID_WIDTH - 1:0] m_axi_DATA_START_BID;
input  [C_M_AXI_DATA_START_BUSER_WIDTH - 1:0] m_axi_DATA_START_BUSER;
output  [10:0] fc6_w_i_address0;
output   fc6_w_i_ce0;
input  [31:0] fc6_w_i_q0;
output  [3:0] fc6_b_i_address0;
output   fc6_b_i_ce0;
input  [31:0] fc6_b_i_q0;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fc6_w_i_ce0;
reg fc6_b_i_ce0;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [93:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] image_in_i;
wire   [31:0] c1_w_i;
wire   [31:0] c1_b_i;
wire   [31:0] c3_w_i;
wire   [31:0] c3_b_i;
wire   [31:0] c5_w_i;
wire   [31:0] c5_b_i;
wire   [31:0] fc6_o_o;
wire   [31:0] done;
wire   [31:0] start;
reg   [12:0] c1_o_1_address0;
reg    c1_o_1_ce0;
reg    c1_o_1_we0;
wire   [31:0] c1_o_1_q0;
reg   [12:0] c1_o_2_address0;
reg    c1_o_2_ce0;
reg    c1_o_2_we0;
wire   [31:0] c1_o_2_d0;
wire   [31:0] c1_o_2_q0;
reg   [10:0] p2_o_1_address0;
reg    p2_o_1_ce0;
reg    p2_o_1_we0;
wire   [31:0] p2_o_1_q0;
reg   [10:0] p2_o_2_address0;
reg    p2_o_2_ce0;
reg    p2_o_2_we0;
wire   [31:0] p2_o_2_d0;
wire   [31:0] p2_o_2_q0;
reg   [10:0] c3_o_1_address0;
reg    c3_o_1_ce0;
reg    c3_o_1_we0;
wire   [31:0] c3_o_1_q0;
reg   [10:0] c3_o_2_address0;
reg    c3_o_2_ce0;
reg    c3_o_2_we0;
wire   [31:0] c3_o_2_d0;
wire   [31:0] c3_o_2_q0;
reg   [8:0] p4_o_1_address0;
reg    p4_o_1_ce0;
reg    p4_o_1_we0;
wire   [31:0] p4_o_1_q0;
reg   [8:0] p4_o_2_address0;
reg    p4_o_2_ce0;
reg    p4_o_2_we0;
wire   [31:0] p4_o_2_d0;
wire   [31:0] p4_o_2_q0;
reg   [6:0] c5_o_1_0_0_address0;
reg    c5_o_1_0_0_ce0;
reg    c5_o_1_0_0_we0;
wire   [31:0] c5_o_1_0_0_q0;
reg   [6:0] c5_o_2_0_0_address0;
reg    c5_o_2_0_0_ce0;
reg    c5_o_2_0_0_we0;
wire   [31:0] c5_o_2_0_0_d0;
wire   [31:0] c5_o_2_0_0_q0;
reg   [3:0] fc6_o_address0;
reg    fc6_o_ce0;
reg    fc6_o_we0;
wire   [31:0] fc6_o_q0;
reg    DATA_DONE_blk_n_AW;
wire    ap_CS_fsm_state88;
reg    DATA_DONE_blk_n_W;
wire    ap_CS_fsm_state89;
reg    DATA_DONE_blk_n_B;
wire    ap_CS_fsm_state94;
reg    DATA_START_blk_n_AR;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_17_fu_2016_p2;
reg    DATA_START_blk_n_R;
wire    ap_CS_fsm_state27;
wire    DATA_IMAGE_IN_I_AWREADY;
wire    DATA_IMAGE_IN_I_WREADY;
reg    DATA_IMAGE_IN_I_ARVALID;
wire    DATA_IMAGE_IN_I_ARREADY;
wire    DATA_IMAGE_IN_I_RVALID;
reg    DATA_IMAGE_IN_I_RREADY;
wire   [31:0] DATA_IMAGE_IN_I_RDATA;
wire    DATA_IMAGE_IN_I_RLAST;
wire   [0:0] DATA_IMAGE_IN_I_RID;
wire   [0:0] DATA_IMAGE_IN_I_RUSER;
wire   [1:0] DATA_IMAGE_IN_I_RRESP;
wire    DATA_IMAGE_IN_I_BVALID;
wire   [1:0] DATA_IMAGE_IN_I_BRESP;
wire   [0:0] DATA_IMAGE_IN_I_BID;
wire   [0:0] DATA_IMAGE_IN_I_BUSER;
wire    DATA_C1_W_I_AWREADY;
wire    DATA_C1_W_I_WREADY;
reg    DATA_C1_W_I_ARVALID;
wire    DATA_C1_W_I_ARREADY;
wire    DATA_C1_W_I_RVALID;
reg    DATA_C1_W_I_RREADY;
wire   [31:0] DATA_C1_W_I_RDATA;
wire    DATA_C1_W_I_RLAST;
wire   [0:0] DATA_C1_W_I_RID;
wire   [0:0] DATA_C1_W_I_RUSER;
wire   [1:0] DATA_C1_W_I_RRESP;
wire    DATA_C1_W_I_BVALID;
wire   [1:0] DATA_C1_W_I_BRESP;
wire   [0:0] DATA_C1_W_I_BID;
wire   [0:0] DATA_C1_W_I_BUSER;
wire    DATA_C1_B_I_AWREADY;
wire    DATA_C1_B_I_WREADY;
reg    DATA_C1_B_I_ARVALID;
wire    DATA_C1_B_I_ARREADY;
wire    DATA_C1_B_I_RVALID;
reg    DATA_C1_B_I_RREADY;
wire   [31:0] DATA_C1_B_I_RDATA;
wire    DATA_C1_B_I_RLAST;
wire   [0:0] DATA_C1_B_I_RID;
wire   [0:0] DATA_C1_B_I_RUSER;
wire   [1:0] DATA_C1_B_I_RRESP;
wire    DATA_C1_B_I_BVALID;
wire   [1:0] DATA_C1_B_I_BRESP;
wire   [0:0] DATA_C1_B_I_BID;
wire   [0:0] DATA_C1_B_I_BUSER;
wire    DATA_C3_W_I_AWREADY;
wire    DATA_C3_W_I_WREADY;
reg    DATA_C3_W_I_ARVALID;
wire    DATA_C3_W_I_ARREADY;
wire    DATA_C3_W_I_RVALID;
reg    DATA_C3_W_I_RREADY;
wire   [31:0] DATA_C3_W_I_RDATA;
wire    DATA_C3_W_I_RLAST;
wire   [0:0] DATA_C3_W_I_RID;
wire   [0:0] DATA_C3_W_I_RUSER;
wire   [1:0] DATA_C3_W_I_RRESP;
wire    DATA_C3_W_I_BVALID;
wire   [1:0] DATA_C3_W_I_BRESP;
wire   [0:0] DATA_C3_W_I_BID;
wire   [0:0] DATA_C3_W_I_BUSER;
wire    DATA_C3_B_I_AWREADY;
wire    DATA_C3_B_I_WREADY;
reg    DATA_C3_B_I_ARVALID;
wire    DATA_C3_B_I_ARREADY;
wire    DATA_C3_B_I_RVALID;
reg    DATA_C3_B_I_RREADY;
wire   [31:0] DATA_C3_B_I_RDATA;
wire    DATA_C3_B_I_RLAST;
wire   [0:0] DATA_C3_B_I_RID;
wire   [0:0] DATA_C3_B_I_RUSER;
wire   [1:0] DATA_C3_B_I_RRESP;
wire    DATA_C3_B_I_BVALID;
wire   [1:0] DATA_C3_B_I_BRESP;
wire   [0:0] DATA_C3_B_I_BID;
wire   [0:0] DATA_C3_B_I_BUSER;
wire    DATA_FC6_W_I_AWREADY;
wire    DATA_FC6_W_I_WREADY;
reg    DATA_FC6_W_I_ARVALID;
wire    DATA_FC6_W_I_ARREADY;
wire    DATA_FC6_W_I_RVALID;
reg    DATA_FC6_W_I_RREADY;
wire   [31:0] DATA_FC6_W_I_RDATA;
wire    DATA_FC6_W_I_RLAST;
wire   [0:0] DATA_FC6_W_I_RID;
wire   [0:0] DATA_FC6_W_I_RUSER;
wire   [1:0] DATA_FC6_W_I_RRESP;
wire    DATA_FC6_W_I_BVALID;
wire   [1:0] DATA_FC6_W_I_BRESP;
wire   [0:0] DATA_FC6_W_I_BID;
wire   [0:0] DATA_FC6_W_I_BUSER;
wire    DATA_FC6_B_I_AWREADY;
wire    DATA_FC6_B_I_WREADY;
reg    DATA_FC6_B_I_ARVALID;
wire    DATA_FC6_B_I_ARREADY;
wire    DATA_FC6_B_I_RVALID;
reg    DATA_FC6_B_I_RREADY;
wire   [31:0] DATA_FC6_B_I_RDATA;
wire    DATA_FC6_B_I_RLAST;
wire   [0:0] DATA_FC6_B_I_RID;
wire   [0:0] DATA_FC6_B_I_RUSER;
wire   [1:0] DATA_FC6_B_I_RRESP;
wire    DATA_FC6_B_I_BVALID;
wire   [1:0] DATA_FC6_B_I_BRESP;
wire   [0:0] DATA_FC6_B_I_BID;
wire   [0:0] DATA_FC6_B_I_BUSER;
reg    DATA_FC6_O_O_AWVALID;
wire    DATA_FC6_O_O_AWREADY;
reg    DATA_FC6_O_O_WVALID;
wire    DATA_FC6_O_O_WREADY;
wire    DATA_FC6_O_O_ARREADY;
wire    DATA_FC6_O_O_RVALID;
wire   [31:0] DATA_FC6_O_O_RDATA;
wire    DATA_FC6_O_O_RLAST;
wire   [0:0] DATA_FC6_O_O_RID;
wire   [0:0] DATA_FC6_O_O_RUSER;
wire   [1:0] DATA_FC6_O_O_RRESP;
wire    DATA_FC6_O_O_BVALID;
reg    DATA_FC6_O_O_BREADY;
wire   [1:0] DATA_FC6_O_O_BRESP;
wire   [0:0] DATA_FC6_O_O_BID;
wire   [0:0] DATA_FC6_O_O_BUSER;
reg    DATA_DONE_AWVALID;
wire    DATA_DONE_AWREADY;
reg    DATA_DONE_WVALID;
wire    DATA_DONE_WREADY;
wire    DATA_DONE_ARREADY;
wire    DATA_DONE_RVALID;
wire   [31:0] DATA_DONE_RDATA;
wire    DATA_DONE_RLAST;
wire   [0:0] DATA_DONE_RID;
wire   [0:0] DATA_DONE_RUSER;
wire   [1:0] DATA_DONE_RRESP;
wire    DATA_DONE_BVALID;
reg    DATA_DONE_BREADY;
wire   [1:0] DATA_DONE_BRESP;
wire   [0:0] DATA_DONE_BID;
wire   [0:0] DATA_DONE_BUSER;
wire    DATA_START_AWREADY;
wire    DATA_START_WREADY;
reg    DATA_START_ARVALID;
wire    DATA_START_ARREADY;
wire    DATA_START_RVALID;
reg    DATA_START_RREADY;
wire   [31:0] DATA_START_RDATA;
wire    DATA_START_RLAST;
wire   [0:0] DATA_START_RID;
wire   [0:0] DATA_START_RUSER;
wire   [1:0] DATA_START_RRESP;
wire    DATA_START_BVALID;
wire   [1:0] DATA_START_BRESP;
wire   [0:0] DATA_START_BID;
wire   [0:0] DATA_START_BUSER;
reg   [31:0] DATA_START_addr_reg_2925;
reg   [31:0] DATA_DONE_addr_reg_2931;
reg   [29:0] fc6_o_o1_reg_2936;
reg   [29:0] c5_b_i1_reg_2941;
reg   [29:0] c5_w_i1_reg_2946;
reg   [29:0] c3_b_i9_reg_2951;
reg   [29:0] c3_w_i7_reg_2956;
reg   [29:0] c1_b_i5_reg_2961;
reg   [29:0] c1_w_i3_reg_2966;
reg   [29:0] image_in_i1_reg_2971;
wire   [4:0] indvarinc4_fu_1477_p2;
reg   [4:0] indvarinc4_reg_2976;
wire    ap_CS_fsm_state2;
wire   [4:0] indvarinc8_fu_1496_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_52_fu_1530_p2;
reg   [31:0] tmp_52_reg_2992;
wire    ap_CS_fsm_state4;
wire   [2:0] indvarinc1_fu_1536_p2;
reg   [2:0] indvarinc1_reg_2997;
wire   [8:0] tmp_56_fu_1567_p2;
reg   [8:0] tmp_56_reg_3002;
wire    ap_CS_fsm_state5;
wire   [2:0] indvarinc3_fu_1573_p2;
reg   [2:0] indvarinc3_reg_3007;
wire   [2:0] indvarinc5_fu_1593_p2;
wire    ap_CS_fsm_state6;
wire   [2:0] indvarinc6_fu_1622_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_60_fu_1658_p2;
reg   [31:0] tmp_60_reg_3034;
wire    ap_CS_fsm_state8;
wire   [3:0] indvarinc7_fu_1664_p2;
reg   [3:0] indvarinc7_reg_3039;
wire   [31:0] tmp_63_fu_1685_p2;
reg   [31:0] tmp_63_reg_3044;
wire    ap_CS_fsm_state9;
wire   [2:0] indvarinc9_fu_1691_p2;
reg   [2:0] indvarinc9_reg_3049;
wire   [12:0] tmp_67_fu_1722_p2;
reg   [12:0] tmp_67_reg_3054;
wire    ap_CS_fsm_state10;
wire   [2:0] indvarinc_fu_1728_p2;
reg   [2:0] indvarinc_reg_3059;
wire   [2:0] indvarinc2_fu_1748_p2;
wire    ap_CS_fsm_state11;
wire   [3:0] indvarinc10_fu_1783_p2;
wire    ap_CS_fsm_state12;
wire   [6:0] indvarinc11_fu_1795_p2;
reg   [6:0] indvarinc11_reg_3089;
wire    ap_CS_fsm_state13;
wire   [31:0] tmp_72_fu_1827_p2;
reg   [31:0] tmp_72_reg_3094;
wire    ap_CS_fsm_state14;
wire   [3:0] indvarinc12_fu_1833_p2;
reg   [3:0] indvarinc12_reg_3099;
wire   [16:0] tmp_76_fu_1864_p2;
reg   [16:0] tmp_76_reg_3104;
wire    ap_CS_fsm_state15;
wire   [2:0] indvarinc13_fu_1870_p2;
reg   [2:0] indvarinc13_reg_3109;
wire   [2:0] indvarinc14_fu_1890_p2;
wire    ap_CS_fsm_state16;
wire   [6:0] indvarinc15_fu_1925_p2;
wire    ap_CS_fsm_state17;
wire   [11:0] tmp_80_fu_1961_p2;
reg   [11:0] tmp_80_reg_3139;
wire    ap_CS_fsm_state18;
wire   [3:0] indvarinc16_fu_1967_p2;
reg   [3:0] indvarinc16_reg_3144;
wire   [6:0] indvarinc17_fu_1987_p2;
wire    ap_CS_fsm_state19;
wire   [3:0] indvarinc18_fu_2010_p2;
reg    ap_sig_ioackin_DATA_START_ARREADY;
reg    ap_block_state20_io;
reg   [31:0] DATA_START_addr_read_reg_3168;
wire   [0:0] tmp_18_fu_2022_p2;
reg   [0:0] tmp_18_reg_3173;
wire    ap_CS_fsm_state28;
wire   [11:0] tmp_84_fu_2051_p2;
reg   [11:0] tmp_84_reg_3177;
wire    ap_CS_fsm_state30;
wire   [6:0] i_3_fu_2063_p2;
reg   [6:0] i_3_reg_3185;
wire   [11:0] tmp_85_fu_2073_p2;
reg   [11:0] tmp_85_reg_3190;
wire    ap_CS_fsm_state31;
reg   [10:0] fc6_w_0_0_addr_1_reg_3195;
wire   [3:0] j_fu_2089_p2;
reg   [3:0] j_reg_3203;
wire    ap_CS_fsm_state32;
wire   [31:0] i_i1_cast_fu_2109_p1;
reg   [31:0] i_i1_cast_reg_3213;
wire    ap_CS_fsm_state34;
wire   [3:0] i_fu_2120_p2;
reg   [3:0] i_reg_3221;
wire   [0:0] exitcond_i1_fu_2114_p2;
wire  signed [9:0] tmp_92_cast_fu_2156_p1;
reg  signed [9:0] tmp_92_cast_reg_3231;
wire    ap_CS_fsm_state37;
wire   [2:0] i_4_fu_2166_p2;
reg   [2:0] i_4_reg_3239;
wire   [13:0] tmp_96_fu_2205_p2;
reg   [13:0] tmp_96_reg_3244;
wire    ap_CS_fsm_state38;
wire   [4:0] j_3_fu_2217_p2;
reg   [4:0] j_3_reg_3252;
wire    ap_CS_fsm_state39;
reg   [12:0] c1_o_2_addr_reg_3262;
wire   [4:0] k_fu_2244_p2;
reg   [4:0] k_reg_3270;
reg   [31:0] c1_o_1_load_reg_3275;
wire    ap_CS_fsm_state40;
wire   [0:0] grp_fu_1332_p2;
reg   [0:0] tmp_24_reg_3282;
wire    ap_CS_fsm_state41;
wire  signed [8:0] tmp_96_cast_fu_2328_p1;
reg  signed [8:0] tmp_96_cast_reg_3287;
wire    ap_CS_fsm_state44;
wire   [2:0] i_5_fu_2338_p2;
reg   [2:0] i_5_reg_3295;
wire   [11:0] tmp_103_fu_2377_p2;
reg   [11:0] tmp_103_reg_3300;
wire    ap_CS_fsm_state45;
wire   [3:0] j_4_fu_2389_p2;
reg   [3:0] j_4_reg_3308;
reg   [10:0] p2_o_2_addr_reg_3313;
wire    ap_CS_fsm_state46;
wire   [3:0] k_1_fu_2416_p2;
reg   [3:0] k_1_reg_3326;
reg   [31:0] p2_o_1_load_reg_3331;
wire    ap_CS_fsm_state47;
reg   [0:0] tmp_29_reg_3338;
wire    ap_CS_fsm_state48;
wire   [8:0] tmp_99_fu_2494_p2;
reg   [8:0] tmp_99_reg_3343;
wire    ap_CS_fsm_state51;
wire   [4:0] i_6_fu_2506_p2;
reg   [4:0] i_6_reg_3351;
wire   [11:0] tmp_110_fu_2541_p2;
reg   [11:0] tmp_110_reg_3356;
wire    ap_CS_fsm_state52;
wire   [3:0] j_5_fu_2553_p2;
reg   [3:0] j_5_reg_3364;
reg   [10:0] c3_o_2_addr_reg_3369;
wire    ap_CS_fsm_state53;
wire   [3:0] k_2_fu_2580_p2;
reg   [3:0] k_2_reg_3382;
reg   [31:0] c3_o_1_load_reg_3387;
wire    ap_CS_fsm_state54;
reg   [0:0] tmp_39_reg_3394;
wire    ap_CS_fsm_state55;
wire   [7:0] tmp_107_fu_2650_p2;
reg   [7:0] tmp_107_reg_3399;
wire    ap_CS_fsm_state58;
wire   [4:0] i_8_fu_2662_p2;
reg   [4:0] i_8_reg_3407;
wire   [9:0] tmp_114_fu_2689_p2;
reg   [9:0] tmp_114_reg_3412;
wire    ap_CS_fsm_state59;
wire   [2:0] j_6_fu_2701_p2;
reg   [2:0] j_6_reg_3420;
reg   [8:0] p4_o_2_addr_reg_3425;
wire    ap_CS_fsm_state60;
wire   [2:0] k_3_fu_2728_p2;
reg   [2:0] k_3_reg_3438;
reg   [31:0] p4_o_1_load_reg_3443;
wire    ap_CS_fsm_state61;
reg   [0:0] tmp_44_reg_3450;
wire    ap_CS_fsm_state62;
wire   [31:0] i_i6_cast3_fu_2782_p1;
reg   [31:0] i_i6_cast3_reg_3455;
wire    ap_CS_fsm_state65;
wire   [6:0] i_7_fu_2793_p2;
reg   [6:0] i_7_reg_3463;
wire   [0:0] exitcond_i4_fu_2787_p2;
reg   [31:0] c5_o_1_0_0_load_reg_3473;
wire    ap_CS_fsm_state66;
reg   [0:0] tmp_34_reg_3480;
wire    ap_CS_fsm_state67;
wire   [31:0] n_i_cast2_fu_2847_p1;
reg   [31:0] n_i_cast2_reg_3485;
wire    ap_CS_fsm_state69;
wire   [11:0] tmp_120_fu_2876_p2;
reg   [11:0] tmp_120_reg_3490;
wire   [3:0] n_fu_2888_p2;
reg   [3:0] n_reg_3498;
reg   [3:0] fc6_o_addr_reg_3503;
wire   [0:0] exitcond1_i4_fu_2882_p2;
wire    ap_CS_fsm_state70;
wire   [6:0] c_fu_2919_p2;
reg   [6:0] c_reg_3516;
wire   [0:0] exitcond_i7_fu_2913_p2;
wire   [31:0] fc6_w_0_0_q0;
reg   [31:0] fc6_w_0_0_load_reg_3531;
wire    ap_CS_fsm_state71;
reg   [31:0] c5_o_2_0_0_load_reg_3536;
wire   [31:0] grp_fu_1328_p2;
reg   [31:0] tmp_19_i_reg_3541;
wire    ap_CS_fsm_state75;
wire   [31:0] grp_fu_1323_p2;
wire    ap_CS_fsm_state80;
wire   [31:0] fc6_b_q0;
reg   [31:0] fc6_b_load_reg_3551;
wire    ap_CS_fsm_state81;
reg   [31:0] tmp_i_66_reg_3556;
wire    ap_CS_fsm_state86;
reg   [9:0] image_in_0_address0;
reg    image_in_0_ce0;
reg    image_in_0_we0;
reg   [31:0] image_in_0_d0;
wire   [31:0] image_in_0_q0;
reg   [7:0] c1_w_0_address0;
reg    c1_w_0_ce0;
reg    c1_w_0_we0;
reg   [31:0] c1_w_0_d0;
wire   [31:0] c1_w_0_q0;
reg   [2:0] c1_b_address0;
reg    c1_b_ce0;
reg    c1_b_we0;
reg   [31:0] c1_b_d0;
wire   [31:0] c1_b_q0;
reg   [11:0] c3_w_address0;
reg    c3_w_ce0;
reg    c3_w_we0;
reg   [31:0] c3_w_d0;
wire   [31:0] c3_w_q0;
reg   [3:0] c3_b_address0;
reg    c3_b_ce0;
reg    c3_b_we0;
reg   [31:0] c3_b_d0;
wire   [31:0] c3_b_q0;
reg   [15:0] c5_w_address0;
reg    c5_w_ce0;
reg    c5_w_we0;
reg   [31:0] c5_w_d0;
wire   [31:0] c5_w_q0;
reg   [6:0] c5_b_address0;
reg    c5_b_ce0;
reg    c5_b_we0;
reg   [31:0] c5_b_d0;
wire   [31:0] c5_b_q0;
reg   [10:0] fc6_w_0_0_address0;
reg    fc6_w_0_0_ce0;
reg    fc6_w_0_0_we0;
reg   [31:0] fc6_w_0_0_d0;
reg   [3:0] fc6_b_address0;
reg    fc6_b_ce0;
reg    fc6_b_we0;
reg   [31:0] fc6_b_d0;
wire    grp_convolution3_fu_1213_ap_start;
wire    grp_convolution3_fu_1213_ap_done;
wire    grp_convolution3_fu_1213_ap_idle;
wire    grp_convolution3_fu_1213_ap_ready;
wire   [11:0] grp_convolution3_fu_1213_conv3_w_address0;
wire    grp_convolution3_fu_1213_conv3_w_ce0;
wire   [3:0] grp_convolution3_fu_1213_conv3_b_address0;
wire    grp_convolution3_fu_1213_conv3_b_ce0;
wire   [10:0] grp_convolution3_fu_1213_output_r_address0;
wire    grp_convolution3_fu_1213_output_r_ce0;
wire    grp_convolution3_fu_1213_output_r_we0;
wire   [31:0] grp_convolution3_fu_1213_output_r_d0;
wire   [10:0] grp_convolution3_fu_1213_p2_o_2_address0;
wire    grp_convolution3_fu_1213_p2_o_2_ce0;
wire    grp_convolution1_fu_1223_ap_start;
wire    grp_convolution1_fu_1223_ap_done;
wire    grp_convolution1_fu_1223_ap_idle;
wire    grp_convolution1_fu_1223_ap_ready;
wire   [9:0] grp_convolution1_fu_1223_input_0_address0;
wire    grp_convolution1_fu_1223_input_0_ce0;
wire   [7:0] grp_convolution1_fu_1223_conv1_w_0_address0;
wire    grp_convolution1_fu_1223_conv1_w_0_ce0;
wire   [2:0] grp_convolution1_fu_1223_conv1_b_address0;
wire    grp_convolution1_fu_1223_conv1_b_ce0;
wire   [12:0] grp_convolution1_fu_1223_output_r_address0;
wire    grp_convolution1_fu_1223_output_r_ce0;
wire    grp_convolution1_fu_1223_output_r_we0;
wire   [31:0] grp_convolution1_fu_1223_output_r_d0;
wire    grp_convolution5_fu_1232_ap_start;
wire    grp_convolution5_fu_1232_ap_done;
wire    grp_convolution5_fu_1232_ap_idle;
wire    grp_convolution5_fu_1232_ap_ready;
wire   [15:0] grp_convolution5_fu_1232_conv5_w_address0;
wire    grp_convolution5_fu_1232_conv5_w_ce0;
wire   [6:0] grp_convolution5_fu_1232_conv5_b_address0;
wire    grp_convolution5_fu_1232_conv5_b_ce0;
wire   [6:0] grp_convolution5_fu_1232_output_0_0_address0;
wire    grp_convolution5_fu_1232_output_0_0_ce0;
wire    grp_convolution5_fu_1232_output_0_0_we0;
wire   [31:0] grp_convolution5_fu_1232_output_0_0_d0;
wire   [8:0] grp_convolution5_fu_1232_p4_o_2_address0;
wire    grp_convolution5_fu_1232_p4_o_2_ce0;
wire    grp_max_pooling2_fu_1242_ap_start;
wire    grp_max_pooling2_fu_1242_ap_done;
wire    grp_max_pooling2_fu_1242_ap_idle;
wire    grp_max_pooling2_fu_1242_ap_ready;
wire   [10:0] grp_max_pooling2_fu_1242_output_r_address0;
wire    grp_max_pooling2_fu_1242_output_r_ce0;
wire    grp_max_pooling2_fu_1242_output_r_we0;
wire   [31:0] grp_max_pooling2_fu_1242_output_r_d0;
wire   [12:0] grp_max_pooling2_fu_1242_c1_o_2_address0;
wire    grp_max_pooling2_fu_1242_c1_o_2_ce0;
wire    grp_max_pooling4_fu_1250_ap_start;
wire    grp_max_pooling4_fu_1250_ap_done;
wire    grp_max_pooling4_fu_1250_ap_idle;
wire    grp_max_pooling4_fu_1250_ap_ready;
wire   [8:0] grp_max_pooling4_fu_1250_output_r_address0;
wire    grp_max_pooling4_fu_1250_output_r_ce0;
wire    grp_max_pooling4_fu_1250_output_r_we0;
wire   [31:0] grp_max_pooling4_fu_1250_output_r_d0;
wire   [10:0] grp_max_pooling4_fu_1250_c3_o_2_address0;
wire    grp_max_pooling4_fu_1250_c3_o_2_ce0;
wire    grp_copy_w5_fu_1258_ap_start;
wire    grp_copy_w5_fu_1258_ap_done;
wire    grp_copy_w5_fu_1258_ap_idle;
wire    grp_copy_w5_fu_1258_ap_ready;
wire    grp_copy_w5_fu_1258_m_axi_in_r_AWVALID;
wire   [31:0] grp_copy_w5_fu_1258_m_axi_in_r_AWADDR;
wire   [0:0] grp_copy_w5_fu_1258_m_axi_in_r_AWID;
wire   [31:0] grp_copy_w5_fu_1258_m_axi_in_r_AWLEN;
wire   [2:0] grp_copy_w5_fu_1258_m_axi_in_r_AWSIZE;
wire   [1:0] grp_copy_w5_fu_1258_m_axi_in_r_AWBURST;
wire   [1:0] grp_copy_w5_fu_1258_m_axi_in_r_AWLOCK;
wire   [3:0] grp_copy_w5_fu_1258_m_axi_in_r_AWCACHE;
wire   [2:0] grp_copy_w5_fu_1258_m_axi_in_r_AWPROT;
wire   [3:0] grp_copy_w5_fu_1258_m_axi_in_r_AWQOS;
wire   [3:0] grp_copy_w5_fu_1258_m_axi_in_r_AWREGION;
wire   [0:0] grp_copy_w5_fu_1258_m_axi_in_r_AWUSER;
wire    grp_copy_w5_fu_1258_m_axi_in_r_WVALID;
wire   [31:0] grp_copy_w5_fu_1258_m_axi_in_r_WDATA;
wire   [3:0] grp_copy_w5_fu_1258_m_axi_in_r_WSTRB;
wire    grp_copy_w5_fu_1258_m_axi_in_r_WLAST;
wire   [0:0] grp_copy_w5_fu_1258_m_axi_in_r_WID;
wire   [0:0] grp_copy_w5_fu_1258_m_axi_in_r_WUSER;
wire    grp_copy_w5_fu_1258_m_axi_in_r_ARVALID;
wire   [31:0] grp_copy_w5_fu_1258_m_axi_in_r_ARADDR;
wire   [0:0] grp_copy_w5_fu_1258_m_axi_in_r_ARID;
wire   [31:0] grp_copy_w5_fu_1258_m_axi_in_r_ARLEN;
wire   [2:0] grp_copy_w5_fu_1258_m_axi_in_r_ARSIZE;
wire   [1:0] grp_copy_w5_fu_1258_m_axi_in_r_ARBURST;
wire   [1:0] grp_copy_w5_fu_1258_m_axi_in_r_ARLOCK;
wire   [3:0] grp_copy_w5_fu_1258_m_axi_in_r_ARCACHE;
wire   [2:0] grp_copy_w5_fu_1258_m_axi_in_r_ARPROT;
wire   [3:0] grp_copy_w5_fu_1258_m_axi_in_r_ARQOS;
wire   [3:0] grp_copy_w5_fu_1258_m_axi_in_r_ARREGION;
wire   [0:0] grp_copy_w5_fu_1258_m_axi_in_r_ARUSER;
wire    grp_copy_w5_fu_1258_m_axi_in_r_RREADY;
wire    grp_copy_w5_fu_1258_m_axi_in_r_BREADY;
wire   [15:0] grp_copy_w5_fu_1258_out_r_address0;
wire    grp_copy_w5_fu_1258_out_r_ce0;
wire    grp_copy_w5_fu_1258_out_r_we0;
wire   [31:0] grp_copy_w5_fu_1258_out_r_d0;
wire    grp_copy_w3_fu_1266_ap_start;
wire    grp_copy_w3_fu_1266_ap_done;
wire    grp_copy_w3_fu_1266_ap_idle;
wire    grp_copy_w3_fu_1266_ap_ready;
wire    grp_copy_w3_fu_1266_m_axi_in_r_AWVALID;
wire   [31:0] grp_copy_w3_fu_1266_m_axi_in_r_AWADDR;
wire   [0:0] grp_copy_w3_fu_1266_m_axi_in_r_AWID;
wire   [31:0] grp_copy_w3_fu_1266_m_axi_in_r_AWLEN;
wire   [2:0] grp_copy_w3_fu_1266_m_axi_in_r_AWSIZE;
wire   [1:0] grp_copy_w3_fu_1266_m_axi_in_r_AWBURST;
wire   [1:0] grp_copy_w3_fu_1266_m_axi_in_r_AWLOCK;
wire   [3:0] grp_copy_w3_fu_1266_m_axi_in_r_AWCACHE;
wire   [2:0] grp_copy_w3_fu_1266_m_axi_in_r_AWPROT;
wire   [3:0] grp_copy_w3_fu_1266_m_axi_in_r_AWQOS;
wire   [3:0] grp_copy_w3_fu_1266_m_axi_in_r_AWREGION;
wire   [0:0] grp_copy_w3_fu_1266_m_axi_in_r_AWUSER;
wire    grp_copy_w3_fu_1266_m_axi_in_r_WVALID;
wire   [31:0] grp_copy_w3_fu_1266_m_axi_in_r_WDATA;
wire   [3:0] grp_copy_w3_fu_1266_m_axi_in_r_WSTRB;
wire    grp_copy_w3_fu_1266_m_axi_in_r_WLAST;
wire   [0:0] grp_copy_w3_fu_1266_m_axi_in_r_WID;
wire   [0:0] grp_copy_w3_fu_1266_m_axi_in_r_WUSER;
wire    grp_copy_w3_fu_1266_m_axi_in_r_ARVALID;
wire   [31:0] grp_copy_w3_fu_1266_m_axi_in_r_ARADDR;
wire   [0:0] grp_copy_w3_fu_1266_m_axi_in_r_ARID;
wire   [31:0] grp_copy_w3_fu_1266_m_axi_in_r_ARLEN;
wire   [2:0] grp_copy_w3_fu_1266_m_axi_in_r_ARSIZE;
wire   [1:0] grp_copy_w3_fu_1266_m_axi_in_r_ARBURST;
wire   [1:0] grp_copy_w3_fu_1266_m_axi_in_r_ARLOCK;
wire   [3:0] grp_copy_w3_fu_1266_m_axi_in_r_ARCACHE;
wire   [2:0] grp_copy_w3_fu_1266_m_axi_in_r_ARPROT;
wire   [3:0] grp_copy_w3_fu_1266_m_axi_in_r_ARQOS;
wire   [3:0] grp_copy_w3_fu_1266_m_axi_in_r_ARREGION;
wire   [0:0] grp_copy_w3_fu_1266_m_axi_in_r_ARUSER;
wire    grp_copy_w3_fu_1266_m_axi_in_r_RREADY;
wire    grp_copy_w3_fu_1266_m_axi_in_r_BREADY;
wire   [11:0] grp_copy_w3_fu_1266_out_r_address0;
wire    grp_copy_w3_fu_1266_out_r_ce0;
wire    grp_copy_w3_fu_1266_out_r_we0;
wire   [31:0] grp_copy_w3_fu_1266_out_r_d0;
wire    grp_copy_w1_fu_1274_ap_start;
wire    grp_copy_w1_fu_1274_ap_done;
wire    grp_copy_w1_fu_1274_ap_idle;
wire    grp_copy_w1_fu_1274_ap_ready;
wire    grp_copy_w1_fu_1274_m_axi_in_r_AWVALID;
wire   [31:0] grp_copy_w1_fu_1274_m_axi_in_r_AWADDR;
wire   [0:0] grp_copy_w1_fu_1274_m_axi_in_r_AWID;
wire   [31:0] grp_copy_w1_fu_1274_m_axi_in_r_AWLEN;
wire   [2:0] grp_copy_w1_fu_1274_m_axi_in_r_AWSIZE;
wire   [1:0] grp_copy_w1_fu_1274_m_axi_in_r_AWBURST;
wire   [1:0] grp_copy_w1_fu_1274_m_axi_in_r_AWLOCK;
wire   [3:0] grp_copy_w1_fu_1274_m_axi_in_r_AWCACHE;
wire   [2:0] grp_copy_w1_fu_1274_m_axi_in_r_AWPROT;
wire   [3:0] grp_copy_w1_fu_1274_m_axi_in_r_AWQOS;
wire   [3:0] grp_copy_w1_fu_1274_m_axi_in_r_AWREGION;
wire   [0:0] grp_copy_w1_fu_1274_m_axi_in_r_AWUSER;
wire    grp_copy_w1_fu_1274_m_axi_in_r_WVALID;
wire   [31:0] grp_copy_w1_fu_1274_m_axi_in_r_WDATA;
wire   [3:0] grp_copy_w1_fu_1274_m_axi_in_r_WSTRB;
wire    grp_copy_w1_fu_1274_m_axi_in_r_WLAST;
wire   [0:0] grp_copy_w1_fu_1274_m_axi_in_r_WID;
wire   [0:0] grp_copy_w1_fu_1274_m_axi_in_r_WUSER;
wire    grp_copy_w1_fu_1274_m_axi_in_r_ARVALID;
wire   [31:0] grp_copy_w1_fu_1274_m_axi_in_r_ARADDR;
wire   [0:0] grp_copy_w1_fu_1274_m_axi_in_r_ARID;
wire   [31:0] grp_copy_w1_fu_1274_m_axi_in_r_ARLEN;
wire   [2:0] grp_copy_w1_fu_1274_m_axi_in_r_ARSIZE;
wire   [1:0] grp_copy_w1_fu_1274_m_axi_in_r_ARBURST;
wire   [1:0] grp_copy_w1_fu_1274_m_axi_in_r_ARLOCK;
wire   [3:0] grp_copy_w1_fu_1274_m_axi_in_r_ARCACHE;
wire   [2:0] grp_copy_w1_fu_1274_m_axi_in_r_ARPROT;
wire   [3:0] grp_copy_w1_fu_1274_m_axi_in_r_ARQOS;
wire   [3:0] grp_copy_w1_fu_1274_m_axi_in_r_ARREGION;
wire   [0:0] grp_copy_w1_fu_1274_m_axi_in_r_ARUSER;
wire    grp_copy_w1_fu_1274_m_axi_in_r_RREADY;
wire    grp_copy_w1_fu_1274_m_axi_in_r_BREADY;
wire   [7:0] grp_copy_w1_fu_1274_out_0_address0;
wire    grp_copy_w1_fu_1274_out_0_ce0;
wire    grp_copy_w1_fu_1274_out_0_we0;
wire   [31:0] grp_copy_w1_fu_1274_out_0_d0;
wire    grp_copy_i_fu_1282_ap_start;
wire    grp_copy_i_fu_1282_ap_done;
wire    grp_copy_i_fu_1282_ap_idle;
wire    grp_copy_i_fu_1282_ap_ready;
wire    grp_copy_i_fu_1282_m_axi_in_r_AWVALID;
wire   [31:0] grp_copy_i_fu_1282_m_axi_in_r_AWADDR;
wire   [0:0] grp_copy_i_fu_1282_m_axi_in_r_AWID;
wire   [31:0] grp_copy_i_fu_1282_m_axi_in_r_AWLEN;
wire   [2:0] grp_copy_i_fu_1282_m_axi_in_r_AWSIZE;
wire   [1:0] grp_copy_i_fu_1282_m_axi_in_r_AWBURST;
wire   [1:0] grp_copy_i_fu_1282_m_axi_in_r_AWLOCK;
wire   [3:0] grp_copy_i_fu_1282_m_axi_in_r_AWCACHE;
wire   [2:0] grp_copy_i_fu_1282_m_axi_in_r_AWPROT;
wire   [3:0] grp_copy_i_fu_1282_m_axi_in_r_AWQOS;
wire   [3:0] grp_copy_i_fu_1282_m_axi_in_r_AWREGION;
wire   [0:0] grp_copy_i_fu_1282_m_axi_in_r_AWUSER;
wire    grp_copy_i_fu_1282_m_axi_in_r_WVALID;
wire   [31:0] grp_copy_i_fu_1282_m_axi_in_r_WDATA;
wire   [3:0] grp_copy_i_fu_1282_m_axi_in_r_WSTRB;
wire    grp_copy_i_fu_1282_m_axi_in_r_WLAST;
wire   [0:0] grp_copy_i_fu_1282_m_axi_in_r_WID;
wire   [0:0] grp_copy_i_fu_1282_m_axi_in_r_WUSER;
wire    grp_copy_i_fu_1282_m_axi_in_r_ARVALID;
wire   [31:0] grp_copy_i_fu_1282_m_axi_in_r_ARADDR;
wire   [0:0] grp_copy_i_fu_1282_m_axi_in_r_ARID;
wire   [31:0] grp_copy_i_fu_1282_m_axi_in_r_ARLEN;
wire   [2:0] grp_copy_i_fu_1282_m_axi_in_r_ARSIZE;
wire   [1:0] grp_copy_i_fu_1282_m_axi_in_r_ARBURST;
wire   [1:0] grp_copy_i_fu_1282_m_axi_in_r_ARLOCK;
wire   [3:0] grp_copy_i_fu_1282_m_axi_in_r_ARCACHE;
wire   [2:0] grp_copy_i_fu_1282_m_axi_in_r_ARPROT;
wire   [3:0] grp_copy_i_fu_1282_m_axi_in_r_ARQOS;
wire   [3:0] grp_copy_i_fu_1282_m_axi_in_r_ARREGION;
wire   [0:0] grp_copy_i_fu_1282_m_axi_in_r_ARUSER;
wire    grp_copy_i_fu_1282_m_axi_in_r_RREADY;
wire    grp_copy_i_fu_1282_m_axi_in_r_BREADY;
wire   [9:0] grp_copy_i_fu_1282_out_0_address0;
wire    grp_copy_i_fu_1282_out_0_ce0;
wire    grp_copy_i_fu_1282_out_0_we0;
wire   [31:0] grp_copy_i_fu_1282_out_0_d0;
wire    grp_copy_b5_fu_1290_ap_start;
wire    grp_copy_b5_fu_1290_ap_done;
wire    grp_copy_b5_fu_1290_ap_idle;
wire    grp_copy_b5_fu_1290_ap_ready;
wire    grp_copy_b5_fu_1290_m_axi_in_r_AWVALID;
wire   [31:0] grp_copy_b5_fu_1290_m_axi_in_r_AWADDR;
wire   [0:0] grp_copy_b5_fu_1290_m_axi_in_r_AWID;
wire   [31:0] grp_copy_b5_fu_1290_m_axi_in_r_AWLEN;
wire   [2:0] grp_copy_b5_fu_1290_m_axi_in_r_AWSIZE;
wire   [1:0] grp_copy_b5_fu_1290_m_axi_in_r_AWBURST;
wire   [1:0] grp_copy_b5_fu_1290_m_axi_in_r_AWLOCK;
wire   [3:0] grp_copy_b5_fu_1290_m_axi_in_r_AWCACHE;
wire   [2:0] grp_copy_b5_fu_1290_m_axi_in_r_AWPROT;
wire   [3:0] grp_copy_b5_fu_1290_m_axi_in_r_AWQOS;
wire   [3:0] grp_copy_b5_fu_1290_m_axi_in_r_AWREGION;
wire   [0:0] grp_copy_b5_fu_1290_m_axi_in_r_AWUSER;
wire    grp_copy_b5_fu_1290_m_axi_in_r_WVALID;
wire   [31:0] grp_copy_b5_fu_1290_m_axi_in_r_WDATA;
wire   [3:0] grp_copy_b5_fu_1290_m_axi_in_r_WSTRB;
wire    grp_copy_b5_fu_1290_m_axi_in_r_WLAST;
wire   [0:0] grp_copy_b5_fu_1290_m_axi_in_r_WID;
wire   [0:0] grp_copy_b5_fu_1290_m_axi_in_r_WUSER;
wire    grp_copy_b5_fu_1290_m_axi_in_r_ARVALID;
wire   [31:0] grp_copy_b5_fu_1290_m_axi_in_r_ARADDR;
wire   [0:0] grp_copy_b5_fu_1290_m_axi_in_r_ARID;
wire   [31:0] grp_copy_b5_fu_1290_m_axi_in_r_ARLEN;
wire   [2:0] grp_copy_b5_fu_1290_m_axi_in_r_ARSIZE;
wire   [1:0] grp_copy_b5_fu_1290_m_axi_in_r_ARBURST;
wire   [1:0] grp_copy_b5_fu_1290_m_axi_in_r_ARLOCK;
wire   [3:0] grp_copy_b5_fu_1290_m_axi_in_r_ARCACHE;
wire   [2:0] grp_copy_b5_fu_1290_m_axi_in_r_ARPROT;
wire   [3:0] grp_copy_b5_fu_1290_m_axi_in_r_ARQOS;
wire   [3:0] grp_copy_b5_fu_1290_m_axi_in_r_ARREGION;
wire   [0:0] grp_copy_b5_fu_1290_m_axi_in_r_ARUSER;
wire    grp_copy_b5_fu_1290_m_axi_in_r_RREADY;
wire    grp_copy_b5_fu_1290_m_axi_in_r_BREADY;
wire   [6:0] grp_copy_b5_fu_1290_out_r_address0;
wire    grp_copy_b5_fu_1290_out_r_ce0;
wire    grp_copy_b5_fu_1290_out_r_we0;
wire   [31:0] grp_copy_b5_fu_1290_out_r_d0;
wire    grp_copy_b3_fu_1298_ap_start;
wire    grp_copy_b3_fu_1298_ap_done;
wire    grp_copy_b3_fu_1298_ap_idle;
wire    grp_copy_b3_fu_1298_ap_ready;
wire    grp_copy_b3_fu_1298_m_axi_in_r_AWVALID;
wire   [31:0] grp_copy_b3_fu_1298_m_axi_in_r_AWADDR;
wire   [0:0] grp_copy_b3_fu_1298_m_axi_in_r_AWID;
wire   [31:0] grp_copy_b3_fu_1298_m_axi_in_r_AWLEN;
wire   [2:0] grp_copy_b3_fu_1298_m_axi_in_r_AWSIZE;
wire   [1:0] grp_copy_b3_fu_1298_m_axi_in_r_AWBURST;
wire   [1:0] grp_copy_b3_fu_1298_m_axi_in_r_AWLOCK;
wire   [3:0] grp_copy_b3_fu_1298_m_axi_in_r_AWCACHE;
wire   [2:0] grp_copy_b3_fu_1298_m_axi_in_r_AWPROT;
wire   [3:0] grp_copy_b3_fu_1298_m_axi_in_r_AWQOS;
wire   [3:0] grp_copy_b3_fu_1298_m_axi_in_r_AWREGION;
wire   [0:0] grp_copy_b3_fu_1298_m_axi_in_r_AWUSER;
wire    grp_copy_b3_fu_1298_m_axi_in_r_WVALID;
wire   [31:0] grp_copy_b3_fu_1298_m_axi_in_r_WDATA;
wire   [3:0] grp_copy_b3_fu_1298_m_axi_in_r_WSTRB;
wire    grp_copy_b3_fu_1298_m_axi_in_r_WLAST;
wire   [0:0] grp_copy_b3_fu_1298_m_axi_in_r_WID;
wire   [0:0] grp_copy_b3_fu_1298_m_axi_in_r_WUSER;
wire    grp_copy_b3_fu_1298_m_axi_in_r_ARVALID;
wire   [31:0] grp_copy_b3_fu_1298_m_axi_in_r_ARADDR;
wire   [0:0] grp_copy_b3_fu_1298_m_axi_in_r_ARID;
wire   [31:0] grp_copy_b3_fu_1298_m_axi_in_r_ARLEN;
wire   [2:0] grp_copy_b3_fu_1298_m_axi_in_r_ARSIZE;
wire   [1:0] grp_copy_b3_fu_1298_m_axi_in_r_ARBURST;
wire   [1:0] grp_copy_b3_fu_1298_m_axi_in_r_ARLOCK;
wire   [3:0] grp_copy_b3_fu_1298_m_axi_in_r_ARCACHE;
wire   [2:0] grp_copy_b3_fu_1298_m_axi_in_r_ARPROT;
wire   [3:0] grp_copy_b3_fu_1298_m_axi_in_r_ARQOS;
wire   [3:0] grp_copy_b3_fu_1298_m_axi_in_r_ARREGION;
wire   [0:0] grp_copy_b3_fu_1298_m_axi_in_r_ARUSER;
wire    grp_copy_b3_fu_1298_m_axi_in_r_RREADY;
wire    grp_copy_b3_fu_1298_m_axi_in_r_BREADY;
wire   [3:0] grp_copy_b3_fu_1298_out_r_address0;
wire    grp_copy_b3_fu_1298_out_r_ce0;
wire    grp_copy_b3_fu_1298_out_r_we0;
wire   [31:0] grp_copy_b3_fu_1298_out_r_d0;
wire    grp_copy_b1_fu_1306_ap_start;
wire    grp_copy_b1_fu_1306_ap_done;
wire    grp_copy_b1_fu_1306_ap_idle;
wire    grp_copy_b1_fu_1306_ap_ready;
wire    grp_copy_b1_fu_1306_m_axi_in_r_AWVALID;
wire   [31:0] grp_copy_b1_fu_1306_m_axi_in_r_AWADDR;
wire   [0:0] grp_copy_b1_fu_1306_m_axi_in_r_AWID;
wire   [31:0] grp_copy_b1_fu_1306_m_axi_in_r_AWLEN;
wire   [2:0] grp_copy_b1_fu_1306_m_axi_in_r_AWSIZE;
wire   [1:0] grp_copy_b1_fu_1306_m_axi_in_r_AWBURST;
wire   [1:0] grp_copy_b1_fu_1306_m_axi_in_r_AWLOCK;
wire   [3:0] grp_copy_b1_fu_1306_m_axi_in_r_AWCACHE;
wire   [2:0] grp_copy_b1_fu_1306_m_axi_in_r_AWPROT;
wire   [3:0] grp_copy_b1_fu_1306_m_axi_in_r_AWQOS;
wire   [3:0] grp_copy_b1_fu_1306_m_axi_in_r_AWREGION;
wire   [0:0] grp_copy_b1_fu_1306_m_axi_in_r_AWUSER;
wire    grp_copy_b1_fu_1306_m_axi_in_r_WVALID;
wire   [31:0] grp_copy_b1_fu_1306_m_axi_in_r_WDATA;
wire   [3:0] grp_copy_b1_fu_1306_m_axi_in_r_WSTRB;
wire    grp_copy_b1_fu_1306_m_axi_in_r_WLAST;
wire   [0:0] grp_copy_b1_fu_1306_m_axi_in_r_WID;
wire   [0:0] grp_copy_b1_fu_1306_m_axi_in_r_WUSER;
wire    grp_copy_b1_fu_1306_m_axi_in_r_ARVALID;
wire   [31:0] grp_copy_b1_fu_1306_m_axi_in_r_ARADDR;
wire   [0:0] grp_copy_b1_fu_1306_m_axi_in_r_ARID;
wire   [31:0] grp_copy_b1_fu_1306_m_axi_in_r_ARLEN;
wire   [2:0] grp_copy_b1_fu_1306_m_axi_in_r_ARSIZE;
wire   [1:0] grp_copy_b1_fu_1306_m_axi_in_r_ARBURST;
wire   [1:0] grp_copy_b1_fu_1306_m_axi_in_r_ARLOCK;
wire   [3:0] grp_copy_b1_fu_1306_m_axi_in_r_ARCACHE;
wire   [2:0] grp_copy_b1_fu_1306_m_axi_in_r_ARPROT;
wire   [3:0] grp_copy_b1_fu_1306_m_axi_in_r_ARQOS;
wire   [3:0] grp_copy_b1_fu_1306_m_axi_in_r_ARREGION;
wire   [0:0] grp_copy_b1_fu_1306_m_axi_in_r_ARUSER;
wire    grp_copy_b1_fu_1306_m_axi_in_r_RREADY;
wire    grp_copy_b1_fu_1306_m_axi_in_r_BREADY;
wire   [2:0] grp_copy_b1_fu_1306_out_r_address0;
wire    grp_copy_b1_fu_1306_out_r_ce0;
wire    grp_copy_b1_fu_1306_out_r_we0;
wire   [31:0] grp_copy_b1_fu_1306_out_r_d0;
wire    grp_copy_out_fu_1314_ap_start;
wire    grp_copy_out_fu_1314_ap_done;
wire    grp_copy_out_fu_1314_ap_idle;
wire    grp_copy_out_fu_1314_ap_ready;
wire    grp_copy_out_fu_1314_m_axi_out_r_AWVALID;
wire   [31:0] grp_copy_out_fu_1314_m_axi_out_r_AWADDR;
wire   [0:0] grp_copy_out_fu_1314_m_axi_out_r_AWID;
wire   [31:0] grp_copy_out_fu_1314_m_axi_out_r_AWLEN;
wire   [2:0] grp_copy_out_fu_1314_m_axi_out_r_AWSIZE;
wire   [1:0] grp_copy_out_fu_1314_m_axi_out_r_AWBURST;
wire   [1:0] grp_copy_out_fu_1314_m_axi_out_r_AWLOCK;
wire   [3:0] grp_copy_out_fu_1314_m_axi_out_r_AWCACHE;
wire   [2:0] grp_copy_out_fu_1314_m_axi_out_r_AWPROT;
wire   [3:0] grp_copy_out_fu_1314_m_axi_out_r_AWQOS;
wire   [3:0] grp_copy_out_fu_1314_m_axi_out_r_AWREGION;
wire   [0:0] grp_copy_out_fu_1314_m_axi_out_r_AWUSER;
wire    grp_copy_out_fu_1314_m_axi_out_r_WVALID;
wire   [31:0] grp_copy_out_fu_1314_m_axi_out_r_WDATA;
wire   [3:0] grp_copy_out_fu_1314_m_axi_out_r_WSTRB;
wire    grp_copy_out_fu_1314_m_axi_out_r_WLAST;
wire   [0:0] grp_copy_out_fu_1314_m_axi_out_r_WID;
wire   [0:0] grp_copy_out_fu_1314_m_axi_out_r_WUSER;
wire    grp_copy_out_fu_1314_m_axi_out_r_ARVALID;
wire   [31:0] grp_copy_out_fu_1314_m_axi_out_r_ARADDR;
wire   [0:0] grp_copy_out_fu_1314_m_axi_out_r_ARID;
wire   [31:0] grp_copy_out_fu_1314_m_axi_out_r_ARLEN;
wire   [2:0] grp_copy_out_fu_1314_m_axi_out_r_ARSIZE;
wire   [1:0] grp_copy_out_fu_1314_m_axi_out_r_ARBURST;
wire   [1:0] grp_copy_out_fu_1314_m_axi_out_r_ARLOCK;
wire   [3:0] grp_copy_out_fu_1314_m_axi_out_r_ARCACHE;
wire   [2:0] grp_copy_out_fu_1314_m_axi_out_r_ARPROT;
wire   [3:0] grp_copy_out_fu_1314_m_axi_out_r_ARQOS;
wire   [3:0] grp_copy_out_fu_1314_m_axi_out_r_ARREGION;
wire   [0:0] grp_copy_out_fu_1314_m_axi_out_r_ARUSER;
wire    grp_copy_out_fu_1314_m_axi_out_r_RREADY;
wire    grp_copy_out_fu_1314_m_axi_out_r_BREADY;
wire   [3:0] grp_copy_out_fu_1314_fc6_o_address0;
wire    grp_copy_out_fu_1314_fc6_o_ce0;
reg   [4:0] invdar3_reg_771;
wire   [0:0] tmp_s_fu_1508_p2;
wire   [0:0] tmp_fu_1502_p2;
reg   [4:0] invdar7_reg_783;
reg   [2:0] invdar1_reg_794;
wire   [0:0] tmp_9_fu_1611_p2;
wire   [0:0] tmp_6_fu_1599_p2;
wire   [0:0] tmp_7_fu_1605_p2;
reg   [2:0] invdar4_reg_806;
reg   [2:0] invdar5_reg_818;
reg   [2:0] invdar6_reg_829;
wire   [0:0] tmp_1_fu_1628_p2;
reg   [3:0] invdar8_reg_840;
wire   [0:0] tmp_5_fu_1772_p2;
wire   [0:0] tmp_2_fu_1754_p2;
wire   [0:0] tmp_3_fu_1760_p2;
wire   [0:0] tmp_4_fu_1766_p2;
reg   [2:0] invdar9_reg_852;
reg   [2:0] invdar_reg_864;
reg   [2:0] invdar2_reg_876;
reg   [3:0] invdar10_reg_887;
wire   [0:0] tmp_8_fu_1789_p2;
reg   [6:0] invdar11_reg_898;
wire   [0:0] tmp_13_fu_1914_p2;
wire   [0:0] tmp_10_fu_1896_p2;
wire   [0:0] tmp_11_fu_1902_p2;
wire   [0:0] tmp_12_fu_1908_p2;
reg   [3:0] invdar12_reg_910;
reg   [2:0] invdar13_reg_922;
reg   [2:0] invdar14_reg_934;
reg   [6:0] invdar15_reg_945;
wire   [0:0] tmp_14_fu_1931_p2;
reg   [3:0] invdar16_reg_956;
wire   [0:0] tmp_16_fu_1999_p2;
wire   [0:0] tmp_15_fu_1993_p2;
reg   [6:0] invdar17_reg_968;
reg   [3:0] invdar18_reg_979;
reg   [6:0] i_i_reg_990;
wire    ap_CS_fsm_state29;
reg    ap_block_state29_on_subcall_done;
wire   [0:0] exitcond2_i_fu_2083_p2;
reg   [3:0] j_i_reg_1001;
wire   [0:0] l_i_phi_fu_1017_p4;
wire   [0:0] exitcond3_i_fu_2057_p2;
reg   [0:0] l_i_reg_1012;
wire    ap_CS_fsm_state33;
reg   [3:0] i_i1_reg_1025;
wire    ap_CS_fsm_state35;
reg   [2:0] i_i2_reg_1036;
wire    ap_CS_fsm_state36;
wire   [0:0] exitcond1_i_fu_2211_p2;
reg   [4:0] j_i1_reg_1047;
wire   [0:0] exitcond_i2_fu_2238_p2;
wire   [0:0] exitcond2_i1_fu_2160_p2;
reg   [4:0] k_i_reg_1058;
wire    ap_CS_fsm_state42;
reg   [2:0] i_i3_reg_1069;
wire    ap_CS_fsm_state43;
wire   [0:0] exitcond1_i1_fu_2383_p2;
reg   [3:0] j_i2_reg_1080;
wire   [0:0] exitcond_i3_fu_2410_p2;
wire   [0:0] exitcond2_i2_fu_2332_p2;
reg   [3:0] k_i1_reg_1091;
wire    ap_CS_fsm_state49;
reg   [4:0] i_i4_reg_1102;
wire    ap_CS_fsm_state50;
wire   [0:0] exitcond1_i2_fu_2547_p2;
reg   [3:0] j_i3_reg_1113;
wire   [0:0] exitcond_i5_fu_2574_p2;
wire   [0:0] exitcond2_i3_fu_2500_p2;
reg   [3:0] k_i2_reg_1124;
wire    ap_CS_fsm_state56;
reg   [4:0] i_i5_reg_1135;
wire    ap_CS_fsm_state57;
wire   [0:0] exitcond1_i3_fu_2695_p2;
reg   [2:0] j_i4_reg_1146;
wire   [0:0] exitcond_i6_fu_2722_p2;
wire   [0:0] exitcond2_i4_fu_2656_p2;
reg   [2:0] k_i3_reg_1157;
wire    ap_CS_fsm_state63;
reg   [6:0] i_i6_reg_1168;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state68;
reg   [3:0] n_i_reg_1179;
wire    ap_CS_fsm_state87;
reg   [31:0] tmp_i_reg_1190;
reg   [6:0] c_i_reg_1202;
reg    ap_reg_grp_convolution3_fu_1213_ap_start;
reg    ap_reg_grp_convolution1_fu_1223_ap_start;
reg    ap_reg_grp_convolution5_fu_1232_ap_start;
reg    ap_reg_grp_max_pooling2_fu_1242_ap_start;
reg    ap_reg_grp_max_pooling4_fu_1250_ap_start;
reg    ap_reg_grp_copy_w5_fu_1258_ap_start;
reg    ap_reg_grp_copy_w3_fu_1266_ap_start;
reg    ap_reg_grp_copy_w1_fu_1274_ap_start;
reg    ap_reg_grp_copy_i_fu_1282_ap_start;
reg    ap_reg_grp_copy_b5_fu_1290_ap_start;
reg    ap_reg_grp_copy_b3_fu_1298_ap_start;
reg    ap_reg_grp_copy_b1_fu_1306_ap_start;
reg    ap_reg_grp_copy_out_fu_1314_ap_start;
wire   [31:0] tmp_50_fu_1491_p1;
wire   [31:0] tmp_63_cast_fu_1588_p1;
wire   [31:0] invdar6_cast_fu_1617_p1;
wire   [31:0] tmp_73_cast_fu_1743_p1;
wire   [31:0] invdar10_cast_fu_1778_p1;
wire   [31:0] tmp_81_cast_fu_1885_p1;
wire   [31:0] invdar15_cast_fu_1920_p1;
wire   [31:0] tmp_85_cast_fu_1982_p1;
wire   [31:0] invdar18_cast_fu_2005_p1;
wire  signed [31:0] tmp_89_cast_fu_2078_p1;
wire  signed [31:0] tmp_93_cast_fu_2104_p1;
wire   [31:0] tmp_108_cast_fu_2232_p1;
wire   [31:0] tmp_115_cast_fu_2404_p1;
wire   [31:0] tmp_119_cast_fu_2568_p1;
wire   [31:0] tmp_123_cast_fu_2716_p1;
wire  signed [31:0] tmp_124_cast_fu_2908_p1;
wire   [31:0] c_i_cast1_fu_2894_p1;
wire   [31:0] tmp_42_fu_1347_p1;
wire   [31:0] tmp_46_fu_1367_p1;
reg    ap_reg_ioackin_DATA_START_ARREADY;
reg    ap_reg_ioackin_DATA_DONE_AWREADY;
reg    ap_sig_ioackin_DATA_DONE_AWREADY;
reg    ap_block_state88_on_subcall_done;
reg    ap_reg_ioackin_DATA_DONE_WREADY;
reg    ap_sig_ioackin_DATA_DONE_WREADY;
reg   [31:0] grp_fu_1323_p1;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state72;
reg   [31:0] grp_fu_1332_p0;
wire   [29:0] start1_fu_1337_p4;
wire   [29:0] done1_fu_1357_p4;
wire   [9:0] tmp_49_fu_1483_p3;
wire   [4:0] tmp_51_fu_1518_p3;
wire   [31:0] p_shl_fu_1526_p1;
wire   [31:0] invdar1_cast_fu_1514_p1;
wire   [31:0] invdar4_cast_fu_1542_p1;
wire   [31:0] tmp_53_fu_1546_p2;
wire   [6:0] tmp_55_fu_1555_p1;
wire   [8:0] tmp_54_fu_1551_p1;
wire   [8:0] p_shl1_cast_fu_1559_p3;
wire   [8:0] invdar5_cast_cast_fu_1579_p1;
wire   [8:0] tmp_57_fu_1583_p2;
wire   [6:0] tmp_58_fu_1634_p3;
wire   [4:0] tmp_59_fu_1646_p3;
wire   [31:0] p_shl2_fu_1642_p1;
wire   [31:0] p_shl3_fu_1654_p1;
wire   [31:0] invdar9_cast_fu_1670_p1;
wire   [31:0] tmp_61_fu_1674_p2;
wire   [31:0] tmp_62_fu_1679_p2;
wire   [31:0] invdar_cast_fu_1697_p1;
wire   [31:0] tmp_64_fu_1701_p2;
wire   [10:0] tmp_66_fu_1710_p1;
wire   [12:0] tmp_65_fu_1706_p1;
wire   [12:0] p_shl5_cast_fu_1714_p3;
wire   [12:0] invdar2_cast_cast_fu_1734_p1;
wire   [12:0] tmp_68_fu_1738_p2;
wire   [10:0] tmp_69_fu_1801_p3;
wire   [12:0] tmp_71_fu_1813_p4;
wire   [31:0] p_shl6_fu_1823_p1;
wire   [31:0] tmp_70_fu_1809_p1;
wire   [31:0] invdar13_cast_fu_1839_p1;
wire   [31:0] tmp_73_fu_1843_p2;
wire   [14:0] tmp_75_fu_1852_p1;
wire   [16:0] tmp_74_fu_1848_p1;
wire   [16:0] p_shl7_cast_fu_1856_p3;
wire   [16:0] invdar14_cast_cast_fu_1876_p1;
wire   [16:0] tmp_77_fu_1880_p2;
wire   [10:0] tmp_78_fu_1937_p3;
wire   [6:0] tmp_79_fu_1949_p3;
wire   [11:0] p_shl8_cast_fu_1945_p1;
wire   [11:0] p_shl9_cast_fu_1957_p1;
wire   [11:0] invdar17_cast_cast_fu_1973_p1;
wire   [11:0] tmp_81_fu_1977_p2;
wire   [4:0] tmp_82_fu_2027_p1;
wire   [9:0] tmp_83_fu_2039_p3;
wire   [11:0] p_shl10_cast_fu_2031_p3;
wire   [11:0] p_shl11_cast_fu_2047_p1;
wire   [11:0] j_i_cast_cast_fu_2069_p1;
wire   [11:0] l_i_cast_cast_fu_2095_p1;
wire   [11:0] tmp_89_fu_2099_p2;
wire   [7:0] tmp_86_fu_2126_p3;
wire   [4:0] tmp_87_fu_2138_p3;
wire   [8:0] p_shl12_cast_fu_2134_p1;
wire   [8:0] p_shl13_cast_fu_2146_p1;
wire   [8:0] tmp_88_fu_2150_p2;
wire   [9:0] j_i1_cast_cast_fu_2172_p1;
wire   [9:0] tmp_93_fu_2176_p2;
wire   [8:0] tmp_94_fu_2181_p1;
wire   [11:0] tmp_95_fu_2193_p3;
wire   [13:0] p_shl16_cast_fu_2185_p3;
wire  signed [13:0] p_shl17_cast_fu_2201_p1;
wire   [13:0] k_i_cast_cast_fu_2223_p1;
wire   [13:0] tmp_104_fu_2227_p2;
wire   [31:0] input_assign_to_int_fu_2250_p1;
wire   [7:0] tmp_21_fu_2253_p4;
wire   [22:0] tmp_105_fu_2263_p1;
wire   [0:0] notrhs_fu_2273_p2;
wire   [0:0] notlhs_fu_2267_p2;
wire   [0:0] tmp_23_fu_2279_p2;
wire   [0:0] tmp_25_fu_2285_p2;
wire   [6:0] tmp_90_fu_2298_p3;
wire   [3:0] tmp_91_fu_2310_p3;
wire   [7:0] p_shl14_cast_fu_2306_p1;
wire   [7:0] p_shl15_cast_fu_2318_p1;
wire   [7:0] tmp_92_fu_2322_p2;
wire   [8:0] j_i2_cast_cast_fu_2344_p1;
wire   [8:0] tmp_100_fu_2348_p2;
wire   [7:0] tmp_101_fu_2353_p1;
wire   [9:0] tmp_102_fu_2365_p3;
wire   [11:0] p_shl20_cast_fu_2357_p3;
wire  signed [11:0] p_shl21_cast_fu_2373_p1;
wire   [11:0] k_i1_cast_cast_fu_2395_p1;
wire   [11:0] tmp_111_fu_2399_p2;
wire   [31:0] input_assign_2_to_in_fu_2422_p1;
wire   [7:0] tmp_26_fu_2425_p4;
wire   [22:0] tmp_112_fu_2435_p1;
wire   [0:0] notrhs1_fu_2445_p2;
wire   [0:0] notlhs1_fu_2439_p2;
wire   [0:0] tmp_28_fu_2451_p2;
wire   [0:0] tmp_30_fu_2457_p2;
wire   [7:0] tmp_97_fu_2470_p3;
wire   [5:0] tmp_98_fu_2482_p3;
wire   [8:0] p_shl19_cast_fu_2490_p1;
wire   [8:0] p_shl18_cast_fu_2478_p1;
wire   [8:0] j_i3_cast8_cast_fu_2512_p1;
wire   [8:0] tmp_108_fu_2516_p2;
wire   [9:0] tmp_109_fu_2529_p3;
wire   [11:0] p_shl23_cast_fu_2521_p3;
wire   [11:0] p_shl24_cast_fu_2537_p1;
wire   [11:0] k_i2_cast7_cast_fu_2559_p1;
wire   [11:0] tmp_115_fu_2563_p2;
wire   [31:0] input_assign_6_to_in_fu_2586_p1;
wire   [7:0] tmp_36_fu_2589_p4;
wire   [22:0] tmp_117_fu_2599_p1;
wire   [0:0] notrhs3_fu_2609_p2;
wire   [0:0] notlhs3_fu_2603_p2;
wire   [0:0] tmp_38_fu_2615_p2;
wire   [0:0] tmp_40_fu_2621_p2;
wire   [6:0] tmp_106_fu_2638_p3;
wire   [7:0] i_i5_cast6_cast_fu_2634_p1;
wire   [7:0] p_shl22_cast_fu_2646_p1;
wire   [7:0] j_i4_cast5_cast_fu_2668_p1;
wire   [7:0] tmp_113_fu_2672_p2;
wire   [9:0] tmp_116_cast_fu_2677_p1;
wire   [9:0] p_shl25_cast_fu_2681_p3;
wire   [9:0] k_i3_cast4_cast_fu_2707_p1;
wire   [9:0] tmp_121_fu_2711_p2;
wire   [31:0] input_assign_8_to_in_fu_2734_p1;
wire   [7:0] tmp_41_fu_2737_p4;
wire   [22:0] tmp_122_fu_2747_p1;
wire   [0:0] notrhs4_fu_2757_p2;
wire   [0:0] notlhs4_fu_2751_p2;
wire   [0:0] tmp_43_fu_2763_p2;
wire   [0:0] tmp_45_fu_2769_p2;
wire   [31:0] input_assign_4_to_in_fu_2799_p1;
wire   [7:0] tmp_31_fu_2802_p4;
wire   [22:0] tmp_116_fu_2812_p1;
wire   [0:0] notrhs2_fu_2822_p2;
wire   [0:0] notlhs2_fu_2816_p2;
wire   [0:0] tmp_33_fu_2828_p2;
wire   [0:0] tmp_35_fu_2834_p2;
wire   [10:0] tmp_118_fu_2852_p3;
wire   [6:0] tmp_119_fu_2864_p3;
wire   [11:0] p_shl26_cast_fu_2860_p1;
wire   [11:0] p_shl27_cast_fu_2872_p1;
wire   [11:0] c_i_cast1_cast_fu_2899_p1;
wire   [11:0] tmp_123_fu_2903_p2;
reg   [93:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 94'd1;
#0 ap_reg_grp_convolution3_fu_1213_ap_start = 1'b0;
#0 ap_reg_grp_convolution1_fu_1223_ap_start = 1'b0;
#0 ap_reg_grp_convolution5_fu_1232_ap_start = 1'b0;
#0 ap_reg_grp_max_pooling2_fu_1242_ap_start = 1'b0;
#0 ap_reg_grp_max_pooling4_fu_1250_ap_start = 1'b0;
#0 ap_reg_grp_copy_w5_fu_1258_ap_start = 1'b0;
#0 ap_reg_grp_copy_w3_fu_1266_ap_start = 1'b0;
#0 ap_reg_grp_copy_w1_fu_1274_ap_start = 1'b0;
#0 ap_reg_grp_copy_i_fu_1282_ap_start = 1'b0;
#0 ap_reg_grp_copy_b5_fu_1290_ap_start = 1'b0;
#0 ap_reg_grp_copy_b3_fu_1298_ap_start = 1'b0;
#0 ap_reg_grp_copy_b1_fu_1306_ap_start = 1'b0;
#0 ap_reg_grp_copy_out_fu_1314_ap_start = 1'b0;
#0 ap_reg_ioackin_DATA_START_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_DONE_AWREADY = 1'b0;
#0 ap_reg_ioackin_DATA_DONE_WREADY = 1'b0;
end

lenet_wrapper_c1_eOg #(
    .DataWidth( 32 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
c1_o_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c1_o_1_address0),
    .ce0(c1_o_1_ce0),
    .we0(c1_o_1_we0),
    .d0(grp_convolution1_fu_1223_output_r_d0),
    .q0(c1_o_1_q0)
);

lenet_wrapper_c1_eOg #(
    .DataWidth( 32 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
c1_o_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c1_o_2_address0),
    .ce0(c1_o_2_ce0),
    .we0(c1_o_2_we0),
    .d0(c1_o_2_d0),
    .q0(c1_o_2_q0)
);

lenet_wrapper_p2_g8j #(
    .DataWidth( 32 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
p2_o_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p2_o_1_address0),
    .ce0(p2_o_1_ce0),
    .we0(p2_o_1_we0),
    .d0(grp_max_pooling2_fu_1242_output_r_d0),
    .q0(p2_o_1_q0)
);

lenet_wrapper_p2_g8j #(
    .DataWidth( 32 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
p2_o_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p2_o_2_address0),
    .ce0(p2_o_2_ce0),
    .we0(p2_o_2_we0),
    .d0(p2_o_2_d0),
    .q0(p2_o_2_q0)
);

lenet_wrapper_c3_ibs #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
c3_o_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c3_o_1_address0),
    .ce0(c3_o_1_ce0),
    .we0(c3_o_1_we0),
    .d0(grp_convolution3_fu_1213_output_r_d0),
    .q0(c3_o_1_q0)
);

lenet_wrapper_c3_ibs #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
c3_o_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c3_o_2_address0),
    .ce0(c3_o_2_ce0),
    .we0(c3_o_2_we0),
    .d0(c3_o_2_d0),
    .q0(c3_o_2_q0)
);

lenet_wrapper_p4_kbM #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
p4_o_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p4_o_1_address0),
    .ce0(p4_o_1_ce0),
    .we0(p4_o_1_we0),
    .d0(grp_max_pooling4_fu_1250_output_r_d0),
    .q0(p4_o_1_q0)
);

lenet_wrapper_p4_kbM #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
p4_o_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p4_o_2_address0),
    .ce0(p4_o_2_ce0),
    .we0(p4_o_2_we0),
    .d0(p4_o_2_d0),
    .q0(p4_o_2_q0)
);

lenet_wrapper_c5_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
c5_o_1_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_o_1_0_0_address0),
    .ce0(c5_o_1_0_0_ce0),
    .we0(c5_o_1_0_0_we0),
    .d0(grp_convolution5_fu_1232_output_0_0_d0),
    .q0(c5_o_1_0_0_q0)
);

lenet_wrapper_c5_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
c5_o_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_o_2_0_0_address0),
    .ce0(c5_o_2_0_0_ce0),
    .we0(c5_o_2_0_0_we0),
    .d0(c5_o_2_0_0_d0),
    .q0(c5_o_2_0_0_q0)
);

lenet_wrapper_fc6_o #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
fc6_o_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc6_o_address0),
    .ce0(fc6_o_ce0),
    .we0(fc6_o_we0),
    .d0(tmp_i_66_reg_3556),
    .q0(fc6_o_q0)
);

lenet_wrapper_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
lenet_wrapper_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .image_in_i(image_in_i),
    .c1_w_i(c1_w_i),
    .c1_b_i(c1_b_i),
    .c3_w_i(c3_w_i),
    .c3_b_i(c3_b_i),
    .c5_w_i(c5_w_i),
    .c5_b_i(c5_b_i),
    .fc6_o_o(fc6_o_o),
    .done(done),
    .start(start)
);

lenet_wrapper_DATA_IMAGE_IN_I_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_IMAGE_IN_I_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_IMAGE_IN_I_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_IMAGE_IN_I_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_IMAGE_IN_I_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_IMAGE_IN_I_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_IMAGE_IN_I_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_IMAGE_IN_I_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_IMAGE_IN_I_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_IMAGE_IN_I_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_IMAGE_IN_I_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_IMAGE_IN_I_CACHE_VALUE ))
lenet_wrapper_DATA_IMAGE_IN_I_m_axi_U(
    .AWVALID(m_axi_DATA_IMAGE_IN_I_AWVALID),
    .AWREADY(m_axi_DATA_IMAGE_IN_I_AWREADY),
    .AWADDR(m_axi_DATA_IMAGE_IN_I_AWADDR),
    .AWID(m_axi_DATA_IMAGE_IN_I_AWID),
    .AWLEN(m_axi_DATA_IMAGE_IN_I_AWLEN),
    .AWSIZE(m_axi_DATA_IMAGE_IN_I_AWSIZE),
    .AWBURST(m_axi_DATA_IMAGE_IN_I_AWBURST),
    .AWLOCK(m_axi_DATA_IMAGE_IN_I_AWLOCK),
    .AWCACHE(m_axi_DATA_IMAGE_IN_I_AWCACHE),
    .AWPROT(m_axi_DATA_IMAGE_IN_I_AWPROT),
    .AWQOS(m_axi_DATA_IMAGE_IN_I_AWQOS),
    .AWREGION(m_axi_DATA_IMAGE_IN_I_AWREGION),
    .AWUSER(m_axi_DATA_IMAGE_IN_I_AWUSER),
    .WVALID(m_axi_DATA_IMAGE_IN_I_WVALID),
    .WREADY(m_axi_DATA_IMAGE_IN_I_WREADY),
    .WDATA(m_axi_DATA_IMAGE_IN_I_WDATA),
    .WSTRB(m_axi_DATA_IMAGE_IN_I_WSTRB),
    .WLAST(m_axi_DATA_IMAGE_IN_I_WLAST),
    .WID(m_axi_DATA_IMAGE_IN_I_WID),
    .WUSER(m_axi_DATA_IMAGE_IN_I_WUSER),
    .ARVALID(m_axi_DATA_IMAGE_IN_I_ARVALID),
    .ARREADY(m_axi_DATA_IMAGE_IN_I_ARREADY),
    .ARADDR(m_axi_DATA_IMAGE_IN_I_ARADDR),
    .ARID(m_axi_DATA_IMAGE_IN_I_ARID),
    .ARLEN(m_axi_DATA_IMAGE_IN_I_ARLEN),
    .ARSIZE(m_axi_DATA_IMAGE_IN_I_ARSIZE),
    .ARBURST(m_axi_DATA_IMAGE_IN_I_ARBURST),
    .ARLOCK(m_axi_DATA_IMAGE_IN_I_ARLOCK),
    .ARCACHE(m_axi_DATA_IMAGE_IN_I_ARCACHE),
    .ARPROT(m_axi_DATA_IMAGE_IN_I_ARPROT),
    .ARQOS(m_axi_DATA_IMAGE_IN_I_ARQOS),
    .ARREGION(m_axi_DATA_IMAGE_IN_I_ARREGION),
    .ARUSER(m_axi_DATA_IMAGE_IN_I_ARUSER),
    .RVALID(m_axi_DATA_IMAGE_IN_I_RVALID),
    .RREADY(m_axi_DATA_IMAGE_IN_I_RREADY),
    .RDATA(m_axi_DATA_IMAGE_IN_I_RDATA),
    .RLAST(m_axi_DATA_IMAGE_IN_I_RLAST),
    .RID(m_axi_DATA_IMAGE_IN_I_RID),
    .RUSER(m_axi_DATA_IMAGE_IN_I_RUSER),
    .RRESP(m_axi_DATA_IMAGE_IN_I_RRESP),
    .BVALID(m_axi_DATA_IMAGE_IN_I_BVALID),
    .BREADY(m_axi_DATA_IMAGE_IN_I_BREADY),
    .BRESP(m_axi_DATA_IMAGE_IN_I_BRESP),
    .BID(m_axi_DATA_IMAGE_IN_I_BID),
    .BUSER(m_axi_DATA_IMAGE_IN_I_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_IMAGE_IN_I_ARVALID),
    .I_ARREADY(DATA_IMAGE_IN_I_ARREADY),
    .I_ARADDR(grp_copy_i_fu_1282_m_axi_in_r_ARADDR),
    .I_ARID(grp_copy_i_fu_1282_m_axi_in_r_ARID),
    .I_ARLEN(grp_copy_i_fu_1282_m_axi_in_r_ARLEN),
    .I_ARSIZE(grp_copy_i_fu_1282_m_axi_in_r_ARSIZE),
    .I_ARLOCK(grp_copy_i_fu_1282_m_axi_in_r_ARLOCK),
    .I_ARCACHE(grp_copy_i_fu_1282_m_axi_in_r_ARCACHE),
    .I_ARQOS(grp_copy_i_fu_1282_m_axi_in_r_ARQOS),
    .I_ARPROT(grp_copy_i_fu_1282_m_axi_in_r_ARPROT),
    .I_ARUSER(grp_copy_i_fu_1282_m_axi_in_r_ARUSER),
    .I_ARBURST(grp_copy_i_fu_1282_m_axi_in_r_ARBURST),
    .I_ARREGION(grp_copy_i_fu_1282_m_axi_in_r_ARREGION),
    .I_RVALID(DATA_IMAGE_IN_I_RVALID),
    .I_RREADY(DATA_IMAGE_IN_I_RREADY),
    .I_RDATA(DATA_IMAGE_IN_I_RDATA),
    .I_RID(DATA_IMAGE_IN_I_RID),
    .I_RUSER(DATA_IMAGE_IN_I_RUSER),
    .I_RRESP(DATA_IMAGE_IN_I_RRESP),
    .I_RLAST(DATA_IMAGE_IN_I_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_IMAGE_IN_I_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_IMAGE_IN_I_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_IMAGE_IN_I_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_IMAGE_IN_I_BRESP),
    .I_BID(DATA_IMAGE_IN_I_BID),
    .I_BUSER(DATA_IMAGE_IN_I_BUSER)
);

lenet_wrapper_DATA_C1_W_I_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_C1_W_I_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_C1_W_I_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_C1_W_I_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_C1_W_I_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_C1_W_I_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_C1_W_I_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_C1_W_I_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_C1_W_I_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_C1_W_I_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_C1_W_I_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_C1_W_I_CACHE_VALUE ))
lenet_wrapper_DATA_C1_W_I_m_axi_U(
    .AWVALID(m_axi_DATA_C1_W_I_AWVALID),
    .AWREADY(m_axi_DATA_C1_W_I_AWREADY),
    .AWADDR(m_axi_DATA_C1_W_I_AWADDR),
    .AWID(m_axi_DATA_C1_W_I_AWID),
    .AWLEN(m_axi_DATA_C1_W_I_AWLEN),
    .AWSIZE(m_axi_DATA_C1_W_I_AWSIZE),
    .AWBURST(m_axi_DATA_C1_W_I_AWBURST),
    .AWLOCK(m_axi_DATA_C1_W_I_AWLOCK),
    .AWCACHE(m_axi_DATA_C1_W_I_AWCACHE),
    .AWPROT(m_axi_DATA_C1_W_I_AWPROT),
    .AWQOS(m_axi_DATA_C1_W_I_AWQOS),
    .AWREGION(m_axi_DATA_C1_W_I_AWREGION),
    .AWUSER(m_axi_DATA_C1_W_I_AWUSER),
    .WVALID(m_axi_DATA_C1_W_I_WVALID),
    .WREADY(m_axi_DATA_C1_W_I_WREADY),
    .WDATA(m_axi_DATA_C1_W_I_WDATA),
    .WSTRB(m_axi_DATA_C1_W_I_WSTRB),
    .WLAST(m_axi_DATA_C1_W_I_WLAST),
    .WID(m_axi_DATA_C1_W_I_WID),
    .WUSER(m_axi_DATA_C1_W_I_WUSER),
    .ARVALID(m_axi_DATA_C1_W_I_ARVALID),
    .ARREADY(m_axi_DATA_C1_W_I_ARREADY),
    .ARADDR(m_axi_DATA_C1_W_I_ARADDR),
    .ARID(m_axi_DATA_C1_W_I_ARID),
    .ARLEN(m_axi_DATA_C1_W_I_ARLEN),
    .ARSIZE(m_axi_DATA_C1_W_I_ARSIZE),
    .ARBURST(m_axi_DATA_C1_W_I_ARBURST),
    .ARLOCK(m_axi_DATA_C1_W_I_ARLOCK),
    .ARCACHE(m_axi_DATA_C1_W_I_ARCACHE),
    .ARPROT(m_axi_DATA_C1_W_I_ARPROT),
    .ARQOS(m_axi_DATA_C1_W_I_ARQOS),
    .ARREGION(m_axi_DATA_C1_W_I_ARREGION),
    .ARUSER(m_axi_DATA_C1_W_I_ARUSER),
    .RVALID(m_axi_DATA_C1_W_I_RVALID),
    .RREADY(m_axi_DATA_C1_W_I_RREADY),
    .RDATA(m_axi_DATA_C1_W_I_RDATA),
    .RLAST(m_axi_DATA_C1_W_I_RLAST),
    .RID(m_axi_DATA_C1_W_I_RID),
    .RUSER(m_axi_DATA_C1_W_I_RUSER),
    .RRESP(m_axi_DATA_C1_W_I_RRESP),
    .BVALID(m_axi_DATA_C1_W_I_BVALID),
    .BREADY(m_axi_DATA_C1_W_I_BREADY),
    .BRESP(m_axi_DATA_C1_W_I_BRESP),
    .BID(m_axi_DATA_C1_W_I_BID),
    .BUSER(m_axi_DATA_C1_W_I_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_C1_W_I_ARVALID),
    .I_ARREADY(DATA_C1_W_I_ARREADY),
    .I_ARADDR(grp_copy_w1_fu_1274_m_axi_in_r_ARADDR),
    .I_ARID(grp_copy_w1_fu_1274_m_axi_in_r_ARID),
    .I_ARLEN(grp_copy_w1_fu_1274_m_axi_in_r_ARLEN),
    .I_ARSIZE(grp_copy_w1_fu_1274_m_axi_in_r_ARSIZE),
    .I_ARLOCK(grp_copy_w1_fu_1274_m_axi_in_r_ARLOCK),
    .I_ARCACHE(grp_copy_w1_fu_1274_m_axi_in_r_ARCACHE),
    .I_ARQOS(grp_copy_w1_fu_1274_m_axi_in_r_ARQOS),
    .I_ARPROT(grp_copy_w1_fu_1274_m_axi_in_r_ARPROT),
    .I_ARUSER(grp_copy_w1_fu_1274_m_axi_in_r_ARUSER),
    .I_ARBURST(grp_copy_w1_fu_1274_m_axi_in_r_ARBURST),
    .I_ARREGION(grp_copy_w1_fu_1274_m_axi_in_r_ARREGION),
    .I_RVALID(DATA_C1_W_I_RVALID),
    .I_RREADY(DATA_C1_W_I_RREADY),
    .I_RDATA(DATA_C1_W_I_RDATA),
    .I_RID(DATA_C1_W_I_RID),
    .I_RUSER(DATA_C1_W_I_RUSER),
    .I_RRESP(DATA_C1_W_I_RRESP),
    .I_RLAST(DATA_C1_W_I_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_C1_W_I_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_C1_W_I_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_C1_W_I_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_C1_W_I_BRESP),
    .I_BID(DATA_C1_W_I_BID),
    .I_BUSER(DATA_C1_W_I_BUSER)
);

lenet_wrapper_DATA_C1_B_I_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_C1_B_I_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_C1_B_I_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_C1_B_I_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_C1_B_I_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_C1_B_I_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_C1_B_I_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_C1_B_I_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_C1_B_I_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_C1_B_I_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_C1_B_I_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_C1_B_I_CACHE_VALUE ))
lenet_wrapper_DATA_C1_B_I_m_axi_U(
    .AWVALID(m_axi_DATA_C1_B_I_AWVALID),
    .AWREADY(m_axi_DATA_C1_B_I_AWREADY),
    .AWADDR(m_axi_DATA_C1_B_I_AWADDR),
    .AWID(m_axi_DATA_C1_B_I_AWID),
    .AWLEN(m_axi_DATA_C1_B_I_AWLEN),
    .AWSIZE(m_axi_DATA_C1_B_I_AWSIZE),
    .AWBURST(m_axi_DATA_C1_B_I_AWBURST),
    .AWLOCK(m_axi_DATA_C1_B_I_AWLOCK),
    .AWCACHE(m_axi_DATA_C1_B_I_AWCACHE),
    .AWPROT(m_axi_DATA_C1_B_I_AWPROT),
    .AWQOS(m_axi_DATA_C1_B_I_AWQOS),
    .AWREGION(m_axi_DATA_C1_B_I_AWREGION),
    .AWUSER(m_axi_DATA_C1_B_I_AWUSER),
    .WVALID(m_axi_DATA_C1_B_I_WVALID),
    .WREADY(m_axi_DATA_C1_B_I_WREADY),
    .WDATA(m_axi_DATA_C1_B_I_WDATA),
    .WSTRB(m_axi_DATA_C1_B_I_WSTRB),
    .WLAST(m_axi_DATA_C1_B_I_WLAST),
    .WID(m_axi_DATA_C1_B_I_WID),
    .WUSER(m_axi_DATA_C1_B_I_WUSER),
    .ARVALID(m_axi_DATA_C1_B_I_ARVALID),
    .ARREADY(m_axi_DATA_C1_B_I_ARREADY),
    .ARADDR(m_axi_DATA_C1_B_I_ARADDR),
    .ARID(m_axi_DATA_C1_B_I_ARID),
    .ARLEN(m_axi_DATA_C1_B_I_ARLEN),
    .ARSIZE(m_axi_DATA_C1_B_I_ARSIZE),
    .ARBURST(m_axi_DATA_C1_B_I_ARBURST),
    .ARLOCK(m_axi_DATA_C1_B_I_ARLOCK),
    .ARCACHE(m_axi_DATA_C1_B_I_ARCACHE),
    .ARPROT(m_axi_DATA_C1_B_I_ARPROT),
    .ARQOS(m_axi_DATA_C1_B_I_ARQOS),
    .ARREGION(m_axi_DATA_C1_B_I_ARREGION),
    .ARUSER(m_axi_DATA_C1_B_I_ARUSER),
    .RVALID(m_axi_DATA_C1_B_I_RVALID),
    .RREADY(m_axi_DATA_C1_B_I_RREADY),
    .RDATA(m_axi_DATA_C1_B_I_RDATA),
    .RLAST(m_axi_DATA_C1_B_I_RLAST),
    .RID(m_axi_DATA_C1_B_I_RID),
    .RUSER(m_axi_DATA_C1_B_I_RUSER),
    .RRESP(m_axi_DATA_C1_B_I_RRESP),
    .BVALID(m_axi_DATA_C1_B_I_BVALID),
    .BREADY(m_axi_DATA_C1_B_I_BREADY),
    .BRESP(m_axi_DATA_C1_B_I_BRESP),
    .BID(m_axi_DATA_C1_B_I_BID),
    .BUSER(m_axi_DATA_C1_B_I_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_C1_B_I_ARVALID),
    .I_ARREADY(DATA_C1_B_I_ARREADY),
    .I_ARADDR(grp_copy_b1_fu_1306_m_axi_in_r_ARADDR),
    .I_ARID(grp_copy_b1_fu_1306_m_axi_in_r_ARID),
    .I_ARLEN(grp_copy_b1_fu_1306_m_axi_in_r_ARLEN),
    .I_ARSIZE(grp_copy_b1_fu_1306_m_axi_in_r_ARSIZE),
    .I_ARLOCK(grp_copy_b1_fu_1306_m_axi_in_r_ARLOCK),
    .I_ARCACHE(grp_copy_b1_fu_1306_m_axi_in_r_ARCACHE),
    .I_ARQOS(grp_copy_b1_fu_1306_m_axi_in_r_ARQOS),
    .I_ARPROT(grp_copy_b1_fu_1306_m_axi_in_r_ARPROT),
    .I_ARUSER(grp_copy_b1_fu_1306_m_axi_in_r_ARUSER),
    .I_ARBURST(grp_copy_b1_fu_1306_m_axi_in_r_ARBURST),
    .I_ARREGION(grp_copy_b1_fu_1306_m_axi_in_r_ARREGION),
    .I_RVALID(DATA_C1_B_I_RVALID),
    .I_RREADY(DATA_C1_B_I_RREADY),
    .I_RDATA(DATA_C1_B_I_RDATA),
    .I_RID(DATA_C1_B_I_RID),
    .I_RUSER(DATA_C1_B_I_RUSER),
    .I_RRESP(DATA_C1_B_I_RRESP),
    .I_RLAST(DATA_C1_B_I_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_C1_B_I_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_C1_B_I_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_C1_B_I_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_C1_B_I_BRESP),
    .I_BID(DATA_C1_B_I_BID),
    .I_BUSER(DATA_C1_B_I_BUSER)
);

lenet_wrapper_DATA_C3_W_I_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_C3_W_I_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_C3_W_I_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_C3_W_I_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_C3_W_I_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_C3_W_I_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_C3_W_I_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_C3_W_I_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_C3_W_I_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_C3_W_I_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_C3_W_I_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_C3_W_I_CACHE_VALUE ))
lenet_wrapper_DATA_C3_W_I_m_axi_U(
    .AWVALID(m_axi_DATA_C3_W_I_AWVALID),
    .AWREADY(m_axi_DATA_C3_W_I_AWREADY),
    .AWADDR(m_axi_DATA_C3_W_I_AWADDR),
    .AWID(m_axi_DATA_C3_W_I_AWID),
    .AWLEN(m_axi_DATA_C3_W_I_AWLEN),
    .AWSIZE(m_axi_DATA_C3_W_I_AWSIZE),
    .AWBURST(m_axi_DATA_C3_W_I_AWBURST),
    .AWLOCK(m_axi_DATA_C3_W_I_AWLOCK),
    .AWCACHE(m_axi_DATA_C3_W_I_AWCACHE),
    .AWPROT(m_axi_DATA_C3_W_I_AWPROT),
    .AWQOS(m_axi_DATA_C3_W_I_AWQOS),
    .AWREGION(m_axi_DATA_C3_W_I_AWREGION),
    .AWUSER(m_axi_DATA_C3_W_I_AWUSER),
    .WVALID(m_axi_DATA_C3_W_I_WVALID),
    .WREADY(m_axi_DATA_C3_W_I_WREADY),
    .WDATA(m_axi_DATA_C3_W_I_WDATA),
    .WSTRB(m_axi_DATA_C3_W_I_WSTRB),
    .WLAST(m_axi_DATA_C3_W_I_WLAST),
    .WID(m_axi_DATA_C3_W_I_WID),
    .WUSER(m_axi_DATA_C3_W_I_WUSER),
    .ARVALID(m_axi_DATA_C3_W_I_ARVALID),
    .ARREADY(m_axi_DATA_C3_W_I_ARREADY),
    .ARADDR(m_axi_DATA_C3_W_I_ARADDR),
    .ARID(m_axi_DATA_C3_W_I_ARID),
    .ARLEN(m_axi_DATA_C3_W_I_ARLEN),
    .ARSIZE(m_axi_DATA_C3_W_I_ARSIZE),
    .ARBURST(m_axi_DATA_C3_W_I_ARBURST),
    .ARLOCK(m_axi_DATA_C3_W_I_ARLOCK),
    .ARCACHE(m_axi_DATA_C3_W_I_ARCACHE),
    .ARPROT(m_axi_DATA_C3_W_I_ARPROT),
    .ARQOS(m_axi_DATA_C3_W_I_ARQOS),
    .ARREGION(m_axi_DATA_C3_W_I_ARREGION),
    .ARUSER(m_axi_DATA_C3_W_I_ARUSER),
    .RVALID(m_axi_DATA_C3_W_I_RVALID),
    .RREADY(m_axi_DATA_C3_W_I_RREADY),
    .RDATA(m_axi_DATA_C3_W_I_RDATA),
    .RLAST(m_axi_DATA_C3_W_I_RLAST),
    .RID(m_axi_DATA_C3_W_I_RID),
    .RUSER(m_axi_DATA_C3_W_I_RUSER),
    .RRESP(m_axi_DATA_C3_W_I_RRESP),
    .BVALID(m_axi_DATA_C3_W_I_BVALID),
    .BREADY(m_axi_DATA_C3_W_I_BREADY),
    .BRESP(m_axi_DATA_C3_W_I_BRESP),
    .BID(m_axi_DATA_C3_W_I_BID),
    .BUSER(m_axi_DATA_C3_W_I_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_C3_W_I_ARVALID),
    .I_ARREADY(DATA_C3_W_I_ARREADY),
    .I_ARADDR(grp_copy_w3_fu_1266_m_axi_in_r_ARADDR),
    .I_ARID(grp_copy_w3_fu_1266_m_axi_in_r_ARID),
    .I_ARLEN(grp_copy_w3_fu_1266_m_axi_in_r_ARLEN),
    .I_ARSIZE(grp_copy_w3_fu_1266_m_axi_in_r_ARSIZE),
    .I_ARLOCK(grp_copy_w3_fu_1266_m_axi_in_r_ARLOCK),
    .I_ARCACHE(grp_copy_w3_fu_1266_m_axi_in_r_ARCACHE),
    .I_ARQOS(grp_copy_w3_fu_1266_m_axi_in_r_ARQOS),
    .I_ARPROT(grp_copy_w3_fu_1266_m_axi_in_r_ARPROT),
    .I_ARUSER(grp_copy_w3_fu_1266_m_axi_in_r_ARUSER),
    .I_ARBURST(grp_copy_w3_fu_1266_m_axi_in_r_ARBURST),
    .I_ARREGION(grp_copy_w3_fu_1266_m_axi_in_r_ARREGION),
    .I_RVALID(DATA_C3_W_I_RVALID),
    .I_RREADY(DATA_C3_W_I_RREADY),
    .I_RDATA(DATA_C3_W_I_RDATA),
    .I_RID(DATA_C3_W_I_RID),
    .I_RUSER(DATA_C3_W_I_RUSER),
    .I_RRESP(DATA_C3_W_I_RRESP),
    .I_RLAST(DATA_C3_W_I_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_C3_W_I_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_C3_W_I_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_C3_W_I_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_C3_W_I_BRESP),
    .I_BID(DATA_C3_W_I_BID),
    .I_BUSER(DATA_C3_W_I_BUSER)
);

lenet_wrapper_DATA_C3_B_I_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_C3_B_I_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_C3_B_I_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_C3_B_I_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_C3_B_I_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_C3_B_I_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_C3_B_I_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_C3_B_I_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_C3_B_I_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_C3_B_I_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_C3_B_I_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_C3_B_I_CACHE_VALUE ))
lenet_wrapper_DATA_C3_B_I_m_axi_U(
    .AWVALID(m_axi_DATA_C3_B_I_AWVALID),
    .AWREADY(m_axi_DATA_C3_B_I_AWREADY),
    .AWADDR(m_axi_DATA_C3_B_I_AWADDR),
    .AWID(m_axi_DATA_C3_B_I_AWID),
    .AWLEN(m_axi_DATA_C3_B_I_AWLEN),
    .AWSIZE(m_axi_DATA_C3_B_I_AWSIZE),
    .AWBURST(m_axi_DATA_C3_B_I_AWBURST),
    .AWLOCK(m_axi_DATA_C3_B_I_AWLOCK),
    .AWCACHE(m_axi_DATA_C3_B_I_AWCACHE),
    .AWPROT(m_axi_DATA_C3_B_I_AWPROT),
    .AWQOS(m_axi_DATA_C3_B_I_AWQOS),
    .AWREGION(m_axi_DATA_C3_B_I_AWREGION),
    .AWUSER(m_axi_DATA_C3_B_I_AWUSER),
    .WVALID(m_axi_DATA_C3_B_I_WVALID),
    .WREADY(m_axi_DATA_C3_B_I_WREADY),
    .WDATA(m_axi_DATA_C3_B_I_WDATA),
    .WSTRB(m_axi_DATA_C3_B_I_WSTRB),
    .WLAST(m_axi_DATA_C3_B_I_WLAST),
    .WID(m_axi_DATA_C3_B_I_WID),
    .WUSER(m_axi_DATA_C3_B_I_WUSER),
    .ARVALID(m_axi_DATA_C3_B_I_ARVALID),
    .ARREADY(m_axi_DATA_C3_B_I_ARREADY),
    .ARADDR(m_axi_DATA_C3_B_I_ARADDR),
    .ARID(m_axi_DATA_C3_B_I_ARID),
    .ARLEN(m_axi_DATA_C3_B_I_ARLEN),
    .ARSIZE(m_axi_DATA_C3_B_I_ARSIZE),
    .ARBURST(m_axi_DATA_C3_B_I_ARBURST),
    .ARLOCK(m_axi_DATA_C3_B_I_ARLOCK),
    .ARCACHE(m_axi_DATA_C3_B_I_ARCACHE),
    .ARPROT(m_axi_DATA_C3_B_I_ARPROT),
    .ARQOS(m_axi_DATA_C3_B_I_ARQOS),
    .ARREGION(m_axi_DATA_C3_B_I_ARREGION),
    .ARUSER(m_axi_DATA_C3_B_I_ARUSER),
    .RVALID(m_axi_DATA_C3_B_I_RVALID),
    .RREADY(m_axi_DATA_C3_B_I_RREADY),
    .RDATA(m_axi_DATA_C3_B_I_RDATA),
    .RLAST(m_axi_DATA_C3_B_I_RLAST),
    .RID(m_axi_DATA_C3_B_I_RID),
    .RUSER(m_axi_DATA_C3_B_I_RUSER),
    .RRESP(m_axi_DATA_C3_B_I_RRESP),
    .BVALID(m_axi_DATA_C3_B_I_BVALID),
    .BREADY(m_axi_DATA_C3_B_I_BREADY),
    .BRESP(m_axi_DATA_C3_B_I_BRESP),
    .BID(m_axi_DATA_C3_B_I_BID),
    .BUSER(m_axi_DATA_C3_B_I_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_C3_B_I_ARVALID),
    .I_ARREADY(DATA_C3_B_I_ARREADY),
    .I_ARADDR(grp_copy_b3_fu_1298_m_axi_in_r_ARADDR),
    .I_ARID(grp_copy_b3_fu_1298_m_axi_in_r_ARID),
    .I_ARLEN(grp_copy_b3_fu_1298_m_axi_in_r_ARLEN),
    .I_ARSIZE(grp_copy_b3_fu_1298_m_axi_in_r_ARSIZE),
    .I_ARLOCK(grp_copy_b3_fu_1298_m_axi_in_r_ARLOCK),
    .I_ARCACHE(grp_copy_b3_fu_1298_m_axi_in_r_ARCACHE),
    .I_ARQOS(grp_copy_b3_fu_1298_m_axi_in_r_ARQOS),
    .I_ARPROT(grp_copy_b3_fu_1298_m_axi_in_r_ARPROT),
    .I_ARUSER(grp_copy_b3_fu_1298_m_axi_in_r_ARUSER),
    .I_ARBURST(grp_copy_b3_fu_1298_m_axi_in_r_ARBURST),
    .I_ARREGION(grp_copy_b3_fu_1298_m_axi_in_r_ARREGION),
    .I_RVALID(DATA_C3_B_I_RVALID),
    .I_RREADY(DATA_C3_B_I_RREADY),
    .I_RDATA(DATA_C3_B_I_RDATA),
    .I_RID(DATA_C3_B_I_RID),
    .I_RUSER(DATA_C3_B_I_RUSER),
    .I_RRESP(DATA_C3_B_I_RRESP),
    .I_RLAST(DATA_C3_B_I_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_C3_B_I_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_C3_B_I_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_C3_B_I_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_C3_B_I_BRESP),
    .I_BID(DATA_C3_B_I_BID),
    .I_BUSER(DATA_C3_B_I_BUSER)
);

lenet_wrapper_DATA_FC6_W_I_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_FC6_W_I_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_FC6_W_I_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_FC6_W_I_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_FC6_W_I_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_FC6_W_I_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_FC6_W_I_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_FC6_W_I_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_FC6_W_I_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_FC6_W_I_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_FC6_W_I_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_FC6_W_I_CACHE_VALUE ))
lenet_wrapper_DATA_FC6_W_I_m_axi_U(
    .AWVALID(m_axi_DATA_FC6_W_I_AWVALID),
    .AWREADY(m_axi_DATA_FC6_W_I_AWREADY),
    .AWADDR(m_axi_DATA_FC6_W_I_AWADDR),
    .AWID(m_axi_DATA_FC6_W_I_AWID),
    .AWLEN(m_axi_DATA_FC6_W_I_AWLEN),
    .AWSIZE(m_axi_DATA_FC6_W_I_AWSIZE),
    .AWBURST(m_axi_DATA_FC6_W_I_AWBURST),
    .AWLOCK(m_axi_DATA_FC6_W_I_AWLOCK),
    .AWCACHE(m_axi_DATA_FC6_W_I_AWCACHE),
    .AWPROT(m_axi_DATA_FC6_W_I_AWPROT),
    .AWQOS(m_axi_DATA_FC6_W_I_AWQOS),
    .AWREGION(m_axi_DATA_FC6_W_I_AWREGION),
    .AWUSER(m_axi_DATA_FC6_W_I_AWUSER),
    .WVALID(m_axi_DATA_FC6_W_I_WVALID),
    .WREADY(m_axi_DATA_FC6_W_I_WREADY),
    .WDATA(m_axi_DATA_FC6_W_I_WDATA),
    .WSTRB(m_axi_DATA_FC6_W_I_WSTRB),
    .WLAST(m_axi_DATA_FC6_W_I_WLAST),
    .WID(m_axi_DATA_FC6_W_I_WID),
    .WUSER(m_axi_DATA_FC6_W_I_WUSER),
    .ARVALID(m_axi_DATA_FC6_W_I_ARVALID),
    .ARREADY(m_axi_DATA_FC6_W_I_ARREADY),
    .ARADDR(m_axi_DATA_FC6_W_I_ARADDR),
    .ARID(m_axi_DATA_FC6_W_I_ARID),
    .ARLEN(m_axi_DATA_FC6_W_I_ARLEN),
    .ARSIZE(m_axi_DATA_FC6_W_I_ARSIZE),
    .ARBURST(m_axi_DATA_FC6_W_I_ARBURST),
    .ARLOCK(m_axi_DATA_FC6_W_I_ARLOCK),
    .ARCACHE(m_axi_DATA_FC6_W_I_ARCACHE),
    .ARPROT(m_axi_DATA_FC6_W_I_ARPROT),
    .ARQOS(m_axi_DATA_FC6_W_I_ARQOS),
    .ARREGION(m_axi_DATA_FC6_W_I_ARREGION),
    .ARUSER(m_axi_DATA_FC6_W_I_ARUSER),
    .RVALID(m_axi_DATA_FC6_W_I_RVALID),
    .RREADY(m_axi_DATA_FC6_W_I_RREADY),
    .RDATA(m_axi_DATA_FC6_W_I_RDATA),
    .RLAST(m_axi_DATA_FC6_W_I_RLAST),
    .RID(m_axi_DATA_FC6_W_I_RID),
    .RUSER(m_axi_DATA_FC6_W_I_RUSER),
    .RRESP(m_axi_DATA_FC6_W_I_RRESP),
    .BVALID(m_axi_DATA_FC6_W_I_BVALID),
    .BREADY(m_axi_DATA_FC6_W_I_BREADY),
    .BRESP(m_axi_DATA_FC6_W_I_BRESP),
    .BID(m_axi_DATA_FC6_W_I_BID),
    .BUSER(m_axi_DATA_FC6_W_I_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_FC6_W_I_ARVALID),
    .I_ARREADY(DATA_FC6_W_I_ARREADY),
    .I_ARADDR(grp_copy_w5_fu_1258_m_axi_in_r_ARADDR),
    .I_ARID(grp_copy_w5_fu_1258_m_axi_in_r_ARID),
    .I_ARLEN(grp_copy_w5_fu_1258_m_axi_in_r_ARLEN),
    .I_ARSIZE(grp_copy_w5_fu_1258_m_axi_in_r_ARSIZE),
    .I_ARLOCK(grp_copy_w5_fu_1258_m_axi_in_r_ARLOCK),
    .I_ARCACHE(grp_copy_w5_fu_1258_m_axi_in_r_ARCACHE),
    .I_ARQOS(grp_copy_w5_fu_1258_m_axi_in_r_ARQOS),
    .I_ARPROT(grp_copy_w5_fu_1258_m_axi_in_r_ARPROT),
    .I_ARUSER(grp_copy_w5_fu_1258_m_axi_in_r_ARUSER),
    .I_ARBURST(grp_copy_w5_fu_1258_m_axi_in_r_ARBURST),
    .I_ARREGION(grp_copy_w5_fu_1258_m_axi_in_r_ARREGION),
    .I_RVALID(DATA_FC6_W_I_RVALID),
    .I_RREADY(DATA_FC6_W_I_RREADY),
    .I_RDATA(DATA_FC6_W_I_RDATA),
    .I_RID(DATA_FC6_W_I_RID),
    .I_RUSER(DATA_FC6_W_I_RUSER),
    .I_RRESP(DATA_FC6_W_I_RRESP),
    .I_RLAST(DATA_FC6_W_I_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_FC6_W_I_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_FC6_W_I_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_FC6_W_I_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_FC6_W_I_BRESP),
    .I_BID(DATA_FC6_W_I_BID),
    .I_BUSER(DATA_FC6_W_I_BUSER)
);

lenet_wrapper_DATA_FC6_B_I_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_FC6_B_I_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_FC6_B_I_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_FC6_B_I_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_FC6_B_I_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_FC6_B_I_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_FC6_B_I_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_FC6_B_I_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_FC6_B_I_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_FC6_B_I_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_FC6_B_I_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_FC6_B_I_CACHE_VALUE ))
lenet_wrapper_DATA_FC6_B_I_m_axi_U(
    .AWVALID(m_axi_DATA_FC6_B_I_AWVALID),
    .AWREADY(m_axi_DATA_FC6_B_I_AWREADY),
    .AWADDR(m_axi_DATA_FC6_B_I_AWADDR),
    .AWID(m_axi_DATA_FC6_B_I_AWID),
    .AWLEN(m_axi_DATA_FC6_B_I_AWLEN),
    .AWSIZE(m_axi_DATA_FC6_B_I_AWSIZE),
    .AWBURST(m_axi_DATA_FC6_B_I_AWBURST),
    .AWLOCK(m_axi_DATA_FC6_B_I_AWLOCK),
    .AWCACHE(m_axi_DATA_FC6_B_I_AWCACHE),
    .AWPROT(m_axi_DATA_FC6_B_I_AWPROT),
    .AWQOS(m_axi_DATA_FC6_B_I_AWQOS),
    .AWREGION(m_axi_DATA_FC6_B_I_AWREGION),
    .AWUSER(m_axi_DATA_FC6_B_I_AWUSER),
    .WVALID(m_axi_DATA_FC6_B_I_WVALID),
    .WREADY(m_axi_DATA_FC6_B_I_WREADY),
    .WDATA(m_axi_DATA_FC6_B_I_WDATA),
    .WSTRB(m_axi_DATA_FC6_B_I_WSTRB),
    .WLAST(m_axi_DATA_FC6_B_I_WLAST),
    .WID(m_axi_DATA_FC6_B_I_WID),
    .WUSER(m_axi_DATA_FC6_B_I_WUSER),
    .ARVALID(m_axi_DATA_FC6_B_I_ARVALID),
    .ARREADY(m_axi_DATA_FC6_B_I_ARREADY),
    .ARADDR(m_axi_DATA_FC6_B_I_ARADDR),
    .ARID(m_axi_DATA_FC6_B_I_ARID),
    .ARLEN(m_axi_DATA_FC6_B_I_ARLEN),
    .ARSIZE(m_axi_DATA_FC6_B_I_ARSIZE),
    .ARBURST(m_axi_DATA_FC6_B_I_ARBURST),
    .ARLOCK(m_axi_DATA_FC6_B_I_ARLOCK),
    .ARCACHE(m_axi_DATA_FC6_B_I_ARCACHE),
    .ARPROT(m_axi_DATA_FC6_B_I_ARPROT),
    .ARQOS(m_axi_DATA_FC6_B_I_ARQOS),
    .ARREGION(m_axi_DATA_FC6_B_I_ARREGION),
    .ARUSER(m_axi_DATA_FC6_B_I_ARUSER),
    .RVALID(m_axi_DATA_FC6_B_I_RVALID),
    .RREADY(m_axi_DATA_FC6_B_I_RREADY),
    .RDATA(m_axi_DATA_FC6_B_I_RDATA),
    .RLAST(m_axi_DATA_FC6_B_I_RLAST),
    .RID(m_axi_DATA_FC6_B_I_RID),
    .RUSER(m_axi_DATA_FC6_B_I_RUSER),
    .RRESP(m_axi_DATA_FC6_B_I_RRESP),
    .BVALID(m_axi_DATA_FC6_B_I_BVALID),
    .BREADY(m_axi_DATA_FC6_B_I_BREADY),
    .BRESP(m_axi_DATA_FC6_B_I_BRESP),
    .BID(m_axi_DATA_FC6_B_I_BID),
    .BUSER(m_axi_DATA_FC6_B_I_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_FC6_B_I_ARVALID),
    .I_ARREADY(DATA_FC6_B_I_ARREADY),
    .I_ARADDR(grp_copy_b5_fu_1290_m_axi_in_r_ARADDR),
    .I_ARID(grp_copy_b5_fu_1290_m_axi_in_r_ARID),
    .I_ARLEN(grp_copy_b5_fu_1290_m_axi_in_r_ARLEN),
    .I_ARSIZE(grp_copy_b5_fu_1290_m_axi_in_r_ARSIZE),
    .I_ARLOCK(grp_copy_b5_fu_1290_m_axi_in_r_ARLOCK),
    .I_ARCACHE(grp_copy_b5_fu_1290_m_axi_in_r_ARCACHE),
    .I_ARQOS(grp_copy_b5_fu_1290_m_axi_in_r_ARQOS),
    .I_ARPROT(grp_copy_b5_fu_1290_m_axi_in_r_ARPROT),
    .I_ARUSER(grp_copy_b5_fu_1290_m_axi_in_r_ARUSER),
    .I_ARBURST(grp_copy_b5_fu_1290_m_axi_in_r_ARBURST),
    .I_ARREGION(grp_copy_b5_fu_1290_m_axi_in_r_ARREGION),
    .I_RVALID(DATA_FC6_B_I_RVALID),
    .I_RREADY(DATA_FC6_B_I_RREADY),
    .I_RDATA(DATA_FC6_B_I_RDATA),
    .I_RID(DATA_FC6_B_I_RID),
    .I_RUSER(DATA_FC6_B_I_RUSER),
    .I_RRESP(DATA_FC6_B_I_RRESP),
    .I_RLAST(DATA_FC6_B_I_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_FC6_B_I_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_FC6_B_I_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_FC6_B_I_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_FC6_B_I_BRESP),
    .I_BID(DATA_FC6_B_I_BID),
    .I_BUSER(DATA_FC6_B_I_BUSER)
);

lenet_wrapper_DATA_FC6_O_O_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_FC6_O_O_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_FC6_O_O_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_FC6_O_O_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_FC6_O_O_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_FC6_O_O_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_FC6_O_O_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_FC6_O_O_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_FC6_O_O_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_FC6_O_O_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_FC6_O_O_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_FC6_O_O_CACHE_VALUE ))
lenet_wrapper_DATA_FC6_O_O_m_axi_U(
    .AWVALID(m_axi_DATA_FC6_O_O_AWVALID),
    .AWREADY(m_axi_DATA_FC6_O_O_AWREADY),
    .AWADDR(m_axi_DATA_FC6_O_O_AWADDR),
    .AWID(m_axi_DATA_FC6_O_O_AWID),
    .AWLEN(m_axi_DATA_FC6_O_O_AWLEN),
    .AWSIZE(m_axi_DATA_FC6_O_O_AWSIZE),
    .AWBURST(m_axi_DATA_FC6_O_O_AWBURST),
    .AWLOCK(m_axi_DATA_FC6_O_O_AWLOCK),
    .AWCACHE(m_axi_DATA_FC6_O_O_AWCACHE),
    .AWPROT(m_axi_DATA_FC6_O_O_AWPROT),
    .AWQOS(m_axi_DATA_FC6_O_O_AWQOS),
    .AWREGION(m_axi_DATA_FC6_O_O_AWREGION),
    .AWUSER(m_axi_DATA_FC6_O_O_AWUSER),
    .WVALID(m_axi_DATA_FC6_O_O_WVALID),
    .WREADY(m_axi_DATA_FC6_O_O_WREADY),
    .WDATA(m_axi_DATA_FC6_O_O_WDATA),
    .WSTRB(m_axi_DATA_FC6_O_O_WSTRB),
    .WLAST(m_axi_DATA_FC6_O_O_WLAST),
    .WID(m_axi_DATA_FC6_O_O_WID),
    .WUSER(m_axi_DATA_FC6_O_O_WUSER),
    .ARVALID(m_axi_DATA_FC6_O_O_ARVALID),
    .ARREADY(m_axi_DATA_FC6_O_O_ARREADY),
    .ARADDR(m_axi_DATA_FC6_O_O_ARADDR),
    .ARID(m_axi_DATA_FC6_O_O_ARID),
    .ARLEN(m_axi_DATA_FC6_O_O_ARLEN),
    .ARSIZE(m_axi_DATA_FC6_O_O_ARSIZE),
    .ARBURST(m_axi_DATA_FC6_O_O_ARBURST),
    .ARLOCK(m_axi_DATA_FC6_O_O_ARLOCK),
    .ARCACHE(m_axi_DATA_FC6_O_O_ARCACHE),
    .ARPROT(m_axi_DATA_FC6_O_O_ARPROT),
    .ARQOS(m_axi_DATA_FC6_O_O_ARQOS),
    .ARREGION(m_axi_DATA_FC6_O_O_ARREGION),
    .ARUSER(m_axi_DATA_FC6_O_O_ARUSER),
    .RVALID(m_axi_DATA_FC6_O_O_RVALID),
    .RREADY(m_axi_DATA_FC6_O_O_RREADY),
    .RDATA(m_axi_DATA_FC6_O_O_RDATA),
    .RLAST(m_axi_DATA_FC6_O_O_RLAST),
    .RID(m_axi_DATA_FC6_O_O_RID),
    .RUSER(m_axi_DATA_FC6_O_O_RUSER),
    .RRESP(m_axi_DATA_FC6_O_O_RRESP),
    .BVALID(m_axi_DATA_FC6_O_O_BVALID),
    .BREADY(m_axi_DATA_FC6_O_O_BREADY),
    .BRESP(m_axi_DATA_FC6_O_O_BRESP),
    .BID(m_axi_DATA_FC6_O_O_BID),
    .BUSER(m_axi_DATA_FC6_O_O_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_FC6_O_O_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_FC6_O_O_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_FC6_O_O_RDATA),
    .I_RID(DATA_FC6_O_O_RID),
    .I_RUSER(DATA_FC6_O_O_RUSER),
    .I_RRESP(DATA_FC6_O_O_RRESP),
    .I_RLAST(DATA_FC6_O_O_RLAST),
    .I_AWVALID(DATA_FC6_O_O_AWVALID),
    .I_AWREADY(DATA_FC6_O_O_AWREADY),
    .I_AWADDR(grp_copy_out_fu_1314_m_axi_out_r_AWADDR),
    .I_AWID(grp_copy_out_fu_1314_m_axi_out_r_AWID),
    .I_AWLEN(grp_copy_out_fu_1314_m_axi_out_r_AWLEN),
    .I_AWSIZE(grp_copy_out_fu_1314_m_axi_out_r_AWSIZE),
    .I_AWLOCK(grp_copy_out_fu_1314_m_axi_out_r_AWLOCK),
    .I_AWCACHE(grp_copy_out_fu_1314_m_axi_out_r_AWCACHE),
    .I_AWQOS(grp_copy_out_fu_1314_m_axi_out_r_AWQOS),
    .I_AWPROT(grp_copy_out_fu_1314_m_axi_out_r_AWPROT),
    .I_AWUSER(grp_copy_out_fu_1314_m_axi_out_r_AWUSER),
    .I_AWBURST(grp_copy_out_fu_1314_m_axi_out_r_AWBURST),
    .I_AWREGION(grp_copy_out_fu_1314_m_axi_out_r_AWREGION),
    .I_WVALID(DATA_FC6_O_O_WVALID),
    .I_WREADY(DATA_FC6_O_O_WREADY),
    .I_WDATA(grp_copy_out_fu_1314_m_axi_out_r_WDATA),
    .I_WID(grp_copy_out_fu_1314_m_axi_out_r_WID),
    .I_WUSER(grp_copy_out_fu_1314_m_axi_out_r_WUSER),
    .I_WLAST(grp_copy_out_fu_1314_m_axi_out_r_WLAST),
    .I_WSTRB(grp_copy_out_fu_1314_m_axi_out_r_WSTRB),
    .I_BVALID(DATA_FC6_O_O_BVALID),
    .I_BREADY(DATA_FC6_O_O_BREADY),
    .I_BRESP(DATA_FC6_O_O_BRESP),
    .I_BID(DATA_FC6_O_O_BID),
    .I_BUSER(DATA_FC6_O_O_BUSER)
);

lenet_wrapper_DATA_DONE_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_DONE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_DONE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_DONE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_DONE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_DONE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_DONE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_DONE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_DONE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_DONE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_DONE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_DONE_CACHE_VALUE ))
lenet_wrapper_DATA_DONE_m_axi_U(
    .AWVALID(m_axi_DATA_DONE_AWVALID),
    .AWREADY(m_axi_DATA_DONE_AWREADY),
    .AWADDR(m_axi_DATA_DONE_AWADDR),
    .AWID(m_axi_DATA_DONE_AWID),
    .AWLEN(m_axi_DATA_DONE_AWLEN),
    .AWSIZE(m_axi_DATA_DONE_AWSIZE),
    .AWBURST(m_axi_DATA_DONE_AWBURST),
    .AWLOCK(m_axi_DATA_DONE_AWLOCK),
    .AWCACHE(m_axi_DATA_DONE_AWCACHE),
    .AWPROT(m_axi_DATA_DONE_AWPROT),
    .AWQOS(m_axi_DATA_DONE_AWQOS),
    .AWREGION(m_axi_DATA_DONE_AWREGION),
    .AWUSER(m_axi_DATA_DONE_AWUSER),
    .WVALID(m_axi_DATA_DONE_WVALID),
    .WREADY(m_axi_DATA_DONE_WREADY),
    .WDATA(m_axi_DATA_DONE_WDATA),
    .WSTRB(m_axi_DATA_DONE_WSTRB),
    .WLAST(m_axi_DATA_DONE_WLAST),
    .WID(m_axi_DATA_DONE_WID),
    .WUSER(m_axi_DATA_DONE_WUSER),
    .ARVALID(m_axi_DATA_DONE_ARVALID),
    .ARREADY(m_axi_DATA_DONE_ARREADY),
    .ARADDR(m_axi_DATA_DONE_ARADDR),
    .ARID(m_axi_DATA_DONE_ARID),
    .ARLEN(m_axi_DATA_DONE_ARLEN),
    .ARSIZE(m_axi_DATA_DONE_ARSIZE),
    .ARBURST(m_axi_DATA_DONE_ARBURST),
    .ARLOCK(m_axi_DATA_DONE_ARLOCK),
    .ARCACHE(m_axi_DATA_DONE_ARCACHE),
    .ARPROT(m_axi_DATA_DONE_ARPROT),
    .ARQOS(m_axi_DATA_DONE_ARQOS),
    .ARREGION(m_axi_DATA_DONE_ARREGION),
    .ARUSER(m_axi_DATA_DONE_ARUSER),
    .RVALID(m_axi_DATA_DONE_RVALID),
    .RREADY(m_axi_DATA_DONE_RREADY),
    .RDATA(m_axi_DATA_DONE_RDATA),
    .RLAST(m_axi_DATA_DONE_RLAST),
    .RID(m_axi_DATA_DONE_RID),
    .RUSER(m_axi_DATA_DONE_RUSER),
    .RRESP(m_axi_DATA_DONE_RRESP),
    .BVALID(m_axi_DATA_DONE_BVALID),
    .BREADY(m_axi_DATA_DONE_BREADY),
    .BRESP(m_axi_DATA_DONE_BRESP),
    .BID(m_axi_DATA_DONE_BID),
    .BUSER(m_axi_DATA_DONE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_DONE_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_DONE_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_DONE_RDATA),
    .I_RID(DATA_DONE_RID),
    .I_RUSER(DATA_DONE_RUSER),
    .I_RRESP(DATA_DONE_RRESP),
    .I_RLAST(DATA_DONE_RLAST),
    .I_AWVALID(DATA_DONE_AWVALID),
    .I_AWREADY(DATA_DONE_AWREADY),
    .I_AWADDR(DATA_DONE_addr_reg_2931),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(DATA_DONE_WVALID),
    .I_WREADY(DATA_DONE_WREADY),
    .I_WDATA(32'd1),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(DATA_DONE_BVALID),
    .I_BREADY(DATA_DONE_BREADY),
    .I_BRESP(DATA_DONE_BRESP),
    .I_BID(DATA_DONE_BID),
    .I_BUSER(DATA_DONE_BUSER)
);

lenet_wrapper_DATA_START_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_START_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_START_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_START_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_START_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_START_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_START_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_START_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_START_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_START_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_START_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_START_CACHE_VALUE ))
lenet_wrapper_DATA_START_m_axi_U(
    .AWVALID(m_axi_DATA_START_AWVALID),
    .AWREADY(m_axi_DATA_START_AWREADY),
    .AWADDR(m_axi_DATA_START_AWADDR),
    .AWID(m_axi_DATA_START_AWID),
    .AWLEN(m_axi_DATA_START_AWLEN),
    .AWSIZE(m_axi_DATA_START_AWSIZE),
    .AWBURST(m_axi_DATA_START_AWBURST),
    .AWLOCK(m_axi_DATA_START_AWLOCK),
    .AWCACHE(m_axi_DATA_START_AWCACHE),
    .AWPROT(m_axi_DATA_START_AWPROT),
    .AWQOS(m_axi_DATA_START_AWQOS),
    .AWREGION(m_axi_DATA_START_AWREGION),
    .AWUSER(m_axi_DATA_START_AWUSER),
    .WVALID(m_axi_DATA_START_WVALID),
    .WREADY(m_axi_DATA_START_WREADY),
    .WDATA(m_axi_DATA_START_WDATA),
    .WSTRB(m_axi_DATA_START_WSTRB),
    .WLAST(m_axi_DATA_START_WLAST),
    .WID(m_axi_DATA_START_WID),
    .WUSER(m_axi_DATA_START_WUSER),
    .ARVALID(m_axi_DATA_START_ARVALID),
    .ARREADY(m_axi_DATA_START_ARREADY),
    .ARADDR(m_axi_DATA_START_ARADDR),
    .ARID(m_axi_DATA_START_ARID),
    .ARLEN(m_axi_DATA_START_ARLEN),
    .ARSIZE(m_axi_DATA_START_ARSIZE),
    .ARBURST(m_axi_DATA_START_ARBURST),
    .ARLOCK(m_axi_DATA_START_ARLOCK),
    .ARCACHE(m_axi_DATA_START_ARCACHE),
    .ARPROT(m_axi_DATA_START_ARPROT),
    .ARQOS(m_axi_DATA_START_ARQOS),
    .ARREGION(m_axi_DATA_START_ARREGION),
    .ARUSER(m_axi_DATA_START_ARUSER),
    .RVALID(m_axi_DATA_START_RVALID),
    .RREADY(m_axi_DATA_START_RREADY),
    .RDATA(m_axi_DATA_START_RDATA),
    .RLAST(m_axi_DATA_START_RLAST),
    .RID(m_axi_DATA_START_RID),
    .RUSER(m_axi_DATA_START_RUSER),
    .RRESP(m_axi_DATA_START_RRESP),
    .BVALID(m_axi_DATA_START_BVALID),
    .BREADY(m_axi_DATA_START_BREADY),
    .BRESP(m_axi_DATA_START_BRESP),
    .BID(m_axi_DATA_START_BID),
    .BUSER(m_axi_DATA_START_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_START_ARVALID),
    .I_ARREADY(DATA_START_ARREADY),
    .I_ARADDR(DATA_START_addr_reg_2925),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_START_RVALID),
    .I_RREADY(DATA_START_RREADY),
    .I_RDATA(DATA_START_RDATA),
    .I_RID(DATA_START_RID),
    .I_RUSER(DATA_START_RUSER),
    .I_RRESP(DATA_START_RRESP),
    .I_RLAST(DATA_START_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_START_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_START_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_START_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_START_BRESP),
    .I_BID(DATA_START_BID),
    .I_BUSER(DATA_START_BUSER)
);

lenet_wrapper_imaocq #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
image_in_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_in_0_address0),
    .ce0(image_in_0_ce0),
    .we0(image_in_0_we0),
    .d0(image_in_0_d0),
    .q0(image_in_0_q0)
);

lenet_wrapper_c1_pcA #(
    .DataWidth( 32 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
c1_w_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c1_w_0_address0),
    .ce0(c1_w_0_ce0),
    .we0(c1_w_0_we0),
    .d0(c1_w_0_d0),
    .q0(c1_w_0_q0)
);

lenet_wrapper_c1_b #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
c1_b_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c1_b_address0),
    .ce0(c1_b_ce0),
    .we0(c1_b_we0),
    .d0(c1_b_d0),
    .q0(c1_b_q0)
);

lenet_wrapper_c3_w #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
c3_w_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c3_w_address0),
    .ce0(c3_w_ce0),
    .we0(c3_w_we0),
    .d0(c3_w_d0),
    .q0(c3_w_q0)
);

lenet_wrapper_c3_b #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
c3_b_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c3_b_address0),
    .ce0(c3_b_ce0),
    .we0(c3_b_we0),
    .d0(c3_b_d0),
    .q0(c3_b_q0)
);

lenet_wrapper_c5_w #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
c5_w_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_w_address0),
    .ce0(c5_w_ce0),
    .we0(c5_w_we0),
    .d0(c5_w_d0),
    .q0(c5_w_q0)
);

lenet_wrapper_c5_b #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
c5_b_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_b_address0),
    .ce0(c5_b_ce0),
    .we0(c5_b_we0),
    .d0(c5_b_d0),
    .q0(c5_b_q0)
);

lenet_wrapper_fc6qcK #(
    .DataWidth( 32 ),
    .AddressRange( 1200 ),
    .AddressWidth( 11 ))
fc6_w_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc6_w_0_0_address0),
    .ce0(fc6_w_0_0_ce0),
    .we0(fc6_w_0_0_we0),
    .d0(fc6_w_0_0_d0),
    .q0(fc6_w_0_0_q0)
);

lenet_wrapper_fc6_b #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
fc6_b_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc6_b_address0),
    .ce0(fc6_b_ce0),
    .we0(fc6_b_we0),
    .d0(fc6_b_d0),
    .q0(fc6_b_q0)
);

convolution3 grp_convolution3_fu_1213(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution3_fu_1213_ap_start),
    .ap_done(grp_convolution3_fu_1213_ap_done),
    .ap_idle(grp_convolution3_fu_1213_ap_idle),
    .ap_ready(grp_convolution3_fu_1213_ap_ready),
    .conv3_w_address0(grp_convolution3_fu_1213_conv3_w_address0),
    .conv3_w_ce0(grp_convolution3_fu_1213_conv3_w_ce0),
    .conv3_w_q0(c3_w_q0),
    .conv3_b_address0(grp_convolution3_fu_1213_conv3_b_address0),
    .conv3_b_ce0(grp_convolution3_fu_1213_conv3_b_ce0),
    .conv3_b_q0(c3_b_q0),
    .output_r_address0(grp_convolution3_fu_1213_output_r_address0),
    .output_r_ce0(grp_convolution3_fu_1213_output_r_ce0),
    .output_r_we0(grp_convolution3_fu_1213_output_r_we0),
    .output_r_d0(grp_convolution3_fu_1213_output_r_d0),
    .p2_o_2_address0(grp_convolution3_fu_1213_p2_o_2_address0),
    .p2_o_2_ce0(grp_convolution3_fu_1213_p2_o_2_ce0),
    .p2_o_2_q0(p2_o_2_q0)
);

convolution1 grp_convolution1_fu_1223(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution1_fu_1223_ap_start),
    .ap_done(grp_convolution1_fu_1223_ap_done),
    .ap_idle(grp_convolution1_fu_1223_ap_idle),
    .ap_ready(grp_convolution1_fu_1223_ap_ready),
    .input_0_address0(grp_convolution1_fu_1223_input_0_address0),
    .input_0_ce0(grp_convolution1_fu_1223_input_0_ce0),
    .input_0_q0(image_in_0_q0),
    .conv1_w_0_address0(grp_convolution1_fu_1223_conv1_w_0_address0),
    .conv1_w_0_ce0(grp_convolution1_fu_1223_conv1_w_0_ce0),
    .conv1_w_0_q0(c1_w_0_q0),
    .conv1_b_address0(grp_convolution1_fu_1223_conv1_b_address0),
    .conv1_b_ce0(grp_convolution1_fu_1223_conv1_b_ce0),
    .conv1_b_q0(c1_b_q0),
    .output_r_address0(grp_convolution1_fu_1223_output_r_address0),
    .output_r_ce0(grp_convolution1_fu_1223_output_r_ce0),
    .output_r_we0(grp_convolution1_fu_1223_output_r_we0),
    .output_r_d0(grp_convolution1_fu_1223_output_r_d0)
);

convolution5 grp_convolution5_fu_1232(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution5_fu_1232_ap_start),
    .ap_done(grp_convolution5_fu_1232_ap_done),
    .ap_idle(grp_convolution5_fu_1232_ap_idle),
    .ap_ready(grp_convolution5_fu_1232_ap_ready),
    .conv5_w_address0(grp_convolution5_fu_1232_conv5_w_address0),
    .conv5_w_ce0(grp_convolution5_fu_1232_conv5_w_ce0),
    .conv5_w_q0(c5_w_q0),
    .conv5_b_address0(grp_convolution5_fu_1232_conv5_b_address0),
    .conv5_b_ce0(grp_convolution5_fu_1232_conv5_b_ce0),
    .conv5_b_q0(c5_b_q0),
    .output_0_0_address0(grp_convolution5_fu_1232_output_0_0_address0),
    .output_0_0_ce0(grp_convolution5_fu_1232_output_0_0_ce0),
    .output_0_0_we0(grp_convolution5_fu_1232_output_0_0_we0),
    .output_0_0_d0(grp_convolution5_fu_1232_output_0_0_d0),
    .p4_o_2_address0(grp_convolution5_fu_1232_p4_o_2_address0),
    .p4_o_2_ce0(grp_convolution5_fu_1232_p4_o_2_ce0),
    .p4_o_2_q0(p4_o_2_q0)
);

max_pooling2 grp_max_pooling2_fu_1242(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pooling2_fu_1242_ap_start),
    .ap_done(grp_max_pooling2_fu_1242_ap_done),
    .ap_idle(grp_max_pooling2_fu_1242_ap_idle),
    .ap_ready(grp_max_pooling2_fu_1242_ap_ready),
    .output_r_address0(grp_max_pooling2_fu_1242_output_r_address0),
    .output_r_ce0(grp_max_pooling2_fu_1242_output_r_ce0),
    .output_r_we0(grp_max_pooling2_fu_1242_output_r_we0),
    .output_r_d0(grp_max_pooling2_fu_1242_output_r_d0),
    .c1_o_2_address0(grp_max_pooling2_fu_1242_c1_o_2_address0),
    .c1_o_2_ce0(grp_max_pooling2_fu_1242_c1_o_2_ce0),
    .c1_o_2_q0(c1_o_2_q0)
);

max_pooling4 grp_max_pooling4_fu_1250(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pooling4_fu_1250_ap_start),
    .ap_done(grp_max_pooling4_fu_1250_ap_done),
    .ap_idle(grp_max_pooling4_fu_1250_ap_idle),
    .ap_ready(grp_max_pooling4_fu_1250_ap_ready),
    .output_r_address0(grp_max_pooling4_fu_1250_output_r_address0),
    .output_r_ce0(grp_max_pooling4_fu_1250_output_r_ce0),
    .output_r_we0(grp_max_pooling4_fu_1250_output_r_we0),
    .output_r_d0(grp_max_pooling4_fu_1250_output_r_d0),
    .c3_o_2_address0(grp_max_pooling4_fu_1250_c3_o_2_address0),
    .c3_o_2_ce0(grp_max_pooling4_fu_1250_c3_o_2_ce0),
    .c3_o_2_q0(c3_o_2_q0)
);

copy_w5 grp_copy_w5_fu_1258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_w5_fu_1258_ap_start),
    .ap_done(grp_copy_w5_fu_1258_ap_done),
    .ap_idle(grp_copy_w5_fu_1258_ap_idle),
    .ap_ready(grp_copy_w5_fu_1258_ap_ready),
    .m_axi_in_r_AWVALID(grp_copy_w5_fu_1258_m_axi_in_r_AWVALID),
    .m_axi_in_r_AWREADY(1'b0),
    .m_axi_in_r_AWADDR(grp_copy_w5_fu_1258_m_axi_in_r_AWADDR),
    .m_axi_in_r_AWID(grp_copy_w5_fu_1258_m_axi_in_r_AWID),
    .m_axi_in_r_AWLEN(grp_copy_w5_fu_1258_m_axi_in_r_AWLEN),
    .m_axi_in_r_AWSIZE(grp_copy_w5_fu_1258_m_axi_in_r_AWSIZE),
    .m_axi_in_r_AWBURST(grp_copy_w5_fu_1258_m_axi_in_r_AWBURST),
    .m_axi_in_r_AWLOCK(grp_copy_w5_fu_1258_m_axi_in_r_AWLOCK),
    .m_axi_in_r_AWCACHE(grp_copy_w5_fu_1258_m_axi_in_r_AWCACHE),
    .m_axi_in_r_AWPROT(grp_copy_w5_fu_1258_m_axi_in_r_AWPROT),
    .m_axi_in_r_AWQOS(grp_copy_w5_fu_1258_m_axi_in_r_AWQOS),
    .m_axi_in_r_AWREGION(grp_copy_w5_fu_1258_m_axi_in_r_AWREGION),
    .m_axi_in_r_AWUSER(grp_copy_w5_fu_1258_m_axi_in_r_AWUSER),
    .m_axi_in_r_WVALID(grp_copy_w5_fu_1258_m_axi_in_r_WVALID),
    .m_axi_in_r_WREADY(1'b0),
    .m_axi_in_r_WDATA(grp_copy_w5_fu_1258_m_axi_in_r_WDATA),
    .m_axi_in_r_WSTRB(grp_copy_w5_fu_1258_m_axi_in_r_WSTRB),
    .m_axi_in_r_WLAST(grp_copy_w5_fu_1258_m_axi_in_r_WLAST),
    .m_axi_in_r_WID(grp_copy_w5_fu_1258_m_axi_in_r_WID),
    .m_axi_in_r_WUSER(grp_copy_w5_fu_1258_m_axi_in_r_WUSER),
    .m_axi_in_r_ARVALID(grp_copy_w5_fu_1258_m_axi_in_r_ARVALID),
    .m_axi_in_r_ARREADY(DATA_FC6_W_I_ARREADY),
    .m_axi_in_r_ARADDR(grp_copy_w5_fu_1258_m_axi_in_r_ARADDR),
    .m_axi_in_r_ARID(grp_copy_w5_fu_1258_m_axi_in_r_ARID),
    .m_axi_in_r_ARLEN(grp_copy_w5_fu_1258_m_axi_in_r_ARLEN),
    .m_axi_in_r_ARSIZE(grp_copy_w5_fu_1258_m_axi_in_r_ARSIZE),
    .m_axi_in_r_ARBURST(grp_copy_w5_fu_1258_m_axi_in_r_ARBURST),
    .m_axi_in_r_ARLOCK(grp_copy_w5_fu_1258_m_axi_in_r_ARLOCK),
    .m_axi_in_r_ARCACHE(grp_copy_w5_fu_1258_m_axi_in_r_ARCACHE),
    .m_axi_in_r_ARPROT(grp_copy_w5_fu_1258_m_axi_in_r_ARPROT),
    .m_axi_in_r_ARQOS(grp_copy_w5_fu_1258_m_axi_in_r_ARQOS),
    .m_axi_in_r_ARREGION(grp_copy_w5_fu_1258_m_axi_in_r_ARREGION),
    .m_axi_in_r_ARUSER(grp_copy_w5_fu_1258_m_axi_in_r_ARUSER),
    .m_axi_in_r_RVALID(DATA_FC6_W_I_RVALID),
    .m_axi_in_r_RREADY(grp_copy_w5_fu_1258_m_axi_in_r_RREADY),
    .m_axi_in_r_RDATA(DATA_FC6_W_I_RDATA),
    .m_axi_in_r_RLAST(DATA_FC6_W_I_RLAST),
    .m_axi_in_r_RID(DATA_FC6_W_I_RID),
    .m_axi_in_r_RUSER(DATA_FC6_W_I_RUSER),
    .m_axi_in_r_RRESP(DATA_FC6_W_I_RRESP),
    .m_axi_in_r_BVALID(1'b0),
    .m_axi_in_r_BREADY(grp_copy_w5_fu_1258_m_axi_in_r_BREADY),
    .m_axi_in_r_BRESP(2'd0),
    .m_axi_in_r_BID(1'd0),
    .m_axi_in_r_BUSER(1'd0),
    .c5_w_i11(c5_w_i1_reg_2946),
    .out_r_address0(grp_copy_w5_fu_1258_out_r_address0),
    .out_r_ce0(grp_copy_w5_fu_1258_out_r_ce0),
    .out_r_we0(grp_copy_w5_fu_1258_out_r_we0),
    .out_r_d0(grp_copy_w5_fu_1258_out_r_d0)
);

copy_w3 grp_copy_w3_fu_1266(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_w3_fu_1266_ap_start),
    .ap_done(grp_copy_w3_fu_1266_ap_done),
    .ap_idle(grp_copy_w3_fu_1266_ap_idle),
    .ap_ready(grp_copy_w3_fu_1266_ap_ready),
    .m_axi_in_r_AWVALID(grp_copy_w3_fu_1266_m_axi_in_r_AWVALID),
    .m_axi_in_r_AWREADY(1'b0),
    .m_axi_in_r_AWADDR(grp_copy_w3_fu_1266_m_axi_in_r_AWADDR),
    .m_axi_in_r_AWID(grp_copy_w3_fu_1266_m_axi_in_r_AWID),
    .m_axi_in_r_AWLEN(grp_copy_w3_fu_1266_m_axi_in_r_AWLEN),
    .m_axi_in_r_AWSIZE(grp_copy_w3_fu_1266_m_axi_in_r_AWSIZE),
    .m_axi_in_r_AWBURST(grp_copy_w3_fu_1266_m_axi_in_r_AWBURST),
    .m_axi_in_r_AWLOCK(grp_copy_w3_fu_1266_m_axi_in_r_AWLOCK),
    .m_axi_in_r_AWCACHE(grp_copy_w3_fu_1266_m_axi_in_r_AWCACHE),
    .m_axi_in_r_AWPROT(grp_copy_w3_fu_1266_m_axi_in_r_AWPROT),
    .m_axi_in_r_AWQOS(grp_copy_w3_fu_1266_m_axi_in_r_AWQOS),
    .m_axi_in_r_AWREGION(grp_copy_w3_fu_1266_m_axi_in_r_AWREGION),
    .m_axi_in_r_AWUSER(grp_copy_w3_fu_1266_m_axi_in_r_AWUSER),
    .m_axi_in_r_WVALID(grp_copy_w3_fu_1266_m_axi_in_r_WVALID),
    .m_axi_in_r_WREADY(1'b0),
    .m_axi_in_r_WDATA(grp_copy_w3_fu_1266_m_axi_in_r_WDATA),
    .m_axi_in_r_WSTRB(grp_copy_w3_fu_1266_m_axi_in_r_WSTRB),
    .m_axi_in_r_WLAST(grp_copy_w3_fu_1266_m_axi_in_r_WLAST),
    .m_axi_in_r_WID(grp_copy_w3_fu_1266_m_axi_in_r_WID),
    .m_axi_in_r_WUSER(grp_copy_w3_fu_1266_m_axi_in_r_WUSER),
    .m_axi_in_r_ARVALID(grp_copy_w3_fu_1266_m_axi_in_r_ARVALID),
    .m_axi_in_r_ARREADY(DATA_C3_W_I_ARREADY),
    .m_axi_in_r_ARADDR(grp_copy_w3_fu_1266_m_axi_in_r_ARADDR),
    .m_axi_in_r_ARID(grp_copy_w3_fu_1266_m_axi_in_r_ARID),
    .m_axi_in_r_ARLEN(grp_copy_w3_fu_1266_m_axi_in_r_ARLEN),
    .m_axi_in_r_ARSIZE(grp_copy_w3_fu_1266_m_axi_in_r_ARSIZE),
    .m_axi_in_r_ARBURST(grp_copy_w3_fu_1266_m_axi_in_r_ARBURST),
    .m_axi_in_r_ARLOCK(grp_copy_w3_fu_1266_m_axi_in_r_ARLOCK),
    .m_axi_in_r_ARCACHE(grp_copy_w3_fu_1266_m_axi_in_r_ARCACHE),
    .m_axi_in_r_ARPROT(grp_copy_w3_fu_1266_m_axi_in_r_ARPROT),
    .m_axi_in_r_ARQOS(grp_copy_w3_fu_1266_m_axi_in_r_ARQOS),
    .m_axi_in_r_ARREGION(grp_copy_w3_fu_1266_m_axi_in_r_ARREGION),
    .m_axi_in_r_ARUSER(grp_copy_w3_fu_1266_m_axi_in_r_ARUSER),
    .m_axi_in_r_RVALID(DATA_C3_W_I_RVALID),
    .m_axi_in_r_RREADY(grp_copy_w3_fu_1266_m_axi_in_r_RREADY),
    .m_axi_in_r_RDATA(DATA_C3_W_I_RDATA),
    .m_axi_in_r_RLAST(DATA_C3_W_I_RLAST),
    .m_axi_in_r_RID(DATA_C3_W_I_RID),
    .m_axi_in_r_RUSER(DATA_C3_W_I_RUSER),
    .m_axi_in_r_RRESP(DATA_C3_W_I_RRESP),
    .m_axi_in_r_BVALID(1'b0),
    .m_axi_in_r_BREADY(grp_copy_w3_fu_1266_m_axi_in_r_BREADY),
    .m_axi_in_r_BRESP(2'd0),
    .m_axi_in_r_BID(1'd0),
    .m_axi_in_r_BUSER(1'd0),
    .c3_w_i7(c3_w_i7_reg_2956),
    .out_r_address0(grp_copy_w3_fu_1266_out_r_address0),
    .out_r_ce0(grp_copy_w3_fu_1266_out_r_ce0),
    .out_r_we0(grp_copy_w3_fu_1266_out_r_we0),
    .out_r_d0(grp_copy_w3_fu_1266_out_r_d0)
);

copy_w1 grp_copy_w1_fu_1274(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_w1_fu_1274_ap_start),
    .ap_done(grp_copy_w1_fu_1274_ap_done),
    .ap_idle(grp_copy_w1_fu_1274_ap_idle),
    .ap_ready(grp_copy_w1_fu_1274_ap_ready),
    .m_axi_in_r_AWVALID(grp_copy_w1_fu_1274_m_axi_in_r_AWVALID),
    .m_axi_in_r_AWREADY(1'b0),
    .m_axi_in_r_AWADDR(grp_copy_w1_fu_1274_m_axi_in_r_AWADDR),
    .m_axi_in_r_AWID(grp_copy_w1_fu_1274_m_axi_in_r_AWID),
    .m_axi_in_r_AWLEN(grp_copy_w1_fu_1274_m_axi_in_r_AWLEN),
    .m_axi_in_r_AWSIZE(grp_copy_w1_fu_1274_m_axi_in_r_AWSIZE),
    .m_axi_in_r_AWBURST(grp_copy_w1_fu_1274_m_axi_in_r_AWBURST),
    .m_axi_in_r_AWLOCK(grp_copy_w1_fu_1274_m_axi_in_r_AWLOCK),
    .m_axi_in_r_AWCACHE(grp_copy_w1_fu_1274_m_axi_in_r_AWCACHE),
    .m_axi_in_r_AWPROT(grp_copy_w1_fu_1274_m_axi_in_r_AWPROT),
    .m_axi_in_r_AWQOS(grp_copy_w1_fu_1274_m_axi_in_r_AWQOS),
    .m_axi_in_r_AWREGION(grp_copy_w1_fu_1274_m_axi_in_r_AWREGION),
    .m_axi_in_r_AWUSER(grp_copy_w1_fu_1274_m_axi_in_r_AWUSER),
    .m_axi_in_r_WVALID(grp_copy_w1_fu_1274_m_axi_in_r_WVALID),
    .m_axi_in_r_WREADY(1'b0),
    .m_axi_in_r_WDATA(grp_copy_w1_fu_1274_m_axi_in_r_WDATA),
    .m_axi_in_r_WSTRB(grp_copy_w1_fu_1274_m_axi_in_r_WSTRB),
    .m_axi_in_r_WLAST(grp_copy_w1_fu_1274_m_axi_in_r_WLAST),
    .m_axi_in_r_WID(grp_copy_w1_fu_1274_m_axi_in_r_WID),
    .m_axi_in_r_WUSER(grp_copy_w1_fu_1274_m_axi_in_r_WUSER),
    .m_axi_in_r_ARVALID(grp_copy_w1_fu_1274_m_axi_in_r_ARVALID),
    .m_axi_in_r_ARREADY(DATA_C1_W_I_ARREADY),
    .m_axi_in_r_ARADDR(grp_copy_w1_fu_1274_m_axi_in_r_ARADDR),
    .m_axi_in_r_ARID(grp_copy_w1_fu_1274_m_axi_in_r_ARID),
    .m_axi_in_r_ARLEN(grp_copy_w1_fu_1274_m_axi_in_r_ARLEN),
    .m_axi_in_r_ARSIZE(grp_copy_w1_fu_1274_m_axi_in_r_ARSIZE),
    .m_axi_in_r_ARBURST(grp_copy_w1_fu_1274_m_axi_in_r_ARBURST),
    .m_axi_in_r_ARLOCK(grp_copy_w1_fu_1274_m_axi_in_r_ARLOCK),
    .m_axi_in_r_ARCACHE(grp_copy_w1_fu_1274_m_axi_in_r_ARCACHE),
    .m_axi_in_r_ARPROT(grp_copy_w1_fu_1274_m_axi_in_r_ARPROT),
    .m_axi_in_r_ARQOS(grp_copy_w1_fu_1274_m_axi_in_r_ARQOS),
    .m_axi_in_r_ARREGION(grp_copy_w1_fu_1274_m_axi_in_r_ARREGION),
    .m_axi_in_r_ARUSER(grp_copy_w1_fu_1274_m_axi_in_r_ARUSER),
    .m_axi_in_r_RVALID(DATA_C1_W_I_RVALID),
    .m_axi_in_r_RREADY(grp_copy_w1_fu_1274_m_axi_in_r_RREADY),
    .m_axi_in_r_RDATA(DATA_C1_W_I_RDATA),
    .m_axi_in_r_RLAST(DATA_C1_W_I_RLAST),
    .m_axi_in_r_RID(DATA_C1_W_I_RID),
    .m_axi_in_r_RUSER(DATA_C1_W_I_RUSER),
    .m_axi_in_r_RRESP(DATA_C1_W_I_RRESP),
    .m_axi_in_r_BVALID(1'b0),
    .m_axi_in_r_BREADY(grp_copy_w1_fu_1274_m_axi_in_r_BREADY),
    .m_axi_in_r_BRESP(2'd0),
    .m_axi_in_r_BID(1'd0),
    .m_axi_in_r_BUSER(1'd0),
    .c1_w_i3(c1_w_i3_reg_2966),
    .out_0_address0(grp_copy_w1_fu_1274_out_0_address0),
    .out_0_ce0(grp_copy_w1_fu_1274_out_0_ce0),
    .out_0_we0(grp_copy_w1_fu_1274_out_0_we0),
    .out_0_d0(grp_copy_w1_fu_1274_out_0_d0)
);

copy_i grp_copy_i_fu_1282(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_i_fu_1282_ap_start),
    .ap_done(grp_copy_i_fu_1282_ap_done),
    .ap_idle(grp_copy_i_fu_1282_ap_idle),
    .ap_ready(grp_copy_i_fu_1282_ap_ready),
    .m_axi_in_r_AWVALID(grp_copy_i_fu_1282_m_axi_in_r_AWVALID),
    .m_axi_in_r_AWREADY(1'b0),
    .m_axi_in_r_AWADDR(grp_copy_i_fu_1282_m_axi_in_r_AWADDR),
    .m_axi_in_r_AWID(grp_copy_i_fu_1282_m_axi_in_r_AWID),
    .m_axi_in_r_AWLEN(grp_copy_i_fu_1282_m_axi_in_r_AWLEN),
    .m_axi_in_r_AWSIZE(grp_copy_i_fu_1282_m_axi_in_r_AWSIZE),
    .m_axi_in_r_AWBURST(grp_copy_i_fu_1282_m_axi_in_r_AWBURST),
    .m_axi_in_r_AWLOCK(grp_copy_i_fu_1282_m_axi_in_r_AWLOCK),
    .m_axi_in_r_AWCACHE(grp_copy_i_fu_1282_m_axi_in_r_AWCACHE),
    .m_axi_in_r_AWPROT(grp_copy_i_fu_1282_m_axi_in_r_AWPROT),
    .m_axi_in_r_AWQOS(grp_copy_i_fu_1282_m_axi_in_r_AWQOS),
    .m_axi_in_r_AWREGION(grp_copy_i_fu_1282_m_axi_in_r_AWREGION),
    .m_axi_in_r_AWUSER(grp_copy_i_fu_1282_m_axi_in_r_AWUSER),
    .m_axi_in_r_WVALID(grp_copy_i_fu_1282_m_axi_in_r_WVALID),
    .m_axi_in_r_WREADY(1'b0),
    .m_axi_in_r_WDATA(grp_copy_i_fu_1282_m_axi_in_r_WDATA),
    .m_axi_in_r_WSTRB(grp_copy_i_fu_1282_m_axi_in_r_WSTRB),
    .m_axi_in_r_WLAST(grp_copy_i_fu_1282_m_axi_in_r_WLAST),
    .m_axi_in_r_WID(grp_copy_i_fu_1282_m_axi_in_r_WID),
    .m_axi_in_r_WUSER(grp_copy_i_fu_1282_m_axi_in_r_WUSER),
    .m_axi_in_r_ARVALID(grp_copy_i_fu_1282_m_axi_in_r_ARVALID),
    .m_axi_in_r_ARREADY(DATA_IMAGE_IN_I_ARREADY),
    .m_axi_in_r_ARADDR(grp_copy_i_fu_1282_m_axi_in_r_ARADDR),
    .m_axi_in_r_ARID(grp_copy_i_fu_1282_m_axi_in_r_ARID),
    .m_axi_in_r_ARLEN(grp_copy_i_fu_1282_m_axi_in_r_ARLEN),
    .m_axi_in_r_ARSIZE(grp_copy_i_fu_1282_m_axi_in_r_ARSIZE),
    .m_axi_in_r_ARBURST(grp_copy_i_fu_1282_m_axi_in_r_ARBURST),
    .m_axi_in_r_ARLOCK(grp_copy_i_fu_1282_m_axi_in_r_ARLOCK),
    .m_axi_in_r_ARCACHE(grp_copy_i_fu_1282_m_axi_in_r_ARCACHE),
    .m_axi_in_r_ARPROT(grp_copy_i_fu_1282_m_axi_in_r_ARPROT),
    .m_axi_in_r_ARQOS(grp_copy_i_fu_1282_m_axi_in_r_ARQOS),
    .m_axi_in_r_ARREGION(grp_copy_i_fu_1282_m_axi_in_r_ARREGION),
    .m_axi_in_r_ARUSER(grp_copy_i_fu_1282_m_axi_in_r_ARUSER),
    .m_axi_in_r_RVALID(DATA_IMAGE_IN_I_RVALID),
    .m_axi_in_r_RREADY(grp_copy_i_fu_1282_m_axi_in_r_RREADY),
    .m_axi_in_r_RDATA(DATA_IMAGE_IN_I_RDATA),
    .m_axi_in_r_RLAST(DATA_IMAGE_IN_I_RLAST),
    .m_axi_in_r_RID(DATA_IMAGE_IN_I_RID),
    .m_axi_in_r_RUSER(DATA_IMAGE_IN_I_RUSER),
    .m_axi_in_r_RRESP(DATA_IMAGE_IN_I_RRESP),
    .m_axi_in_r_BVALID(1'b0),
    .m_axi_in_r_BREADY(grp_copy_i_fu_1282_m_axi_in_r_BREADY),
    .m_axi_in_r_BRESP(2'd0),
    .m_axi_in_r_BID(1'd0),
    .m_axi_in_r_BUSER(1'd0),
    .image_in_i1(image_in_i1_reg_2971),
    .out_0_address0(grp_copy_i_fu_1282_out_0_address0),
    .out_0_ce0(grp_copy_i_fu_1282_out_0_ce0),
    .out_0_we0(grp_copy_i_fu_1282_out_0_we0),
    .out_0_d0(grp_copy_i_fu_1282_out_0_d0)
);

copy_b5 grp_copy_b5_fu_1290(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_b5_fu_1290_ap_start),
    .ap_done(grp_copy_b5_fu_1290_ap_done),
    .ap_idle(grp_copy_b5_fu_1290_ap_idle),
    .ap_ready(grp_copy_b5_fu_1290_ap_ready),
    .m_axi_in_r_AWVALID(grp_copy_b5_fu_1290_m_axi_in_r_AWVALID),
    .m_axi_in_r_AWREADY(1'b0),
    .m_axi_in_r_AWADDR(grp_copy_b5_fu_1290_m_axi_in_r_AWADDR),
    .m_axi_in_r_AWID(grp_copy_b5_fu_1290_m_axi_in_r_AWID),
    .m_axi_in_r_AWLEN(grp_copy_b5_fu_1290_m_axi_in_r_AWLEN),
    .m_axi_in_r_AWSIZE(grp_copy_b5_fu_1290_m_axi_in_r_AWSIZE),
    .m_axi_in_r_AWBURST(grp_copy_b5_fu_1290_m_axi_in_r_AWBURST),
    .m_axi_in_r_AWLOCK(grp_copy_b5_fu_1290_m_axi_in_r_AWLOCK),
    .m_axi_in_r_AWCACHE(grp_copy_b5_fu_1290_m_axi_in_r_AWCACHE),
    .m_axi_in_r_AWPROT(grp_copy_b5_fu_1290_m_axi_in_r_AWPROT),
    .m_axi_in_r_AWQOS(grp_copy_b5_fu_1290_m_axi_in_r_AWQOS),
    .m_axi_in_r_AWREGION(grp_copy_b5_fu_1290_m_axi_in_r_AWREGION),
    .m_axi_in_r_AWUSER(grp_copy_b5_fu_1290_m_axi_in_r_AWUSER),
    .m_axi_in_r_WVALID(grp_copy_b5_fu_1290_m_axi_in_r_WVALID),
    .m_axi_in_r_WREADY(1'b0),
    .m_axi_in_r_WDATA(grp_copy_b5_fu_1290_m_axi_in_r_WDATA),
    .m_axi_in_r_WSTRB(grp_copy_b5_fu_1290_m_axi_in_r_WSTRB),
    .m_axi_in_r_WLAST(grp_copy_b5_fu_1290_m_axi_in_r_WLAST),
    .m_axi_in_r_WID(grp_copy_b5_fu_1290_m_axi_in_r_WID),
    .m_axi_in_r_WUSER(grp_copy_b5_fu_1290_m_axi_in_r_WUSER),
    .m_axi_in_r_ARVALID(grp_copy_b5_fu_1290_m_axi_in_r_ARVALID),
    .m_axi_in_r_ARREADY(DATA_FC6_B_I_ARREADY),
    .m_axi_in_r_ARADDR(grp_copy_b5_fu_1290_m_axi_in_r_ARADDR),
    .m_axi_in_r_ARID(grp_copy_b5_fu_1290_m_axi_in_r_ARID),
    .m_axi_in_r_ARLEN(grp_copy_b5_fu_1290_m_axi_in_r_ARLEN),
    .m_axi_in_r_ARSIZE(grp_copy_b5_fu_1290_m_axi_in_r_ARSIZE),
    .m_axi_in_r_ARBURST(grp_copy_b5_fu_1290_m_axi_in_r_ARBURST),
    .m_axi_in_r_ARLOCK(grp_copy_b5_fu_1290_m_axi_in_r_ARLOCK),
    .m_axi_in_r_ARCACHE(grp_copy_b5_fu_1290_m_axi_in_r_ARCACHE),
    .m_axi_in_r_ARPROT(grp_copy_b5_fu_1290_m_axi_in_r_ARPROT),
    .m_axi_in_r_ARQOS(grp_copy_b5_fu_1290_m_axi_in_r_ARQOS),
    .m_axi_in_r_ARREGION(grp_copy_b5_fu_1290_m_axi_in_r_ARREGION),
    .m_axi_in_r_ARUSER(grp_copy_b5_fu_1290_m_axi_in_r_ARUSER),
    .m_axi_in_r_RVALID(DATA_FC6_B_I_RVALID),
    .m_axi_in_r_RREADY(grp_copy_b5_fu_1290_m_axi_in_r_RREADY),
    .m_axi_in_r_RDATA(DATA_FC6_B_I_RDATA),
    .m_axi_in_r_RLAST(DATA_FC6_B_I_RLAST),
    .m_axi_in_r_RID(DATA_FC6_B_I_RID),
    .m_axi_in_r_RUSER(DATA_FC6_B_I_RUSER),
    .m_axi_in_r_RRESP(DATA_FC6_B_I_RRESP),
    .m_axi_in_r_BVALID(1'b0),
    .m_axi_in_r_BREADY(grp_copy_b5_fu_1290_m_axi_in_r_BREADY),
    .m_axi_in_r_BRESP(2'd0),
    .m_axi_in_r_BID(1'd0),
    .m_axi_in_r_BUSER(1'd0),
    .c5_b_i13(c5_b_i1_reg_2941),
    .out_r_address0(grp_copy_b5_fu_1290_out_r_address0),
    .out_r_ce0(grp_copy_b5_fu_1290_out_r_ce0),
    .out_r_we0(grp_copy_b5_fu_1290_out_r_we0),
    .out_r_d0(grp_copy_b5_fu_1290_out_r_d0)
);

copy_b3 grp_copy_b3_fu_1298(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_b3_fu_1298_ap_start),
    .ap_done(grp_copy_b3_fu_1298_ap_done),
    .ap_idle(grp_copy_b3_fu_1298_ap_idle),
    .ap_ready(grp_copy_b3_fu_1298_ap_ready),
    .m_axi_in_r_AWVALID(grp_copy_b3_fu_1298_m_axi_in_r_AWVALID),
    .m_axi_in_r_AWREADY(1'b0),
    .m_axi_in_r_AWADDR(grp_copy_b3_fu_1298_m_axi_in_r_AWADDR),
    .m_axi_in_r_AWID(grp_copy_b3_fu_1298_m_axi_in_r_AWID),
    .m_axi_in_r_AWLEN(grp_copy_b3_fu_1298_m_axi_in_r_AWLEN),
    .m_axi_in_r_AWSIZE(grp_copy_b3_fu_1298_m_axi_in_r_AWSIZE),
    .m_axi_in_r_AWBURST(grp_copy_b3_fu_1298_m_axi_in_r_AWBURST),
    .m_axi_in_r_AWLOCK(grp_copy_b3_fu_1298_m_axi_in_r_AWLOCK),
    .m_axi_in_r_AWCACHE(grp_copy_b3_fu_1298_m_axi_in_r_AWCACHE),
    .m_axi_in_r_AWPROT(grp_copy_b3_fu_1298_m_axi_in_r_AWPROT),
    .m_axi_in_r_AWQOS(grp_copy_b3_fu_1298_m_axi_in_r_AWQOS),
    .m_axi_in_r_AWREGION(grp_copy_b3_fu_1298_m_axi_in_r_AWREGION),
    .m_axi_in_r_AWUSER(grp_copy_b3_fu_1298_m_axi_in_r_AWUSER),
    .m_axi_in_r_WVALID(grp_copy_b3_fu_1298_m_axi_in_r_WVALID),
    .m_axi_in_r_WREADY(1'b0),
    .m_axi_in_r_WDATA(grp_copy_b3_fu_1298_m_axi_in_r_WDATA),
    .m_axi_in_r_WSTRB(grp_copy_b3_fu_1298_m_axi_in_r_WSTRB),
    .m_axi_in_r_WLAST(grp_copy_b3_fu_1298_m_axi_in_r_WLAST),
    .m_axi_in_r_WID(grp_copy_b3_fu_1298_m_axi_in_r_WID),
    .m_axi_in_r_WUSER(grp_copy_b3_fu_1298_m_axi_in_r_WUSER),
    .m_axi_in_r_ARVALID(grp_copy_b3_fu_1298_m_axi_in_r_ARVALID),
    .m_axi_in_r_ARREADY(DATA_C3_B_I_ARREADY),
    .m_axi_in_r_ARADDR(grp_copy_b3_fu_1298_m_axi_in_r_ARADDR),
    .m_axi_in_r_ARID(grp_copy_b3_fu_1298_m_axi_in_r_ARID),
    .m_axi_in_r_ARLEN(grp_copy_b3_fu_1298_m_axi_in_r_ARLEN),
    .m_axi_in_r_ARSIZE(grp_copy_b3_fu_1298_m_axi_in_r_ARSIZE),
    .m_axi_in_r_ARBURST(grp_copy_b3_fu_1298_m_axi_in_r_ARBURST),
    .m_axi_in_r_ARLOCK(grp_copy_b3_fu_1298_m_axi_in_r_ARLOCK),
    .m_axi_in_r_ARCACHE(grp_copy_b3_fu_1298_m_axi_in_r_ARCACHE),
    .m_axi_in_r_ARPROT(grp_copy_b3_fu_1298_m_axi_in_r_ARPROT),
    .m_axi_in_r_ARQOS(grp_copy_b3_fu_1298_m_axi_in_r_ARQOS),
    .m_axi_in_r_ARREGION(grp_copy_b3_fu_1298_m_axi_in_r_ARREGION),
    .m_axi_in_r_ARUSER(grp_copy_b3_fu_1298_m_axi_in_r_ARUSER),
    .m_axi_in_r_RVALID(DATA_C3_B_I_RVALID),
    .m_axi_in_r_RREADY(grp_copy_b3_fu_1298_m_axi_in_r_RREADY),
    .m_axi_in_r_RDATA(DATA_C3_B_I_RDATA),
    .m_axi_in_r_RLAST(DATA_C3_B_I_RLAST),
    .m_axi_in_r_RID(DATA_C3_B_I_RID),
    .m_axi_in_r_RUSER(DATA_C3_B_I_RUSER),
    .m_axi_in_r_RRESP(DATA_C3_B_I_RRESP),
    .m_axi_in_r_BVALID(1'b0),
    .m_axi_in_r_BREADY(grp_copy_b3_fu_1298_m_axi_in_r_BREADY),
    .m_axi_in_r_BRESP(2'd0),
    .m_axi_in_r_BID(1'd0),
    .m_axi_in_r_BUSER(1'd0),
    .c3_b_i9(c3_b_i9_reg_2951),
    .out_r_address0(grp_copy_b3_fu_1298_out_r_address0),
    .out_r_ce0(grp_copy_b3_fu_1298_out_r_ce0),
    .out_r_we0(grp_copy_b3_fu_1298_out_r_we0),
    .out_r_d0(grp_copy_b3_fu_1298_out_r_d0)
);

copy_b1 grp_copy_b1_fu_1306(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_b1_fu_1306_ap_start),
    .ap_done(grp_copy_b1_fu_1306_ap_done),
    .ap_idle(grp_copy_b1_fu_1306_ap_idle),
    .ap_ready(grp_copy_b1_fu_1306_ap_ready),
    .m_axi_in_r_AWVALID(grp_copy_b1_fu_1306_m_axi_in_r_AWVALID),
    .m_axi_in_r_AWREADY(1'b0),
    .m_axi_in_r_AWADDR(grp_copy_b1_fu_1306_m_axi_in_r_AWADDR),
    .m_axi_in_r_AWID(grp_copy_b1_fu_1306_m_axi_in_r_AWID),
    .m_axi_in_r_AWLEN(grp_copy_b1_fu_1306_m_axi_in_r_AWLEN),
    .m_axi_in_r_AWSIZE(grp_copy_b1_fu_1306_m_axi_in_r_AWSIZE),
    .m_axi_in_r_AWBURST(grp_copy_b1_fu_1306_m_axi_in_r_AWBURST),
    .m_axi_in_r_AWLOCK(grp_copy_b1_fu_1306_m_axi_in_r_AWLOCK),
    .m_axi_in_r_AWCACHE(grp_copy_b1_fu_1306_m_axi_in_r_AWCACHE),
    .m_axi_in_r_AWPROT(grp_copy_b1_fu_1306_m_axi_in_r_AWPROT),
    .m_axi_in_r_AWQOS(grp_copy_b1_fu_1306_m_axi_in_r_AWQOS),
    .m_axi_in_r_AWREGION(grp_copy_b1_fu_1306_m_axi_in_r_AWREGION),
    .m_axi_in_r_AWUSER(grp_copy_b1_fu_1306_m_axi_in_r_AWUSER),
    .m_axi_in_r_WVALID(grp_copy_b1_fu_1306_m_axi_in_r_WVALID),
    .m_axi_in_r_WREADY(1'b0),
    .m_axi_in_r_WDATA(grp_copy_b1_fu_1306_m_axi_in_r_WDATA),
    .m_axi_in_r_WSTRB(grp_copy_b1_fu_1306_m_axi_in_r_WSTRB),
    .m_axi_in_r_WLAST(grp_copy_b1_fu_1306_m_axi_in_r_WLAST),
    .m_axi_in_r_WID(grp_copy_b1_fu_1306_m_axi_in_r_WID),
    .m_axi_in_r_WUSER(grp_copy_b1_fu_1306_m_axi_in_r_WUSER),
    .m_axi_in_r_ARVALID(grp_copy_b1_fu_1306_m_axi_in_r_ARVALID),
    .m_axi_in_r_ARREADY(DATA_C1_B_I_ARREADY),
    .m_axi_in_r_ARADDR(grp_copy_b1_fu_1306_m_axi_in_r_ARADDR),
    .m_axi_in_r_ARID(grp_copy_b1_fu_1306_m_axi_in_r_ARID),
    .m_axi_in_r_ARLEN(grp_copy_b1_fu_1306_m_axi_in_r_ARLEN),
    .m_axi_in_r_ARSIZE(grp_copy_b1_fu_1306_m_axi_in_r_ARSIZE),
    .m_axi_in_r_ARBURST(grp_copy_b1_fu_1306_m_axi_in_r_ARBURST),
    .m_axi_in_r_ARLOCK(grp_copy_b1_fu_1306_m_axi_in_r_ARLOCK),
    .m_axi_in_r_ARCACHE(grp_copy_b1_fu_1306_m_axi_in_r_ARCACHE),
    .m_axi_in_r_ARPROT(grp_copy_b1_fu_1306_m_axi_in_r_ARPROT),
    .m_axi_in_r_ARQOS(grp_copy_b1_fu_1306_m_axi_in_r_ARQOS),
    .m_axi_in_r_ARREGION(grp_copy_b1_fu_1306_m_axi_in_r_ARREGION),
    .m_axi_in_r_ARUSER(grp_copy_b1_fu_1306_m_axi_in_r_ARUSER),
    .m_axi_in_r_RVALID(DATA_C1_B_I_RVALID),
    .m_axi_in_r_RREADY(grp_copy_b1_fu_1306_m_axi_in_r_RREADY),
    .m_axi_in_r_RDATA(DATA_C1_B_I_RDATA),
    .m_axi_in_r_RLAST(DATA_C1_B_I_RLAST),
    .m_axi_in_r_RID(DATA_C1_B_I_RID),
    .m_axi_in_r_RUSER(DATA_C1_B_I_RUSER),
    .m_axi_in_r_RRESP(DATA_C1_B_I_RRESP),
    .m_axi_in_r_BVALID(1'b0),
    .m_axi_in_r_BREADY(grp_copy_b1_fu_1306_m_axi_in_r_BREADY),
    .m_axi_in_r_BRESP(2'd0),
    .m_axi_in_r_BID(1'd0),
    .m_axi_in_r_BUSER(1'd0),
    .c1_b_i5(c1_b_i5_reg_2961),
    .out_r_address0(grp_copy_b1_fu_1306_out_r_address0),
    .out_r_ce0(grp_copy_b1_fu_1306_out_r_ce0),
    .out_r_we0(grp_copy_b1_fu_1306_out_r_we0),
    .out_r_d0(grp_copy_b1_fu_1306_out_r_d0)
);

copy_out grp_copy_out_fu_1314(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_copy_out_fu_1314_ap_start),
    .ap_done(grp_copy_out_fu_1314_ap_done),
    .ap_idle(grp_copy_out_fu_1314_ap_idle),
    .ap_ready(grp_copy_out_fu_1314_ap_ready),
    .m_axi_out_r_AWVALID(grp_copy_out_fu_1314_m_axi_out_r_AWVALID),
    .m_axi_out_r_AWREADY(DATA_FC6_O_O_AWREADY),
    .m_axi_out_r_AWADDR(grp_copy_out_fu_1314_m_axi_out_r_AWADDR),
    .m_axi_out_r_AWID(grp_copy_out_fu_1314_m_axi_out_r_AWID),
    .m_axi_out_r_AWLEN(grp_copy_out_fu_1314_m_axi_out_r_AWLEN),
    .m_axi_out_r_AWSIZE(grp_copy_out_fu_1314_m_axi_out_r_AWSIZE),
    .m_axi_out_r_AWBURST(grp_copy_out_fu_1314_m_axi_out_r_AWBURST),
    .m_axi_out_r_AWLOCK(grp_copy_out_fu_1314_m_axi_out_r_AWLOCK),
    .m_axi_out_r_AWCACHE(grp_copy_out_fu_1314_m_axi_out_r_AWCACHE),
    .m_axi_out_r_AWPROT(grp_copy_out_fu_1314_m_axi_out_r_AWPROT),
    .m_axi_out_r_AWQOS(grp_copy_out_fu_1314_m_axi_out_r_AWQOS),
    .m_axi_out_r_AWREGION(grp_copy_out_fu_1314_m_axi_out_r_AWREGION),
    .m_axi_out_r_AWUSER(grp_copy_out_fu_1314_m_axi_out_r_AWUSER),
    .m_axi_out_r_WVALID(grp_copy_out_fu_1314_m_axi_out_r_WVALID),
    .m_axi_out_r_WREADY(DATA_FC6_O_O_WREADY),
    .m_axi_out_r_WDATA(grp_copy_out_fu_1314_m_axi_out_r_WDATA),
    .m_axi_out_r_WSTRB(grp_copy_out_fu_1314_m_axi_out_r_WSTRB),
    .m_axi_out_r_WLAST(grp_copy_out_fu_1314_m_axi_out_r_WLAST),
    .m_axi_out_r_WID(grp_copy_out_fu_1314_m_axi_out_r_WID),
    .m_axi_out_r_WUSER(grp_copy_out_fu_1314_m_axi_out_r_WUSER),
    .m_axi_out_r_ARVALID(grp_copy_out_fu_1314_m_axi_out_r_ARVALID),
    .m_axi_out_r_ARREADY(1'b0),
    .m_axi_out_r_ARADDR(grp_copy_out_fu_1314_m_axi_out_r_ARADDR),
    .m_axi_out_r_ARID(grp_copy_out_fu_1314_m_axi_out_r_ARID),
    .m_axi_out_r_ARLEN(grp_copy_out_fu_1314_m_axi_out_r_ARLEN),
    .m_axi_out_r_ARSIZE(grp_copy_out_fu_1314_m_axi_out_r_ARSIZE),
    .m_axi_out_r_ARBURST(grp_copy_out_fu_1314_m_axi_out_r_ARBURST),
    .m_axi_out_r_ARLOCK(grp_copy_out_fu_1314_m_axi_out_r_ARLOCK),
    .m_axi_out_r_ARCACHE(grp_copy_out_fu_1314_m_axi_out_r_ARCACHE),
    .m_axi_out_r_ARPROT(grp_copy_out_fu_1314_m_axi_out_r_ARPROT),
    .m_axi_out_r_ARQOS(grp_copy_out_fu_1314_m_axi_out_r_ARQOS),
    .m_axi_out_r_ARREGION(grp_copy_out_fu_1314_m_axi_out_r_ARREGION),
    .m_axi_out_r_ARUSER(grp_copy_out_fu_1314_m_axi_out_r_ARUSER),
    .m_axi_out_r_RVALID(1'b0),
    .m_axi_out_r_RREADY(grp_copy_out_fu_1314_m_axi_out_r_RREADY),
    .m_axi_out_r_RDATA(32'd0),
    .m_axi_out_r_RLAST(1'b0),
    .m_axi_out_r_RID(1'd0),
    .m_axi_out_r_RUSER(1'd0),
    .m_axi_out_r_RRESP(2'd0),
    .m_axi_out_r_BVALID(DATA_FC6_O_O_BVALID),
    .m_axi_out_r_BREADY(grp_copy_out_fu_1314_m_axi_out_r_BREADY),
    .m_axi_out_r_BRESP(DATA_FC6_O_O_BRESP),
    .m_axi_out_r_BID(DATA_FC6_O_O_BID),
    .m_axi_out_r_BUSER(DATA_FC6_O_O_BUSER),
    .fc6_o_o15(fc6_o_o1_reg_2936),
    .fc6_o_address0(grp_copy_out_fu_1314_fc6_o_address0),
    .fc6_o_ce0(grp_copy_out_fu_1314_fc6_o_ce0),
    .fc6_o_q0(fc6_o_q0)
);

lenet_wrapper_fadbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_wrapper_fadbkb_x_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i_reg_1190),
    .din1(grp_fu_1323_p1),
    .ce(1'b1),
    .dout(grp_fu_1323_p2)
);

lenet_wrapper_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_wrapper_fmucud_x_U49(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(fc6_w_0_0_load_reg_3531),
    .din1(c5_o_2_0_0_load_reg_3536),
    .ce(1'b1),
    .dout(grp_fu_1328_p2)
);

lenet_wrapper_fcmdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_wrapper_fcmdEe_x_U50(
    .din0(grp_fu_1332_p0),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(grp_fu_1332_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_convolution1_fu_1223_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state34) & (1'd1 == exitcond_i1_fu_2114_p2))) begin
            ap_reg_grp_convolution1_fu_1223_ap_start <= 1'b1;
        end else if ((1'b1 == grp_convolution1_fu_1223_ap_ready)) begin
            ap_reg_grp_convolution1_fu_1223_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_convolution3_fu_1213_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state44) & (1'd1 == exitcond2_i2_fu_2332_p2))) begin
            ap_reg_grp_convolution3_fu_1213_ap_start <= 1'b1;
        end else if ((1'b1 == grp_convolution3_fu_1213_ap_ready)) begin
            ap_reg_grp_convolution3_fu_1213_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_convolution5_fu_1232_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state58) & (1'd1 == exitcond2_i4_fu_2656_p2))) begin
            ap_reg_grp_convolution5_fu_1232_ap_start <= 1'b1;
        end else if ((1'b1 == grp_convolution5_fu_1232_ap_ready)) begin
            ap_reg_grp_convolution5_fu_1232_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_copy_b1_fu_1306_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2))) begin
            ap_reg_grp_copy_b1_fu_1306_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_b1_fu_1306_ap_ready)) begin
            ap_reg_grp_copy_b1_fu_1306_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_copy_b3_fu_1298_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2))) begin
            ap_reg_grp_copy_b3_fu_1298_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_b3_fu_1298_ap_ready)) begin
            ap_reg_grp_copy_b3_fu_1298_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_copy_b5_fu_1290_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2))) begin
            ap_reg_grp_copy_b5_fu_1290_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_b5_fu_1290_ap_ready)) begin
            ap_reg_grp_copy_b5_fu_1290_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_copy_i_fu_1282_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2))) begin
            ap_reg_grp_copy_i_fu_1282_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_i_fu_1282_ap_ready)) begin
            ap_reg_grp_copy_i_fu_1282_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_copy_out_fu_1314_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state69) & (1'd1 == exitcond1_i4_fu_2882_p2))) begin
            ap_reg_grp_copy_out_fu_1314_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_out_fu_1314_ap_ready)) begin
            ap_reg_grp_copy_out_fu_1314_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_copy_w1_fu_1274_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2))) begin
            ap_reg_grp_copy_w1_fu_1274_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_w1_fu_1274_ap_ready)) begin
            ap_reg_grp_copy_w1_fu_1274_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_copy_w3_fu_1266_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2))) begin
            ap_reg_grp_copy_w3_fu_1266_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_w3_fu_1266_ap_ready)) begin
            ap_reg_grp_copy_w3_fu_1266_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_copy_w5_fu_1258_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2))) begin
            ap_reg_grp_copy_w5_fu_1258_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_w5_fu_1258_ap_ready)) begin
            ap_reg_grp_copy_w5_fu_1258_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_max_pooling2_fu_1242_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state37) & (1'd1 == exitcond2_i1_fu_2160_p2))) begin
            ap_reg_grp_max_pooling2_fu_1242_ap_start <= 1'b1;
        end else if ((1'b1 == grp_max_pooling2_fu_1242_ap_ready)) begin
            ap_reg_grp_max_pooling2_fu_1242_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_max_pooling4_fu_1250_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state51) & (1'd1 == exitcond2_i3_fu_2500_p2))) begin
            ap_reg_grp_max_pooling4_fu_1250_ap_start <= 1'b1;
        end else if ((1'b1 == grp_max_pooling4_fu_1250_ap_ready)) begin
            ap_reg_grp_max_pooling4_fu_1250_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_DONE_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state88)) begin
            if (~((1'b1 == ap_block_state88_on_subcall_done) | (1'b0 == ap_sig_ioackin_DATA_DONE_AWREADY))) begin
                ap_reg_ioackin_DATA_DONE_AWREADY <= 1'b0;
            end else if (((1'b1 == DATA_DONE_AWREADY) & (ap_block_state88_on_subcall_done == 1'b0))) begin
                ap_reg_ioackin_DATA_DONE_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_DONE_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state89)) begin
            if ((ap_sig_ioackin_DATA_DONE_WREADY == 1'b1)) begin
                ap_reg_ioackin_DATA_DONE_WREADY <= 1'b0;
            end else if ((1'b1 == DATA_DONE_WREADY)) begin
                ap_reg_ioackin_DATA_DONE_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_START_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state20) & (tmp_17_fu_2016_p2 == 1'd1))) begin
            if ((ap_block_state20_io == 1'b0)) begin
                ap_reg_ioackin_DATA_START_ARREADY <= 1'b0;
            end else if ((1'b1 == DATA_START_ARREADY)) begin
                ap_reg_ioackin_DATA_START_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        c_i_reg_1202 <= c_reg_3516;
    end else if (((1'b1 == ap_CS_fsm_state69) & (1'd0 == exitcond1_i4_fu_2882_p2))) begin
        c_i_reg_1202 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'd1 == exitcond3_i_fu_2057_p2))) begin
        i_i1_reg_1025 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        i_i1_reg_1025 <= i_reg_3221;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (1'd1 == exitcond1_i_fu_2211_p2))) begin
        i_i2_reg_1036 <= i_4_reg_3239;
    end else if (((1'b1 == ap_CS_fsm_state36) & (grp_convolution1_fu_1223_ap_done == 1'b1))) begin
        i_i2_reg_1036 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (1'd1 == exitcond1_i1_fu_2383_p2))) begin
        i_i3_reg_1069 <= i_5_reg_3295;
    end else if (((1'b1 == ap_CS_fsm_state43) & (grp_max_pooling2_fu_1242_ap_done == 1'b1))) begin
        i_i3_reg_1069 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (1'd1 == exitcond1_i2_fu_2547_p2))) begin
        i_i4_reg_1102 <= i_6_reg_3351;
    end else if (((1'b1 == ap_CS_fsm_state50) & (grp_convolution3_fu_1213_ap_done == 1'b1))) begin
        i_i4_reg_1102 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & (1'd1 == exitcond1_i3_fu_2695_p2))) begin
        i_i5_reg_1135 <= i_8_reg_3407;
    end else if (((1'b1 == ap_CS_fsm_state57) & (grp_max_pooling4_fu_1250_ap_done == 1'b1))) begin
        i_i5_reg_1135 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        i_i6_reg_1168 <= i_7_reg_3463;
    end else if (((1'b1 == ap_CS_fsm_state64) & (grp_convolution5_fu_1232_ap_done == 1'b1))) begin
        i_i6_reg_1168 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'd1 == exitcond2_i_fu_2083_p2))) begin
        i_i_reg_990 <= i_3_reg_3185;
    end else if (((1'b1 == ap_CS_fsm_state29) & (ap_block_state29_on_subcall_done == 1'b0))) begin
        i_i_reg_990 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == tmp_2_fu_1754_p2) & (1'd1 == tmp_3_fu_1760_p2) & (1'd1 == tmp_4_fu_1766_p2) & (1'd1 == tmp_5_fu_1772_p2))) begin
        invdar10_reg_887 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_8_fu_1789_p2))) begin
        invdar10_reg_887 <= indvarinc10_fu_1783_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_8_fu_1789_p2))) begin
        invdar11_reg_898 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == tmp_13_fu_1914_p2) & (1'd1 == tmp_10_fu_1896_p2) & (1'd1 == tmp_11_fu_1902_p2) & (1'd1 == tmp_12_fu_1908_p2))) begin
        invdar11_reg_898 <= indvarinc11_reg_3089;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_10_fu_1896_p2) & (1'd1 == tmp_11_fu_1902_p2) & (1'd0 == tmp_12_fu_1908_p2))) begin
        invdar12_reg_910 <= indvarinc12_reg_3099;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        invdar12_reg_910 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_10_fu_1896_p2) & (1'd0 == tmp_11_fu_1902_p2))) begin
        invdar13_reg_922 <= indvarinc13_reg_3109;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        invdar13_reg_922 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == tmp_10_fu_1896_p2))) begin
        invdar14_reg_934 <= indvarinc14_fu_1890_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        invdar14_reg_934 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_10_fu_1896_p2) & (1'd1 == tmp_11_fu_1902_p2) & (1'd1 == tmp_12_fu_1908_p2) & (1'd1 == tmp_13_fu_1914_p2))) begin
        invdar15_reg_945 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state17) & (1'd0 == tmp_14_fu_1931_p2))) begin
        invdar15_reg_945 <= indvarinc15_fu_1925_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'd1 == tmp_14_fu_1931_p2))) begin
        invdar16_reg_956 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state19) & (1'd0 == tmp_16_fu_1999_p2) & (1'd1 == tmp_15_fu_1993_p2))) begin
        invdar16_reg_956 <= indvarinc16_reg_3144;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'd0 == tmp_15_fu_1993_p2))) begin
        invdar17_reg_968 <= indvarinc17_fu_1987_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        invdar17_reg_968 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == tmp_15_fu_1993_p2) & (1'd1 == tmp_16_fu_1999_p2))) begin
        invdar18_reg_979 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0) & (tmp_17_fu_2016_p2 == 1'd0))) begin
        invdar18_reg_979 <= indvarinc18_fu_2010_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_1502_p2) & (1'd1 == tmp_s_fu_1508_p2))) begin
        invdar1_reg_794 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_9_fu_1611_p2) & (1'd1 == tmp_6_fu_1599_p2) & (1'd1 == tmp_7_fu_1605_p2))) begin
        invdar1_reg_794 <= indvarinc1_reg_2997;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == tmp_2_fu_1754_p2))) begin
        invdar2_reg_876 <= indvarinc2_fu_1748_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        invdar2_reg_876 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_s_fu_1508_p2) & (1'd1 == tmp_fu_1502_p2))) begin
        invdar3_reg_771 <= indvarinc4_reg_2976;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar3_reg_771 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_6_fu_1599_p2) & (1'd0 == tmp_7_fu_1605_p2))) begin
        invdar4_reg_806 <= indvarinc3_reg_3007;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        invdar4_reg_806 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_6_fu_1599_p2))) begin
        invdar5_reg_818 <= indvarinc5_fu_1593_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        invdar5_reg_818 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_6_fu_1599_p2) & (1'd1 == tmp_7_fu_1605_p2) & (1'd1 == tmp_9_fu_1611_p2))) begin
        invdar6_reg_829 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_1_fu_1628_p2))) begin
        invdar6_reg_829 <= indvarinc6_fu_1622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_1502_p2))) begin
        invdar7_reg_783 <= indvarinc8_fu_1496_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        invdar7_reg_783 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_1_fu_1628_p2))) begin
        invdar8_reg_840 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == tmp_5_fu_1772_p2) & (1'd1 == tmp_2_fu_1754_p2) & (1'd1 == tmp_3_fu_1760_p2) & (1'd1 == tmp_4_fu_1766_p2))) begin
        invdar8_reg_840 <= indvarinc7_reg_3039;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == tmp_2_fu_1754_p2) & (1'd1 == tmp_3_fu_1760_p2) & (1'd0 == tmp_4_fu_1766_p2))) begin
        invdar9_reg_852 <= indvarinc9_reg_3049;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        invdar9_reg_852 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == tmp_2_fu_1754_p2) & (1'd0 == tmp_3_fu_1760_p2))) begin
        invdar_reg_864 <= indvarinc_reg_3059;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        invdar_reg_864 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (1'd0 == exitcond2_i1_fu_2160_p2))) begin
        j_i1_reg_1047 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state39) & (1'd1 == exitcond_i2_fu_2238_p2))) begin
        j_i1_reg_1047 <= j_3_reg_3252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == exitcond2_i2_fu_2332_p2))) begin
        j_i2_reg_1080 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state46) & (1'd1 == exitcond_i3_fu_2410_p2))) begin
        j_i2_reg_1080 <= j_4_reg_3308;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (1'd0 == exitcond2_i3_fu_2500_p2))) begin
        j_i3_reg_1113 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state53) & (1'd1 == exitcond_i5_fu_2574_p2))) begin
        j_i3_reg_1113 <= j_5_reg_3364;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (1'd0 == exitcond2_i4_fu_2656_p2))) begin
        j_i4_reg_1146 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state60) & (1'd1 == exitcond_i6_fu_2722_p2))) begin
        j_i4_reg_1146 <= j_6_reg_3420;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'd0 == exitcond3_i_fu_2057_p2))) begin
        j_i_reg_1001 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state32) & (1'd1 == l_i_phi_fu_1017_p4))) begin
        j_i_reg_1001 <= j_reg_3203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == exitcond1_i1_fu_2383_p2))) begin
        k_i1_reg_1091 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        k_i1_reg_1091 <= k_1_reg_3326;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (1'd0 == exitcond1_i2_fu_2547_p2))) begin
        k_i2_reg_1124 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        k_i2_reg_1124 <= k_2_reg_3382;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & (1'd0 == exitcond1_i3_fu_2695_p2))) begin
        k_i3_reg_1157 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        k_i3_reg_1157 <= k_3_reg_3438;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (1'd0 == exitcond1_i_fu_2211_p2))) begin
        k_i_reg_1058 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        k_i_reg_1058 <= k_reg_3270;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'd0 == exitcond2_i_fu_2083_p2))) begin
        l_i_reg_1012 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        l_i_reg_1012 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state65) & (1'd1 == exitcond_i4_fu_2787_p2))) begin
        n_i_reg_1179 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        n_i_reg_1179 <= n_reg_3498;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        tmp_i_reg_1190 <= grp_fu_1323_p2;
    end else if (((1'b1 == ap_CS_fsm_state69) & (1'd0 == exitcond1_i4_fu_2882_p2))) begin
        tmp_i_reg_1190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        DATA_DONE_addr_reg_2931[29 : 0] <= tmp_46_fu_1367_p1[29 : 0];
        DATA_START_addr_reg_2925[29 : 0] <= tmp_42_fu_1347_p1[29 : 0];
        c1_b_i5_reg_2961 <= {{c1_b_i[31:2]}};
        c1_w_i3_reg_2966 <= {{c1_w_i[31:2]}};
        c3_b_i9_reg_2951 <= {{c3_b_i[31:2]}};
        c3_w_i7_reg_2956 <= {{c3_w_i[31:2]}};
        c5_b_i1_reg_2941 <= {{c5_b_i[31:2]}};
        c5_w_i1_reg_2946 <= {{c5_w_i[31:2]}};
        fc6_o_o1_reg_2936 <= {{fc6_o_o[31:2]}};
        image_in_i1_reg_2971 <= {{image_in_i[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (DATA_START_RVALID == 1'b1))) begin
        DATA_START_addr_read_reg_3168 <= DATA_START_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        c1_o_1_load_reg_3275 <= c1_o_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        c1_o_2_addr_reg_3262 <= tmp_108_cast_fu_2232_p1;
        k_reg_3270 <= k_fu_2244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        c3_o_1_load_reg_3387 <= c3_o_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        c3_o_2_addr_reg_3369 <= tmp_119_cast_fu_2568_p1;
        k_2_reg_3382 <= k_2_fu_2580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        c5_o_1_0_0_load_reg_3473 <= c5_o_1_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        c5_o_2_0_0_load_reg_3536 <= c5_o_2_0_0_q0;
        fc6_w_0_0_load_reg_3531 <= fc6_w_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        c_reg_3516 <= c_fu_2919_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        fc6_b_load_reg_3551 <= fc6_b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (1'd0 == exitcond1_i4_fu_2882_p2))) begin
        fc6_o_addr_reg_3503 <= n_i_cast2_fu_2847_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        fc6_w_0_0_addr_1_reg_3195 <= tmp_89_cast_fu_2078_p1;
        j_reg_3203 <= j_fu_2089_p2;
        tmp_85_reg_3190 <= tmp_85_fu_2073_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_3_reg_3185 <= i_3_fu_2063_p2;
        tmp_84_reg_3177[11 : 3] <= tmp_84_fu_2051_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i_4_reg_3239 <= i_4_fu_2166_p2;
        tmp_92_cast_reg_3231[9 : 2] <= tmp_92_cast_fu_2156_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_5_reg_3295 <= i_5_fu_2338_p2;
        tmp_96_cast_reg_3287[8 : 1] <= tmp_96_cast_fu_2328_p1[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_6_reg_3351 <= i_6_fu_2506_p2;
        tmp_99_reg_3343[8 : 1] <= tmp_99_fu_2494_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        i_7_reg_3463 <= i_7_fu_2793_p2;
        i_i6_cast3_reg_3455[6 : 0] <= i_i6_cast3_fu_2782_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        i_8_reg_3407 <= i_8_fu_2662_p2;
        tmp_107_reg_3399 <= tmp_107_fu_2650_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        i_i1_cast_reg_3213[3 : 0] <= i_i1_cast_fu_2109_p1[3 : 0];
        i_reg_3221 <= i_fu_2120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvarinc11_reg_3089 <= indvarinc11_fu_1795_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        indvarinc12_reg_3099 <= indvarinc12_fu_1833_p2;
        tmp_72_reg_3094 <= tmp_72_fu_1827_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvarinc13_reg_3109 <= indvarinc13_fu_1870_p2;
        tmp_76_reg_3104 <= tmp_76_fu_1864_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        indvarinc16_reg_3144 <= indvarinc16_fu_1967_p2;
        tmp_80_reg_3139[11 : 3] <= tmp_80_fu_1961_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvarinc1_reg_2997 <= indvarinc1_fu_1536_p2;
        tmp_52_reg_2992 <= tmp_52_fu_1530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvarinc3_reg_3007 <= indvarinc3_fu_1573_p2;
        tmp_56_reg_3002 <= tmp_56_fu_1567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvarinc4_reg_2976 <= indvarinc4_fu_1477_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvarinc7_reg_3039 <= indvarinc7_fu_1664_p2;
        tmp_60_reg_3034[31 : 1] <= tmp_60_fu_1658_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvarinc9_reg_3049 <= indvarinc9_fu_1691_p2;
        tmp_63_reg_3044 <= tmp_63_fu_1685_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvarinc_reg_3059 <= indvarinc_fu_1728_p2;
        tmp_67_reg_3054 <= tmp_67_fu_1722_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        j_3_reg_3252 <= j_3_fu_2217_p2;
        tmp_96_reg_3244[13 : 2] <= tmp_96_fu_2205_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        j_4_reg_3308 <= j_4_fu_2389_p2;
        tmp_103_reg_3300[11 : 1] <= tmp_103_fu_2377_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j_5_reg_3364 <= j_5_fu_2553_p2;
        tmp_110_reg_3356[11 : 1] <= tmp_110_fu_2541_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        j_6_reg_3420 <= j_6_fu_2701_p2;
        tmp_114_reg_3412 <= tmp_114_fu_2689_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        k_1_reg_3326 <= k_1_fu_2416_p2;
        p2_o_2_addr_reg_3313 <= tmp_115_cast_fu_2404_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        k_3_reg_3438 <= k_3_fu_2728_p2;
        p4_o_2_addr_reg_3425 <= tmp_123_cast_fu_2716_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        n_i_cast2_reg_3485[3 : 0] <= n_i_cast2_fu_2847_p1[3 : 0];
        n_reg_3498 <= n_fu_2888_p2;
        tmp_120_reg_3490[11 : 3] <= tmp_120_fu_2876_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        p2_o_1_load_reg_3331 <= p2_o_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        p4_o_1_load_reg_3443 <= p4_o_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_18_reg_3173 <= tmp_18_fu_2022_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        tmp_19_i_reg_3541 <= grp_fu_1328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_24_reg_3282 <= grp_fu_1332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_29_reg_3338 <= grp_fu_1332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        tmp_34_reg_3480 <= grp_fu_1332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        tmp_39_reg_3394 <= grp_fu_1332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        tmp_44_reg_3450 <= grp_fu_1332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        tmp_i_66_reg_3556 <= grp_fu_1323_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_C1_B_I_ARVALID = grp_copy_b1_fu_1306_m_axi_in_r_ARVALID;
    end else begin
        DATA_C1_B_I_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_C1_B_I_RREADY = grp_copy_b1_fu_1306_m_axi_in_r_RREADY;
    end else begin
        DATA_C1_B_I_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_C1_W_I_ARVALID = grp_copy_w1_fu_1274_m_axi_in_r_ARVALID;
    end else begin
        DATA_C1_W_I_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_C1_W_I_RREADY = grp_copy_w1_fu_1274_m_axi_in_r_RREADY;
    end else begin
        DATA_C1_W_I_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_C3_B_I_ARVALID = grp_copy_b3_fu_1298_m_axi_in_r_ARVALID;
    end else begin
        DATA_C3_B_I_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_C3_B_I_RREADY = grp_copy_b3_fu_1298_m_axi_in_r_RREADY;
    end else begin
        DATA_C3_B_I_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_C3_W_I_ARVALID = grp_copy_w3_fu_1266_m_axi_in_r_ARVALID;
    end else begin
        DATA_C3_W_I_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_C3_W_I_RREADY = grp_copy_w3_fu_1266_m_axi_in_r_RREADY;
    end else begin
        DATA_C3_W_I_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (ap_block_state88_on_subcall_done == 1'b0) & (1'b0 == ap_reg_ioackin_DATA_DONE_AWREADY))) begin
        DATA_DONE_AWVALID = 1'b1;
    end else begin
        DATA_DONE_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state94) & (DATA_DONE_BVALID == 1'b1))) begin
        DATA_DONE_BREADY = 1'b1;
    end else begin
        DATA_DONE_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) & (1'b0 == ap_reg_ioackin_DATA_DONE_WREADY))) begin
        DATA_DONE_WVALID = 1'b1;
    end else begin
        DATA_DONE_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        DATA_DONE_blk_n_AW = m_axi_DATA_DONE_AWREADY;
    end else begin
        DATA_DONE_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        DATA_DONE_blk_n_B = m_axi_DATA_DONE_BVALID;
    end else begin
        DATA_DONE_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        DATA_DONE_blk_n_W = m_axi_DATA_DONE_WREADY;
    end else begin
        DATA_DONE_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_FC6_B_I_ARVALID = grp_copy_b5_fu_1290_m_axi_in_r_ARVALID;
    end else begin
        DATA_FC6_B_I_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_FC6_B_I_RREADY = grp_copy_b5_fu_1290_m_axi_in_r_RREADY;
    end else begin
        DATA_FC6_B_I_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (1'd1 == exitcond1_i4_fu_2882_p2)) | ((1'b1 == ap_CS_fsm_state88) & (1'd1 == tmp_18_reg_3173)))) begin
        DATA_FC6_O_O_AWVALID = grp_copy_out_fu_1314_m_axi_out_r_AWVALID;
    end else begin
        DATA_FC6_O_O_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (1'd1 == exitcond1_i4_fu_2882_p2)) | ((1'b1 == ap_CS_fsm_state88) & (1'd1 == tmp_18_reg_3173)))) begin
        DATA_FC6_O_O_BREADY = grp_copy_out_fu_1314_m_axi_out_r_BREADY;
    end else begin
        DATA_FC6_O_O_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state69) & (1'd1 == exitcond1_i4_fu_2882_p2)) | ((1'b1 == ap_CS_fsm_state88) & (1'd1 == tmp_18_reg_3173)))) begin
        DATA_FC6_O_O_WVALID = grp_copy_out_fu_1314_m_axi_out_r_WVALID;
    end else begin
        DATA_FC6_O_O_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_FC6_W_I_ARVALID = grp_copy_w5_fu_1258_m_axi_in_r_ARVALID;
    end else begin
        DATA_FC6_W_I_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_FC6_W_I_RREADY = grp_copy_w5_fu_1258_m_axi_in_r_RREADY;
    end else begin
        DATA_FC6_W_I_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_IMAGE_IN_I_ARVALID = grp_copy_i_fu_1282_m_axi_in_r_ARVALID;
    end else begin
        DATA_IMAGE_IN_I_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_18_fu_2022_p2)))) begin
        DATA_IMAGE_IN_I_RREADY = grp_copy_i_fu_1282_m_axi_in_r_RREADY;
    end else begin
        DATA_IMAGE_IN_I_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (tmp_17_fu_2016_p2 == 1'd1) & (1'b0 == ap_reg_ioackin_DATA_START_ARREADY))) begin
        DATA_START_ARVALID = 1'b1;
    end else begin
        DATA_START_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (DATA_START_RVALID == 1'b1))) begin
        DATA_START_RREADY = 1'b1;
    end else begin
        DATA_START_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (tmp_17_fu_2016_p2 == 1'd1))) begin
        DATA_START_blk_n_AR = m_axi_DATA_START_ARREADY;
    end else begin
        DATA_START_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        DATA_START_blk_n_R = m_axi_DATA_START_RVALID;
    end else begin
        DATA_START_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state94) & (DATA_DONE_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state94) & (DATA_DONE_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_DONE_AWREADY)) begin
        ap_sig_ioackin_DATA_DONE_AWREADY = DATA_DONE_AWREADY;
    end else begin
        ap_sig_ioackin_DATA_DONE_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_DONE_WREADY)) begin
        ap_sig_ioackin_DATA_DONE_WREADY = DATA_DONE_WREADY;
    end else begin
        ap_sig_ioackin_DATA_DONE_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_START_ARREADY)) begin
        ap_sig_ioackin_DATA_START_ARREADY = DATA_START_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_START_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c1_b_address0 = invdar6_cast_fu_1617_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c1_b_address0 = grp_copy_b1_fu_1306_out_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        c1_b_address0 = grp_convolution1_fu_1223_conv1_b_address0;
    end else begin
        c1_b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c1_b_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c1_b_ce0 = grp_copy_b1_fu_1306_out_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        c1_b_ce0 = grp_convolution1_fu_1223_conv1_b_ce0;
    end else begin
        c1_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c1_b_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c1_b_d0 = grp_copy_b1_fu_1306_out_r_d0;
    end else begin
        c1_b_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c1_b_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c1_b_we0 = grp_copy_b1_fu_1306_out_r_we0;
    end else begin
        c1_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        c1_o_1_address0 = tmp_108_cast_fu_2232_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        c1_o_1_address0 = grp_convolution1_fu_1223_output_r_address0;
    end else begin
        c1_o_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        c1_o_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        c1_o_1_ce0 = grp_convolution1_fu_1223_output_r_ce0;
    end else begin
        c1_o_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        c1_o_1_we0 = grp_convolution1_fu_1223_output_r_we0;
    end else begin
        c1_o_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        c1_o_2_address0 = c1_o_2_addr_reg_3262;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        c1_o_2_address0 = grp_max_pooling2_fu_1242_c1_o_2_address0;
    end else begin
        c1_o_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        c1_o_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        c1_o_2_ce0 = grp_max_pooling2_fu_1242_c1_o_2_ce0;
    end else begin
        c1_o_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        c1_o_2_we0 = 1'b1;
    end else begin
        c1_o_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_w_0_address0 = tmp_63_cast_fu_1588_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c1_w_0_address0 = grp_copy_w1_fu_1274_out_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        c1_w_0_address0 = grp_convolution1_fu_1223_conv1_w_0_address0;
    end else begin
        c1_w_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_w_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c1_w_0_ce0 = grp_copy_w1_fu_1274_out_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        c1_w_0_ce0 = grp_convolution1_fu_1223_conv1_w_0_ce0;
    end else begin
        c1_w_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_w_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c1_w_0_d0 = grp_copy_w1_fu_1274_out_0_d0;
    end else begin
        c1_w_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_w_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c1_w_0_we0 = grp_copy_w1_fu_1274_out_0_we0;
    end else begin
        c1_w_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c3_b_address0 = invdar10_cast_fu_1778_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c3_b_address0 = grp_copy_b3_fu_1298_out_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        c3_b_address0 = grp_convolution3_fu_1213_conv3_b_address0;
    end else begin
        c3_b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c3_b_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c3_b_ce0 = grp_copy_b3_fu_1298_out_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        c3_b_ce0 = grp_convolution3_fu_1213_conv3_b_ce0;
    end else begin
        c3_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c3_b_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c3_b_d0 = grp_copy_b3_fu_1298_out_r_d0;
    end else begin
        c3_b_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c3_b_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c3_b_we0 = grp_copy_b3_fu_1298_out_r_we0;
    end else begin
        c3_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        c3_o_1_address0 = tmp_119_cast_fu_2568_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        c3_o_1_address0 = grp_convolution3_fu_1213_output_r_address0;
    end else begin
        c3_o_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        c3_o_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        c3_o_1_ce0 = grp_convolution3_fu_1213_output_r_ce0;
    end else begin
        c3_o_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        c3_o_1_we0 = grp_convolution3_fu_1213_output_r_we0;
    end else begin
        c3_o_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        c3_o_2_address0 = c3_o_2_addr_reg_3369;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        c3_o_2_address0 = grp_max_pooling4_fu_1250_c3_o_2_address0;
    end else begin
        c3_o_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        c3_o_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        c3_o_2_ce0 = grp_max_pooling4_fu_1250_c3_o_2_ce0;
    end else begin
        c3_o_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        c3_o_2_we0 = 1'b1;
    end else begin
        c3_o_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c3_w_address0 = tmp_73_cast_fu_1743_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c3_w_address0 = grp_copy_w3_fu_1266_out_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        c3_w_address0 = grp_convolution3_fu_1213_conv3_w_address0;
    end else begin
        c3_w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c3_w_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c3_w_ce0 = grp_copy_w3_fu_1266_out_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        c3_w_ce0 = grp_convolution3_fu_1213_conv3_w_ce0;
    end else begin
        c3_w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c3_w_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c3_w_d0 = grp_copy_w3_fu_1266_out_r_d0;
    end else begin
        c3_w_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c3_w_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c3_w_we0 = grp_copy_w3_fu_1266_out_r_we0;
    end else begin
        c3_w_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        c5_b_address0 = invdar15_cast_fu_1920_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c5_b_address0 = grp_copy_b5_fu_1290_out_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        c5_b_address0 = grp_convolution5_fu_1232_conv5_b_address0;
    end else begin
        c5_b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        c5_b_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c5_b_ce0 = grp_copy_b5_fu_1290_out_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        c5_b_ce0 = grp_convolution5_fu_1232_conv5_b_ce0;
    end else begin
        c5_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        c5_b_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c5_b_d0 = grp_copy_b5_fu_1290_out_r_d0;
    end else begin
        c5_b_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        c5_b_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c5_b_we0 = grp_copy_b5_fu_1290_out_r_we0;
    end else begin
        c5_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        c5_o_1_0_0_address0 = i_i6_cast3_fu_2782_p1;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        c5_o_1_0_0_address0 = grp_convolution5_fu_1232_output_0_0_address0;
    end else begin
        c5_o_1_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        c5_o_1_0_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        c5_o_1_0_0_ce0 = grp_convolution5_fu_1232_output_0_0_ce0;
    end else begin
        c5_o_1_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        c5_o_1_0_0_we0 = grp_convolution5_fu_1232_output_0_0_we0;
    end else begin
        c5_o_1_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        c5_o_2_0_0_address0 = c_i_cast1_fu_2894_p1;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        c5_o_2_0_0_address0 = i_i6_cast3_reg_3455;
    end else begin
        c5_o_2_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68))) begin
        c5_o_2_0_0_ce0 = 1'b1;
    end else begin
        c5_o_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        c5_o_2_0_0_we0 = 1'b1;
    end else begin
        c5_o_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        c5_w_address0 = tmp_81_cast_fu_1885_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c5_w_address0 = grp_copy_w5_fu_1258_out_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        c5_w_address0 = grp_convolution5_fu_1232_conv5_w_address0;
    end else begin
        c5_w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        c5_w_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c5_w_ce0 = grp_copy_w5_fu_1258_out_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        c5_w_ce0 = grp_convolution5_fu_1232_conv5_w_ce0;
    end else begin
        c5_w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        c5_w_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c5_w_d0 = grp_copy_w5_fu_1258_out_r_d0;
    end else begin
        c5_w_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        c5_w_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c5_w_we0 = grp_copy_w5_fu_1258_out_r_we0;
    end else begin
        c5_w_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        fc6_b_address0 = n_i_cast2_reg_3485;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        fc6_b_address0 = i_i1_cast_reg_3213;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        fc6_b_address0 = invdar18_cast_fu_2005_p1;
    end else begin
        fc6_b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0)) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state35))) begin
        fc6_b_ce0 = 1'b1;
    end else begin
        fc6_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        fc6_b_d0 = fc6_b_i_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        fc6_b_d0 = 32'd0;
    end else begin
        fc6_b_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        fc6_b_i_ce0 = 1'b1;
    end else begin
        fc6_b_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0)) | (1'b1 == ap_CS_fsm_state35))) begin
        fc6_b_we0 = 1'b1;
    end else begin
        fc6_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        fc6_o_address0 = fc6_o_addr_reg_3503;
    end else if (((1'b1 == ap_CS_fsm_state88) & (1'd1 == tmp_18_reg_3173))) begin
        fc6_o_address0 = grp_copy_out_fu_1314_fc6_o_address0;
    end else begin
        fc6_o_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        fc6_o_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state88) & (1'd1 == tmp_18_reg_3173))) begin
        fc6_o_ce0 = grp_copy_out_fu_1314_fc6_o_ce0;
    end else begin
        fc6_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        fc6_o_we0 = 1'b1;
    end else begin
        fc6_o_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        fc6_w_0_0_address0 = tmp_124_cast_fu_2908_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        fc6_w_0_0_address0 = fc6_w_0_0_addr_1_reg_3195;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        fc6_w_0_0_address0 = tmp_85_cast_fu_1982_p1;
    end else begin
        fc6_w_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state33))) begin
        fc6_w_0_0_ce0 = 1'b1;
    end else begin
        fc6_w_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        fc6_w_0_0_d0 = fc6_w_i_q0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        fc6_w_0_0_d0 = 32'd0;
    end else begin
        fc6_w_0_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state33))) begin
        fc6_w_0_0_we0 = 1'b1;
    end else begin
        fc6_w_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        fc6_w_i_ce0 = 1'b1;
    end else begin
        fc6_w_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_1323_p1 = fc6_b_load_reg_3551;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_1323_p1 = tmp_19_i_reg_3541;
    end else begin
        grp_fu_1323_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_1332_p0 = c5_o_1_0_0_load_reg_3473;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_1332_p0 = p4_o_1_load_reg_3443;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_1332_p0 = c3_o_1_load_reg_3387;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_1332_p0 = p2_o_1_load_reg_3331;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_1332_p0 = c1_o_1_load_reg_3275;
    end else begin
        grp_fu_1332_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_in_0_address0 = tmp_50_fu_1491_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        image_in_0_address0 = grp_copy_i_fu_1282_out_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        image_in_0_address0 = grp_convolution1_fu_1223_input_0_address0;
    end else begin
        image_in_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_in_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        image_in_0_ce0 = grp_copy_i_fu_1282_out_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        image_in_0_ce0 = grp_convolution1_fu_1223_input_0_ce0;
    end else begin
        image_in_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_in_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        image_in_0_d0 = grp_copy_i_fu_1282_out_0_d0;
    end else begin
        image_in_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_in_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        image_in_0_we0 = grp_copy_i_fu_1282_out_0_we0;
    end else begin
        image_in_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        p2_o_1_address0 = tmp_115_cast_fu_2404_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        p2_o_1_address0 = grp_max_pooling2_fu_1242_output_r_address0;
    end else begin
        p2_o_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        p2_o_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        p2_o_1_ce0 = grp_max_pooling2_fu_1242_output_r_ce0;
    end else begin
        p2_o_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        p2_o_1_we0 = grp_max_pooling2_fu_1242_output_r_we0;
    end else begin
        p2_o_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        p2_o_2_address0 = p2_o_2_addr_reg_3313;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        p2_o_2_address0 = grp_convolution3_fu_1213_p2_o_2_address0;
    end else begin
        p2_o_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        p2_o_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        p2_o_2_ce0 = grp_convolution3_fu_1213_p2_o_2_ce0;
    end else begin
        p2_o_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        p2_o_2_we0 = 1'b1;
    end else begin
        p2_o_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        p4_o_1_address0 = tmp_123_cast_fu_2716_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        p4_o_1_address0 = grp_max_pooling4_fu_1250_output_r_address0;
    end else begin
        p4_o_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        p4_o_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        p4_o_1_ce0 = grp_max_pooling4_fu_1250_output_r_ce0;
    end else begin
        p4_o_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        p4_o_1_we0 = grp_max_pooling4_fu_1250_output_r_we0;
    end else begin
        p4_o_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        p4_o_2_address0 = p4_o_2_addr_reg_3425;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        p4_o_2_address0 = grp_convolution5_fu_1232_p4_o_2_address0;
    end else begin
        p4_o_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        p4_o_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        p4_o_2_ce0 = grp_convolution5_fu_1232_p4_o_2_ce0;
    end else begin
        p4_o_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        p4_o_2_we0 = 1'b1;
    end else begin
        p4_o_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_fu_1502_p2) & (1'd1 == tmp_s_fu_1508_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_s_fu_1508_p2) & (1'd1 == tmp_fu_1502_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_6_fu_1599_p2) & (1'd1 == tmp_7_fu_1605_p2) & (1'd1 == tmp_9_fu_1611_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_9_fu_1611_p2) & (1'd1 == tmp_6_fu_1599_p2) & (1'd1 == tmp_7_fu_1605_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_6_fu_1599_p2) & (1'd0 == tmp_7_fu_1605_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_1_fu_1628_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == tmp_2_fu_1754_p2) & (1'd1 == tmp_3_fu_1760_p2) & (1'd1 == tmp_4_fu_1766_p2) & (1'd1 == tmp_5_fu_1772_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == tmp_5_fu_1772_p2) & (1'd1 == tmp_2_fu_1754_p2) & (1'd1 == tmp_3_fu_1760_p2) & (1'd1 == tmp_4_fu_1766_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == tmp_2_fu_1754_p2) & (1'd1 == tmp_3_fu_1760_p2) & (1'd0 == tmp_4_fu_1766_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == tmp_2_fu_1754_p2) & (1'd0 == tmp_3_fu_1760_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_8_fu_1789_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_10_fu_1896_p2) & (1'd1 == tmp_11_fu_1902_p2) & (1'd1 == tmp_12_fu_1908_p2) & (1'd1 == tmp_13_fu_1914_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == tmp_13_fu_1914_p2) & (1'd1 == tmp_10_fu_1896_p2) & (1'd1 == tmp_11_fu_1902_p2) & (1'd1 == tmp_12_fu_1908_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_10_fu_1896_p2) & (1'd1 == tmp_11_fu_1902_p2) & (1'd0 == tmp_12_fu_1908_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_10_fu_1896_p2) & (1'd0 == tmp_11_fu_1902_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (1'd1 == tmp_14_fu_1931_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == tmp_15_fu_1993_p2) & (1'd1 == tmp_16_fu_1999_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((1'b1 == ap_CS_fsm_state19) & (1'd0 == tmp_16_fu_1999_p2) & (1'd1 == tmp_15_fu_1993_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (tmp_17_fu_2016_p2 == 1'd1) & (ap_block_state20_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0) & (tmp_17_fu_2016_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (DATA_START_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (tmp_18_fu_2022_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (ap_block_state29_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (1'd1 == exitcond3_i_fu_2057_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (1'd1 == exitcond2_i_fu_2083_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (1'd1 == l_i_phi_fu_1017_p4))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (1'd1 == exitcond_i1_fu_2114_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (grp_convolution1_fu_1223_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (1'd0 == exitcond2_i1_fu_2160_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (1'd1 == exitcond1_i_fu_2211_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (1'd1 == exitcond_i2_fu_2238_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (grp_max_pooling2_fu_1242_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == exitcond2_i2_fu_2332_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (1'd1 == exitcond1_i1_fu_2383_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (1'd1 == exitcond_i3_fu_2410_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (grp_convolution3_fu_1213_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (1'd0 == exitcond2_i3_fu_2500_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (1'd1 == exitcond1_i2_fu_2547_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (1'd1 == exitcond_i5_fu_2574_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (grp_max_pooling4_fu_1250_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (1'd0 == exitcond2_i4_fu_2656_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (1'd1 == exitcond1_i3_fu_2695_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (1'd1 == exitcond_i6_fu_2722_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (grp_convolution5_fu_1232_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (1'd1 == exitcond_i4_fu_2787_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & (1'd0 == exitcond1_i4_fu_2882_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((1'b1 == ap_CS_fsm_state70) & (1'd1 == exitcond_i7_fu_2913_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state88 : begin
            if (((1'b1 == ap_CS_fsm_state88) & ~((1'b1 == ap_block_state88_on_subcall_done) | (1'b0 == ap_sig_ioackin_DATA_DONE_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((1'b1 == ap_CS_fsm_state89) & (ap_sig_ioackin_DATA_DONE_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            if (((1'b1 == ap_CS_fsm_state94) & (DATA_DONE_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

always @ (*) begin
    ap_block_state20_io = ((tmp_17_fu_2016_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_DATA_START_ARREADY));
end

always @ (*) begin
    ap_block_state29_on_subcall_done = ((1'b0 == grp_copy_i_fu_1282_ap_done) | (1'b0 == grp_copy_w1_fu_1274_ap_done) | (1'b0 == grp_copy_b1_fu_1306_ap_done) | (1'b0 == grp_copy_w3_fu_1266_ap_done) | (1'b0 == grp_copy_b3_fu_1298_ap_done) | (1'b0 == grp_copy_w5_fu_1258_ap_done) | (1'b0 == grp_copy_b5_fu_1290_ap_done));
end

always @ (*) begin
    ap_block_state88_on_subcall_done = ((1'd1 == tmp_18_reg_3173) & (1'b0 == grp_copy_out_fu_1314_ap_done));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c1_o_2_d0 = ((tmp_25_fu_2285_p2[0:0] === 1'b1) ? c1_o_1_load_reg_3275 : 32'd0);

assign c3_o_2_d0 = ((tmp_40_fu_2621_p2[0:0] === 1'b1) ? c3_o_1_load_reg_3387 : 32'd0);

assign c5_o_2_0_0_d0 = ((tmp_35_fu_2834_p2[0:0] === 1'b1) ? c5_o_1_0_0_load_reg_3473 : 32'd0);

assign c_fu_2919_p2 = (c_i_reg_1202 + 7'd1);

assign c_i_cast1_cast_fu_2899_p1 = c_i_reg_1202;

assign c_i_cast1_fu_2894_p1 = c_i_reg_1202;

assign done1_fu_1357_p4 = {{done[31:2]}};

assign exitcond1_i1_fu_2383_p2 = ((j_i2_reg_1080 == 4'd14) ? 1'b1 : 1'b0);

assign exitcond1_i2_fu_2547_p2 = ((j_i3_reg_1113 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond1_i3_fu_2695_p2 = ((j_i4_reg_1146 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond1_i4_fu_2882_p2 = ((n_i_reg_1179 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_2211_p2 = ((j_i1_reg_1047 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond2_i1_fu_2160_p2 = ((i_i2_reg_1036 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_i2_fu_2332_p2 = ((i_i3_reg_1069 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_i3_fu_2500_p2 = ((i_i4_reg_1102 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond2_i4_fu_2656_p2 = ((i_i5_reg_1135 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_2083_p2 = ((j_i_reg_1001 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_i_fu_2057_p2 = ((i_i_reg_990 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_i1_fu_2114_p2 = ((i_i1_reg_1025 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_2238_p2 = ((k_i_reg_1058 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond_i3_fu_2410_p2 = ((k_i1_reg_1091 == 4'd14) ? 1'b1 : 1'b0);

assign exitcond_i4_fu_2787_p2 = ((i_i6_reg_1168 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_i5_fu_2574_p2 = ((k_i2_reg_1124 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_i6_fu_2722_p2 = ((k_i3_reg_1157 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_i7_fu_2913_p2 = ((c_i_reg_1202 == 7'd120) ? 1'b1 : 1'b0);

assign fc6_b_i_address0 = i_i1_cast_fu_2109_p1;

assign fc6_w_i_address0 = tmp_93_cast_fu_2104_p1;

assign grp_convolution1_fu_1223_ap_start = ap_reg_grp_convolution1_fu_1223_ap_start;

assign grp_convolution3_fu_1213_ap_start = ap_reg_grp_convolution3_fu_1213_ap_start;

assign grp_convolution5_fu_1232_ap_start = ap_reg_grp_convolution5_fu_1232_ap_start;

assign grp_copy_b1_fu_1306_ap_start = ap_reg_grp_copy_b1_fu_1306_ap_start;

assign grp_copy_b3_fu_1298_ap_start = ap_reg_grp_copy_b3_fu_1298_ap_start;

assign grp_copy_b5_fu_1290_ap_start = ap_reg_grp_copy_b5_fu_1290_ap_start;

assign grp_copy_i_fu_1282_ap_start = ap_reg_grp_copy_i_fu_1282_ap_start;

assign grp_copy_out_fu_1314_ap_start = ap_reg_grp_copy_out_fu_1314_ap_start;

assign grp_copy_w1_fu_1274_ap_start = ap_reg_grp_copy_w1_fu_1274_ap_start;

assign grp_copy_w3_fu_1266_ap_start = ap_reg_grp_copy_w3_fu_1266_ap_start;

assign grp_copy_w5_fu_1258_ap_start = ap_reg_grp_copy_w5_fu_1258_ap_start;

assign grp_max_pooling2_fu_1242_ap_start = ap_reg_grp_max_pooling2_fu_1242_ap_start;

assign grp_max_pooling4_fu_1250_ap_start = ap_reg_grp_max_pooling4_fu_1250_ap_start;

assign i_3_fu_2063_p2 = (7'd1 + i_i_reg_990);

assign i_4_fu_2166_p2 = (i_i2_reg_1036 + 3'd1);

assign i_5_fu_2338_p2 = (i_i3_reg_1069 + 3'd1);

assign i_6_fu_2506_p2 = (i_i4_reg_1102 + 5'd1);

assign i_7_fu_2793_p2 = (i_i6_reg_1168 + 7'd1);

assign i_8_fu_2662_p2 = (i_i5_reg_1135 + 5'd1);

assign i_fu_2120_p2 = (i_i1_reg_1025 + 4'd1);

assign i_i1_cast_fu_2109_p1 = i_i1_reg_1025;

assign i_i5_cast6_cast_fu_2634_p1 = i_i5_reg_1135;

assign i_i6_cast3_fu_2782_p1 = i_i6_reg_1168;

assign indvarinc10_fu_1783_p2 = (invdar10_reg_887 + 4'd1);

assign indvarinc11_fu_1795_p2 = (invdar11_reg_898 + 7'd1);

assign indvarinc12_fu_1833_p2 = (invdar12_reg_910 + 4'd1);

assign indvarinc13_fu_1870_p2 = (3'd1 + invdar13_reg_922);

assign indvarinc14_fu_1890_p2 = (invdar14_reg_934 + 3'd1);

assign indvarinc15_fu_1925_p2 = (invdar15_reg_945 + 7'd1);

assign indvarinc16_fu_1967_p2 = (invdar16_reg_956 + 4'd1);

assign indvarinc17_fu_1987_p2 = (invdar17_reg_968 + 7'd1);

assign indvarinc18_fu_2010_p2 = (invdar18_reg_979 + 4'd1);

assign indvarinc1_fu_1536_p2 = (invdar1_reg_794 + 3'd1);

assign indvarinc2_fu_1748_p2 = (invdar2_reg_876 + 3'd1);

assign indvarinc3_fu_1573_p2 = (3'd1 + invdar4_reg_806);

assign indvarinc4_fu_1477_p2 = (invdar3_reg_771 + 5'd1);

assign indvarinc5_fu_1593_p2 = (invdar5_reg_818 + 3'd1);

assign indvarinc6_fu_1622_p2 = (invdar6_reg_829 + 3'd1);

assign indvarinc7_fu_1664_p2 = (invdar8_reg_840 + 4'd1);

assign indvarinc8_fu_1496_p2 = (invdar7_reg_783 + 5'd1);

assign indvarinc9_fu_1691_p2 = (3'd1 + invdar9_reg_852);

assign indvarinc_fu_1728_p2 = (3'd1 + invdar_reg_864);

assign input_assign_2_to_in_fu_2422_p1 = p2_o_1_load_reg_3331;

assign input_assign_4_to_in_fu_2799_p1 = c5_o_1_0_0_load_reg_3473;

assign input_assign_6_to_in_fu_2586_p1 = c3_o_1_load_reg_3387;

assign input_assign_8_to_in_fu_2734_p1 = p4_o_1_load_reg_3443;

assign input_assign_to_int_fu_2250_p1 = c1_o_1_load_reg_3275;

assign invdar10_cast_fu_1778_p1 = invdar10_reg_887;

assign invdar13_cast_fu_1839_p1 = invdar13_reg_922;

assign invdar14_cast_cast_fu_1876_p1 = invdar14_reg_934;

assign invdar15_cast_fu_1920_p1 = invdar15_reg_945;

assign invdar17_cast_cast_fu_1973_p1 = invdar17_reg_968;

assign invdar18_cast_fu_2005_p1 = invdar18_reg_979;

assign invdar1_cast_fu_1514_p1 = invdar1_reg_794;

assign invdar2_cast_cast_fu_1734_p1 = invdar2_reg_876;

assign invdar4_cast_fu_1542_p1 = invdar4_reg_806;

assign invdar5_cast_cast_fu_1579_p1 = invdar5_reg_818;

assign invdar6_cast_fu_1617_p1 = invdar6_reg_829;

assign invdar9_cast_fu_1670_p1 = invdar9_reg_852;

assign invdar_cast_fu_1697_p1 = invdar_reg_864;

assign j_3_fu_2217_p2 = (5'd1 + j_i1_reg_1047);

assign j_4_fu_2389_p2 = (4'd1 + j_i2_reg_1080);

assign j_5_fu_2553_p2 = (j_i3_reg_1113 + 4'd1);

assign j_6_fu_2701_p2 = (j_i4_reg_1146 + 3'd1);

assign j_fu_2089_p2 = (j_i_reg_1001 + 4'd1);

assign j_i1_cast_cast_fu_2172_p1 = j_i1_reg_1047;

assign j_i2_cast_cast_fu_2344_p1 = j_i2_reg_1080;

assign j_i3_cast8_cast_fu_2512_p1 = j_i3_reg_1113;

assign j_i4_cast5_cast_fu_2668_p1 = j_i4_reg_1146;

assign j_i_cast_cast_fu_2069_p1 = j_i_reg_1001;

assign k_1_fu_2416_p2 = (k_i1_reg_1091 + 4'd1);

assign k_2_fu_2580_p2 = (k_i2_reg_1124 + 4'd1);

assign k_3_fu_2728_p2 = (k_i3_reg_1157 + 3'd1);

assign k_fu_2244_p2 = (k_i_reg_1058 + 5'd1);

assign k_i1_cast_cast_fu_2395_p1 = k_i1_reg_1091;

assign k_i2_cast7_cast_fu_2559_p1 = k_i2_reg_1124;

assign k_i3_cast4_cast_fu_2707_p1 = k_i3_reg_1157;

assign k_i_cast_cast_fu_2223_p1 = k_i_reg_1058;

assign l_i_cast_cast_fu_2095_p1 = l_i_reg_1012;

assign l_i_phi_fu_1017_p4 = l_i_reg_1012;

assign n_fu_2888_p2 = (n_i_reg_1179 + 4'd1);

assign n_i_cast2_fu_2847_p1 = n_i_reg_1179;

assign notlhs1_fu_2439_p2 = ((tmp_26_fu_2425_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs2_fu_2816_p2 = ((tmp_31_fu_2802_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs3_fu_2603_p2 = ((tmp_36_fu_2589_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs4_fu_2751_p2 = ((tmp_41_fu_2737_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_2267_p2 = ((tmp_21_fu_2253_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_2445_p2 = ((tmp_112_fu_2435_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_2822_p2 = ((tmp_116_fu_2812_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs3_fu_2609_p2 = ((tmp_117_fu_2599_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_2757_p2 = ((tmp_122_fu_2747_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_2273_p2 = ((tmp_105_fu_2263_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p2_o_2_d0 = ((tmp_30_fu_2457_p2[0:0] === 1'b1) ? p2_o_1_load_reg_3331 : 32'd0);

assign p4_o_2_d0 = ((tmp_45_fu_2769_p2[0:0] === 1'b1) ? p4_o_1_load_reg_3443 : 32'd0);

assign p_shl10_cast_fu_2031_p3 = {{tmp_82_fu_2027_p1}, {7'd0}};

assign p_shl11_cast_fu_2047_p1 = tmp_83_fu_2039_p3;

assign p_shl12_cast_fu_2134_p1 = tmp_86_fu_2126_p3;

assign p_shl13_cast_fu_2146_p1 = tmp_87_fu_2138_p3;

assign p_shl14_cast_fu_2306_p1 = tmp_90_fu_2298_p3;

assign p_shl15_cast_fu_2318_p1 = tmp_91_fu_2310_p3;

assign p_shl16_cast_fu_2185_p3 = {{tmp_94_fu_2181_p1}, {5'd0}};

assign p_shl17_cast_fu_2201_p1 = $signed(tmp_95_fu_2193_p3);

assign p_shl18_cast_fu_2478_p1 = tmp_97_fu_2470_p3;

assign p_shl19_cast_fu_2490_p1 = tmp_98_fu_2482_p3;

assign p_shl1_cast_fu_1559_p3 = {{tmp_55_fu_1555_p1}, {2'd0}};

assign p_shl20_cast_fu_2357_p3 = {{tmp_101_fu_2353_p1}, {4'd0}};

assign p_shl21_cast_fu_2373_p1 = $signed(tmp_102_fu_2365_p3);

assign p_shl22_cast_fu_2646_p1 = tmp_106_fu_2638_p3;

assign p_shl23_cast_fu_2521_p3 = {{tmp_108_fu_2516_p2}, {3'd0}};

assign p_shl24_cast_fu_2537_p1 = tmp_109_fu_2529_p3;

assign p_shl25_cast_fu_2681_p3 = {{tmp_113_fu_2672_p2}, {2'd0}};

assign p_shl26_cast_fu_2860_p1 = tmp_118_fu_2852_p3;

assign p_shl27_cast_fu_2872_p1 = tmp_119_fu_2864_p3;

assign p_shl2_fu_1642_p1 = tmp_58_fu_1634_p3;

assign p_shl3_fu_1654_p1 = tmp_59_fu_1646_p3;

assign p_shl5_cast_fu_1714_p3 = {{tmp_66_fu_1710_p1}, {2'd0}};

assign p_shl6_fu_1823_p1 = tmp_71_fu_1813_p4;

assign p_shl7_cast_fu_1856_p3 = {{tmp_75_fu_1852_p1}, {2'd0}};

assign p_shl8_cast_fu_1945_p1 = tmp_78_fu_1937_p3;

assign p_shl9_cast_fu_1957_p1 = tmp_79_fu_1949_p3;

assign p_shl_fu_1526_p1 = tmp_51_fu_1518_p3;

assign start1_fu_1337_p4 = {{start[31:2]}};

assign tmp_100_fu_2348_p2 = ($signed(tmp_96_cast_reg_3287) + $signed(j_i2_cast_cast_fu_2344_p1));

assign tmp_101_fu_2353_p1 = tmp_100_fu_2348_p2[7:0];

assign tmp_102_fu_2365_p3 = {{tmp_100_fu_2348_p2}, {1'd0}};

assign tmp_103_fu_2377_p2 = ($signed(p_shl20_cast_fu_2357_p3) - $signed(p_shl21_cast_fu_2373_p1));

assign tmp_104_fu_2227_p2 = (tmp_96_reg_3244 + k_i_cast_cast_fu_2223_p1);

assign tmp_105_fu_2263_p1 = input_assign_to_int_fu_2250_p1[22:0];

assign tmp_106_fu_2638_p3 = {{i_i5_reg_1135}, {2'd0}};

assign tmp_107_fu_2650_p2 = (i_i5_cast6_cast_fu_2634_p1 + p_shl22_cast_fu_2646_p1);

assign tmp_108_cast_fu_2232_p1 = tmp_104_fu_2227_p2;

assign tmp_108_fu_2516_p2 = (j_i3_cast8_cast_fu_2512_p1 + tmp_99_reg_3343);

assign tmp_109_fu_2529_p3 = {{tmp_108_fu_2516_p2}, {1'd0}};

assign tmp_10_fu_1896_p2 = ((invdar14_reg_934 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_110_fu_2541_p2 = (p_shl23_cast_fu_2521_p3 + p_shl24_cast_fu_2537_p1);

assign tmp_111_fu_2399_p2 = (tmp_103_reg_3300 + k_i1_cast_cast_fu_2395_p1);

assign tmp_112_fu_2435_p1 = input_assign_2_to_in_fu_2422_p1[22:0];

assign tmp_113_fu_2672_p2 = (tmp_107_reg_3399 + j_i4_cast5_cast_fu_2668_p1);

assign tmp_114_fu_2689_p2 = (tmp_116_cast_fu_2677_p1 + p_shl25_cast_fu_2681_p3);

assign tmp_115_cast_fu_2404_p1 = tmp_111_fu_2399_p2;

assign tmp_115_fu_2563_p2 = (tmp_110_reg_3356 + k_i2_cast7_cast_fu_2559_p1);

assign tmp_116_cast_fu_2677_p1 = tmp_113_fu_2672_p2;

assign tmp_116_fu_2812_p1 = input_assign_4_to_in_fu_2799_p1[22:0];

assign tmp_117_fu_2599_p1 = input_assign_6_to_in_fu_2586_p1[22:0];

assign tmp_118_fu_2852_p3 = {{n_i_reg_1179}, {7'd0}};

assign tmp_119_cast_fu_2568_p1 = tmp_115_fu_2563_p2;

assign tmp_119_fu_2864_p3 = {{n_i_reg_1179}, {3'd0}};

assign tmp_11_fu_1902_p2 = ((invdar13_reg_922 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_120_fu_2876_p2 = (p_shl26_cast_fu_2860_p1 - p_shl27_cast_fu_2872_p1);

assign tmp_121_fu_2711_p2 = (tmp_114_reg_3412 + k_i3_cast4_cast_fu_2707_p1);

assign tmp_122_fu_2747_p1 = input_assign_8_to_in_fu_2734_p1[22:0];

assign tmp_123_cast_fu_2716_p1 = tmp_121_fu_2711_p2;

assign tmp_123_fu_2903_p2 = (tmp_120_reg_3490 + c_i_cast1_cast_fu_2899_p1);

assign tmp_124_cast_fu_2908_p1 = $signed(tmp_123_fu_2903_p2);

assign tmp_12_fu_1908_p2 = ((invdar12_reg_910 == 4'd15) ? 1'b1 : 1'b0);

assign tmp_13_fu_1914_p2 = ((invdar11_reg_898 == 7'd119) ? 1'b1 : 1'b0);

assign tmp_14_fu_1931_p2 = ((invdar15_reg_945 == 7'd119) ? 1'b1 : 1'b0);

assign tmp_15_fu_1993_p2 = ((invdar17_reg_968 == 7'd119) ? 1'b1 : 1'b0);

assign tmp_16_fu_1999_p2 = ((invdar16_reg_956 == 4'd9) ? 1'b1 : 1'b0);

assign tmp_17_fu_2016_p2 = ((invdar18_reg_979 == 4'd9) ? 1'b1 : 1'b0);

assign tmp_18_fu_2022_p2 = ((DATA_START_addr_read_reg_3168 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_1_fu_1628_p2 = ((invdar6_reg_829 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_21_fu_2253_p4 = {{input_assign_to_int_fu_2250_p1[30:23]}};

assign tmp_23_fu_2279_p2 = (notrhs_fu_2273_p2 | notlhs_fu_2267_p2);

assign tmp_25_fu_2285_p2 = (tmp_23_fu_2279_p2 & tmp_24_reg_3282);

assign tmp_26_fu_2425_p4 = {{input_assign_2_to_in_fu_2422_p1[30:23]}};

assign tmp_28_fu_2451_p2 = (notrhs1_fu_2445_p2 | notlhs1_fu_2439_p2);

assign tmp_2_fu_1754_p2 = ((invdar2_reg_876 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_30_fu_2457_p2 = (tmp_28_fu_2451_p2 & tmp_29_reg_3338);

assign tmp_31_fu_2802_p4 = {{input_assign_4_to_in_fu_2799_p1[30:23]}};

assign tmp_33_fu_2828_p2 = (notrhs2_fu_2822_p2 | notlhs2_fu_2816_p2);

assign tmp_35_fu_2834_p2 = (tmp_33_fu_2828_p2 & tmp_34_reg_3480);

assign tmp_36_fu_2589_p4 = {{input_assign_6_to_in_fu_2586_p1[30:23]}};

assign tmp_38_fu_2615_p2 = (notrhs3_fu_2609_p2 | notlhs3_fu_2603_p2);

assign tmp_3_fu_1760_p2 = ((invdar_reg_864 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_40_fu_2621_p2 = (tmp_38_fu_2615_p2 & tmp_39_reg_3394);

assign tmp_41_fu_2737_p4 = {{input_assign_8_to_in_fu_2734_p1[30:23]}};

assign tmp_42_fu_1347_p1 = start1_fu_1337_p4;

assign tmp_43_fu_2763_p2 = (notrhs4_fu_2757_p2 | notlhs4_fu_2751_p2);

assign tmp_45_fu_2769_p2 = (tmp_43_fu_2763_p2 & tmp_44_reg_3450);

assign tmp_46_fu_1367_p1 = done1_fu_1357_p4;

assign tmp_49_fu_1483_p3 = {{invdar3_reg_771}, {invdar7_reg_783}};

assign tmp_4_fu_1766_p2 = ((invdar9_reg_852 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_50_fu_1491_p1 = tmp_49_fu_1483_p3;

assign tmp_51_fu_1518_p3 = {{invdar1_reg_794}, {2'd0}};

assign tmp_52_fu_1530_p2 = (p_shl_fu_1526_p1 + invdar1_cast_fu_1514_p1);

assign tmp_53_fu_1546_p2 = (tmp_52_reg_2992 + invdar4_cast_fu_1542_p1);

assign tmp_54_fu_1551_p1 = tmp_53_fu_1546_p2[8:0];

assign tmp_55_fu_1555_p1 = tmp_53_fu_1546_p2[6:0];

assign tmp_56_fu_1567_p2 = (tmp_54_fu_1551_p1 + p_shl1_cast_fu_1559_p3);

assign tmp_57_fu_1583_p2 = (tmp_56_reg_3002 + invdar5_cast_cast_fu_1579_p1);

assign tmp_58_fu_1634_p3 = {{invdar8_reg_840}, {3'd0}};

assign tmp_59_fu_1646_p3 = {{invdar8_reg_840}, {1'd0}};

assign tmp_5_fu_1772_p2 = ((invdar8_reg_840 == 4'd15) ? 1'b1 : 1'b0);

assign tmp_60_fu_1658_p2 = (p_shl2_fu_1642_p1 - p_shl3_fu_1654_p1);

assign tmp_61_fu_1674_p2 = (tmp_60_reg_3034 + invdar9_cast_fu_1670_p1);

assign tmp_62_fu_1679_p2 = tmp_61_fu_1674_p2 << 32'd2;

assign tmp_63_cast_fu_1588_p1 = tmp_57_fu_1583_p2;

assign tmp_63_fu_1685_p2 = (tmp_61_fu_1674_p2 + tmp_62_fu_1679_p2);

assign tmp_64_fu_1701_p2 = (tmp_63_reg_3044 + invdar_cast_fu_1697_p1);

assign tmp_65_fu_1706_p1 = tmp_64_fu_1701_p2[12:0];

assign tmp_66_fu_1710_p1 = tmp_64_fu_1701_p2[10:0];

assign tmp_67_fu_1722_p2 = (tmp_65_fu_1706_p1 + p_shl5_cast_fu_1714_p3);

assign tmp_68_fu_1738_p2 = (tmp_67_reg_3054 + invdar2_cast_cast_fu_1734_p1);

assign tmp_69_fu_1801_p3 = {{invdar11_reg_898}, {invdar12_reg_910}};

assign tmp_6_fu_1599_p2 = ((invdar5_reg_818 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_70_fu_1809_p1 = tmp_69_fu_1801_p3;

assign tmp_71_fu_1813_p4 = {{{invdar11_reg_898}, {invdar12_reg_910}}, {2'd0}};

assign tmp_72_fu_1827_p2 = (p_shl6_fu_1823_p1 + tmp_70_fu_1809_p1);

assign tmp_73_cast_fu_1743_p1 = tmp_68_fu_1738_p2;

assign tmp_73_fu_1843_p2 = (tmp_72_reg_3094 + invdar13_cast_fu_1839_p1);

assign tmp_74_fu_1848_p1 = tmp_73_fu_1843_p2[16:0];

assign tmp_75_fu_1852_p1 = tmp_73_fu_1843_p2[14:0];

assign tmp_76_fu_1864_p2 = (tmp_74_fu_1848_p1 + p_shl7_cast_fu_1856_p3);

assign tmp_77_fu_1880_p2 = (tmp_76_reg_3104 + invdar14_cast_cast_fu_1876_p1);

assign tmp_78_fu_1937_p3 = {{invdar16_reg_956}, {7'd0}};

assign tmp_79_fu_1949_p3 = {{invdar16_reg_956}, {3'd0}};

assign tmp_7_fu_1605_p2 = ((invdar4_reg_806 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_80_fu_1961_p2 = (p_shl8_cast_fu_1945_p1 - p_shl9_cast_fu_1957_p1);

assign tmp_81_cast_fu_1885_p1 = tmp_77_fu_1880_p2;

assign tmp_81_fu_1977_p2 = (tmp_80_reg_3139 + invdar17_cast_cast_fu_1973_p1);

assign tmp_82_fu_2027_p1 = i_i_reg_990[4:0];

assign tmp_83_fu_2039_p3 = {{i_i_reg_990}, {3'd0}};

assign tmp_84_fu_2051_p2 = (p_shl10_cast_fu_2031_p3 - p_shl11_cast_fu_2047_p1);

assign tmp_85_cast_fu_1982_p1 = tmp_81_fu_1977_p2;

assign tmp_85_fu_2073_p2 = (tmp_84_reg_3177 + j_i_cast_cast_fu_2069_p1);

assign tmp_86_fu_2126_p3 = {{i_i2_reg_1036}, {5'd0}};

assign tmp_87_fu_2138_p3 = {{i_i2_reg_1036}, {2'd0}};

assign tmp_88_fu_2150_p2 = (p_shl12_cast_fu_2134_p1 - p_shl13_cast_fu_2146_p1);

assign tmp_89_cast_fu_2078_p1 = $signed(tmp_85_fu_2073_p2);

assign tmp_89_fu_2099_p2 = (tmp_85_reg_3190 + l_i_cast_cast_fu_2095_p1);

assign tmp_8_fu_1789_p2 = ((invdar10_reg_887 == 4'd15) ? 1'b1 : 1'b0);

assign tmp_90_fu_2298_p3 = {{i_i3_reg_1069}, {4'd0}};

assign tmp_91_fu_2310_p3 = {{i_i3_reg_1069}, {1'd0}};

assign tmp_92_cast_fu_2156_p1 = $signed(tmp_88_fu_2150_p2);

assign tmp_92_fu_2322_p2 = (p_shl14_cast_fu_2306_p1 - p_shl15_cast_fu_2318_p1);

assign tmp_93_cast_fu_2104_p1 = $signed(tmp_89_fu_2099_p2);

assign tmp_93_fu_2176_p2 = ($signed(tmp_92_cast_reg_3231) + $signed(j_i1_cast_cast_fu_2172_p1));

assign tmp_94_fu_2181_p1 = tmp_93_fu_2176_p2[8:0];

assign tmp_95_fu_2193_p3 = {{tmp_93_fu_2176_p2}, {2'd0}};

assign tmp_96_cast_fu_2328_p1 = $signed(tmp_92_fu_2322_p2);

assign tmp_96_fu_2205_p2 = ($signed(p_shl16_cast_fu_2185_p3) - $signed(p_shl17_cast_fu_2201_p1));

assign tmp_97_fu_2470_p3 = {{i_i4_reg_1102}, {3'd0}};

assign tmp_98_fu_2482_p3 = {{i_i4_reg_1102}, {1'd0}};

assign tmp_99_fu_2494_p2 = (p_shl19_cast_fu_2490_p1 + p_shl18_cast_fu_2478_p1);

assign tmp_9_fu_1611_p2 = ((invdar1_reg_794 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_fu_1502_p2 = ((invdar7_reg_783 == 5'd31) ? 1'b1 : 1'b0);

assign tmp_s_fu_1508_p2 = ((invdar3_reg_771 == 5'd31) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    DATA_START_addr_reg_2925[31:30] <= 2'b00;
    DATA_DONE_addr_reg_2931[31:30] <= 2'b00;
    tmp_60_reg_3034[0] <= 1'b0;
    tmp_80_reg_3139[2:0] <= 3'b000;
    tmp_84_reg_3177[2:0] <= 3'b000;
    i_i1_cast_reg_3213[31:4] <= 28'b0000000000000000000000000000;
    tmp_92_cast_reg_3231[1:0] <= 2'b00;
    tmp_96_reg_3244[1:0] <= 2'b00;
    tmp_96_cast_reg_3287[0] <= 1'b0;
    tmp_103_reg_3300[0] <= 1'b0;
    tmp_99_reg_3343[0] <= 1'b0;
    tmp_110_reg_3356[0] <= 1'b0;
    i_i6_cast3_reg_3455[31:7] <= 25'b0000000000000000000000000;
    n_i_cast2_reg_3485[31:4] <= 28'b0000000000000000000000000000;
    tmp_120_reg_3490[2:0] <= 3'b000;
end

endmodule //lenet_wrapper
