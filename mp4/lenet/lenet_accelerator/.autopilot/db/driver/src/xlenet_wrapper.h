// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XLENET_WRAPPER_H
#define XLENET_WRAPPER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xlenet_wrapper_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XLenet_wrapper_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XLenet_wrapper;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XLenet_wrapper_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XLenet_wrapper_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XLenet_wrapper_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XLenet_wrapper_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XLenet_wrapper_Initialize(XLenet_wrapper *InstancePtr, u16 DeviceId);
XLenet_wrapper_Config* XLenet_wrapper_LookupConfig(u16 DeviceId);
int XLenet_wrapper_CfgInitialize(XLenet_wrapper *InstancePtr, XLenet_wrapper_Config *ConfigPtr);
#else
int XLenet_wrapper_Initialize(XLenet_wrapper *InstancePtr, const char* InstanceName);
int XLenet_wrapper_Release(XLenet_wrapper *InstancePtr);
#endif


void XLenet_wrapper_Set_image_in_i(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_image_in_i(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_c1_w_i(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_c1_w_i(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_c1_b_i(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_c1_b_i(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_c3_w_i(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_c3_w_i(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_c3_b_i(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_c3_b_i(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_c5_w_i(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_c5_w_i(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_c5_b_i(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_c5_b_i(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_fc6_o_o(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_fc6_o_o(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_done(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_done(XLenet_wrapper *InstancePtr);
void XLenet_wrapper_Set_start(XLenet_wrapper *InstancePtr, u32 Data);
u32 XLenet_wrapper_Get_start(XLenet_wrapper *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
